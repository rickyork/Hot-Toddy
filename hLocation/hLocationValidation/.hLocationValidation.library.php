<?php
  class hLocationValidationLibrary extends hPlugin { private $countryId = null; private $stateId = null; private $postalCode = null; private $hLocation; public function hConstructor() { $this->hLocation = $this->library('hLocation'); } public function isPostalCode($postalCode = null) {                                        if (empty($postalCode)) { if (!empty($this->postalCode)) { $postalCode = $this->postalCode; } else { $this->warning( "No postal code provided for validation.", __FILE__, __LINE__ ); return false; } } $pattern = $this->getPostalCodePattern(); return empty($pattern)? true : preg_match($pattern, $postalCode); } public function getPostalCodePattern() { switch ($this->countryId) { case 223:  { return '/^([0-9]{1,5})(\-{1}[0-9]{1,4})?$/'; } case 222:  { return '/^[A-Z]{1,2}[0-9|A-Z]?[0-9|A-Z]? [0-9][A-Z]{2}$/i'; }  case 32:  { return '/^[A-Z]{2}[0-9]{4}$/i'; } case 38:  { return '/^[a-z]\d[a-z] ?\d[a-z]\d$/i'; }  case 57:  { return '/^[0-9]{3,4}$/'; }  case 56:  { return '/^[0-9]{3} ?[0-9]{2}$/'; } case 150:  { return '/^[0-9]{4} ?[A-Z]{2}$/'; } case 107:  { return '/^[0-9]{3}\-?[0-9]{4}$/'; }  case 44:  case 99:  { return '/^[0-9]{6}$/'; }  case 72:  case 73:  case 81:  case 84:  case 100:  case 104:  case 105:  case 129:  case 138:  case 144:  { return '/^[0-9]{5}$/'; }  case 39:  case 33:  case 97:  case 153:  case 160:  case 168:  case 204:  case 122:  { return '/^[0-9]{4}$/'; } case 140:  { return '/^MD\-[0-9]{4}$/i'; } default: { return ''; } } } public function &setPostalCode(&$postalCode) {        if (isset($postalCode)) { $this->postalCode = &$postalCode; } return $this; } public function isCountryId($locationCountryId) {             if (empty($locationCountryId)) { if (!empty($this->countryId)) { $locationCountryId = $this->countryId; } else { return true; } } return $this->hLocationCountries->selectExists( 'hLocationCountryId', (int) $locationCountryId ); } public function isStateId($locationStateId) {             if (empty($locationStateId)) { if (!empty($this->stateId)) { $locationStateId = $this->stateId; } else { return true; } } if ($this->hLocation->hasStates((int) $this->countryId)) { return $this->hLocationStates->selectExists( 'hLocationStateId', (int) $locationStateId ); } else { return empty($locationStateId); } } public function &setCountryId(&$countryId) {          if (isset($countryId)) { $this->countryId = &$countryId; } return $this; } public function &setStateId(&$stateId) {        if (isset($stateId)) { $this->stateId = &$stateId; } return $this; } } ?>