<?php
  class hLocationService extends hService { private $hLocation; public function hConstructor() { $this->hLocation = $this->library('hLocation'); } public function getState() { if (!isset($_GET['locationStateId'])) { $this->JSON(-5); return; } $locationStateId = (int) $_GET['locationStateId']; $this->JSON( array( 'stateName' => $this->hLocation->getStateName( $locationStateId, 'hLocationStateName' ), 'stateCode' => $this->hLocation->getStateName( $locationStateId, 'hLocationStateCode' ), 'stateLabel' => $this->hLocation->getStateLabel( $this->hLocation->getStateCountry($locationStateId) ) ) ); } public function getStates() {                    $data = array(); if (!empty($_GET['countryId']) && is_numeric($_GET['countryId'])) { $query = $this->hLocationCountries->selectAssociative( array( 'hLocationCountryISO2', 'hLocationCountryISO3', 'hLocationStateLabel' ), (int) $_GET['countryId'] ); $data = array( 'iso2' => $query['hLocationCountryISO2'], 'iso3' => $query['hLocationCountryISO3'], 'stateLabel' => $query['hLocationStateLabel'], 'states' => array() ); $states = $this->hLocationStates->select( array( 'hLocationStateId', 'hLocationStateName' ), array( 'hLocationCountryId' => (int) $_GET['countryId'] ) ); foreach ($states as $state) { array_push( $data['states'], array( $state['hLocationStateId'], $state['hLocationStateName'] ) ); } } $this->JSON($data); } public function getZipCodeCounties() {          if (!isset($_GET['hLocationZipCode'])) { $this->JSON(-5); return; } $this->JSON( $this->hLocation->getZipCodeCounties( (int) $_GET['hLocationZipCode'] ) ); } public function getStateCounties() {         if (!isset($_GET['hLocationStateId'])) { $this->JSON(-5); return; } $this->JSON( $this->hLocation->getStateCounties( (int) $_GET['hLocationStateId'] ) ); } public function getLocationByPostalCode() { } } ?>