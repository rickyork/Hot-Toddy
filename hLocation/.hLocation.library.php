<?php
  class hLocationLibrary extends hPlugin { public function getCountries($prependValue = false, $prependOption = null) {          if ($prependValue) { $this->hDatabase->setPrependResult($prependOption); } return $this->hLocationCountries->selectColumnsAsKeyValue( array( 'hLocationCountryId', 'hLocationCountryName' ), array(), 'ASC', 'hLocationCountryName' ); } public function getCountriesForTemplate($locationCountryId = 0) {          $query = $this->hLocationCountries->select( array( 'hLocationCountryId', 'hLocationCountryName', 'hLocationCountryISO2', ), array(), 'AND', 'hLocationCountryName' ); $results = array(); foreach ($query as $data) { $results['hLocationCountryId'][] = $data['hLocationCountryId']; $results['hLocationCountryName'][] = $data['hLocationCountryName']; $results['hLocationCountryISO2'][] = $data['hLocationCountryISO2']; $results['hLocationCountryIsSelected'][] = ($data['hLocationCountryId'] == $locationCountryId); } return $results; } public function getStates($locationCountryId, $default = true) {             if ($default) { $this->hDatabase->setPrependResult( 'Please select a '.$this->getStateLabel($locationCountryId) ); } return $this->hLocationStates->selectColumnsAsKeyValue( array( 'hLocationStateId', 'hLocationStateName' ), $this->getStateWhere($locationCountryId), 'OR', 'hLocationStateName' ); } public function getStatesForTemplate($locationCountryId, $locationStateId = 0) {              if (!empty($locationCountryId)) { $query = $this->hLocationStates->select( array( 'hLocationStateId', 'hLocationStateCode', 'hLocationStateName' ), $this->getStateWhere($locationCountryId), 'OR', 'hLocationStateName' ); $results = array(); foreach ($query as $data) { $results['hLocationStateId'][] = $data['hLocationStateId']; $results['hLocationStateCode'][] = $data['hLocationStateCode']; $results['hLocationStateName'][] = $data['hLocationStateName']; $results['hLocationStateIsSelected'][] = ($data['hLocationStateId'] == $locationStateId); } return $results; } else { return ''; } } private function getStateWhere($locationCountryId) {            if (strstr($locationCountryId, ',')) { $n = 0; $countries = explode(',', $locationCountryId); $where = array(); foreach ($countries as $country) { $where[] = array('=', (int) $country); $n++; } $where['hLocationCountryId'] = $where; } else { $where['hLocationCountryId'] = (int) $locationCountryId; } return $where; } public function getAddressTemplateByCountry($locationCountryId) {          return $this->hContactAddressTemplates->selectColumn( 'hContactAddressTemplate', array( 'hContactAddressTemplateId' => $this->hLocationCountries->selectColumn( 'hContactAddressTemplateId', (int) $locationCountryId ) ) ); } public function getStateLabel($locationCountryId) {          $label = $this->getLocationField( 'hLocationCountries', 'hLocationStateLabel', 'hLocationCountryId', $locationCountryId ); return empty($label)? 'region' : $label; } public function getStateName($locationStateId = 0, $field = 'hLocationStateCode', $locationCountryId = 223) {         if (!is_numeric($locationStateId)) { $where = array(); $where[($field == 'hLocationStateCode'? 'hLocationStateCode' : 'hLocationStateName')] = $locationStateId; $where['hLocationCountryId'] = (int) $locationCountryId; return $this->hLocationStates->selectColumn( ($field == 'hLocationStateCode'? 'hLocationStateName' : 'hLocationStateCode'), $where ); } return $this->getLocationField( 'hLocationStates', $field, 'hLocationStateId', $locationStateId ); } public function getStateId($locationCountryId, $locationState) {          return $this->hLocationStates->selectColumn( 'hLocationStateId', array( 'hLocationCountryId' => (int) $locationCountryId, 'hLocationStateCode' => $locationState ) ); } public function getStateByName($locationCountryId, $locationState) { return $this->hLocationStates->selectColumn( 'hLocationStateId', array( 'hLocationCountryId' => (int) $locationCountryId, 'hLocationStateName' => $locationState ) ); } public function getStateCountry($locationStateId) {        return $this->getLocationField( 'hLocationStates', 'hLocationCountryId', 'hLocationStateId', $locationStateId ); } public function getCountryName($locationCountryId = 0, $field = 'hLocationCountryName') {            return $this->getLocationField( 'hLocationCountries', $field, 'hLocationCountryId', $locationCountryId ); } public function getCountyName($locationCountyId) {        return $this->getLocationField( 'hLocationCounties', 'hLocationCounty', 'hLocationCountyId', $locationCountyId ); } public function getCountryCodeFromName($locationCountryName, $iso = '2') {         return $this->getLocationField( 'hLocationCountries', 'hLocationCountryISO'.$iso, 'hLocationCountryName', $locationCountryName ); } public function getCountyState($locationCountyId) {        return $this->getLocationField( 'hLocationCounties', 'hLocationStateId', 'hLocationCountyId', $locationCountyId ); } public function getCountryId($locationCountry, $field = 'ISO2') {        $where = array(); switch (strtolower($countryField)) { case 'name': { $field = 'hLocationCountryName'; break; } case 'iso3': { $field = 'hLocationCountryISO3'; break; } case 'iso2': default: { $field = 'hLocationCountryISO2'; } } return $this->hLocationCountries->selectColumn( 'hLocationCountryId', array( 'hLocationCountryISO2' => $locationCountryISO2 ) ); } public function getZipCodeState($locationZipCode) {        return $this->hLocationStates->selectColumn( 'hLocationStateId', array( 'hLocationStateCode' => $this->getLocationField( 'hLocationZipCodes', 'hLocationStateCode', 'hLocationZipCode', $locationZipCode ), 'hLocationCountryId' => 223 ) ); } public function getZipCodeCity($locationZipCode) {        return $this->getLocationField( 'hLocationZipCodes', 'hLocationCity', 'hLocationZipCode', $locationZipCode ); } public function getZipCodeCounty($locationZipCode) {        return $this->hLocationCounties->selectColumn( 'hLocationCountyId', array( 'hLocationCounty' => $this->getLocationField( 'hLocationZipCodes', 'hLocationCounty', 'hLocationZipCode', $locationZipCode ), 'hLocationStateId' => $this->getZipCodeState($locationZipCode) ) ); } public function getZipCodeCounties($locationZipCode) {        return $this->hLocationZipCodes->select( 'hLocationCounty', array( 'hLocationZipCode' => $locationZipCode ) ); } public function getStateCounties($locationStateId) {        return $this->hLocationCounties->select( array( 'hLocationCountyId', 'hLocationCounty' ), array( 'hLocationStateId' => $locationStateId ), 'AND', 'hLocationCounty' ); } public function getLocationField($table, $column, $primaryKey, $primaryKeyValue) {         return $this->hDatabase->selectColumn( $column, $table, array( $primaryKey => $primaryKeyValue ) ); } public function hasStates($locationCountryId) {        return $this->hLocationStates->selectExists( 'hLocationStateId', array( 'hLocationCountryId' => (int) $locationCountryId ) ); } } ?>