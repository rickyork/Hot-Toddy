<?php
  class hMailDatabase extends hPlugin { public function hConstructor() { } private function getWhere($mailTemplateId) {        $where = array(); $where['hMailTemplate'.(is_numeric($mailTemplateId)? 'Id' : 'Name')] = $mailTemplateId; return $where; } public function templateExists($mailTemplateId) {         return $this->hMailTemplates->selectExists('hMailTemplateId', $this->getWhere($mailTemplateId)); } public function getTemplateName($mailTemplateId) {        if (!is_numeric($mailTemplateId)) { return $mailTemplateId; } else { return $this->hMailTemplates->selectColumn('hMailTemplateName', $mailTemplateId); } } public function getTemplate($mailTemplateId) {                                    return $this->hMailTemplates->selectAssociative( array( 'hMailSubject', 'hMailTo', 'hMailCc', 'hMailBcc', 'hMailFrom', 'hMailReplyTo', 'hMailHTML', 'hMailText' ), $this->getWhere($mailTemplateId) ); } public function templateIsOutdated($mailTemplateId, $mtime) {             return ((int) $this->hMailTemplates->selectColumn('hMailJSONLastModified', $this->getWhere($mailTemplateId)) < (int) $mtime); } public function getTemplateId($mailTemplateName) {        return $this->hMailTemplates->selectColumn( 'hMailTemplateId', array( 'hMailTemplateName' => $mailTemplateName ) ); } public function &saveTemplateFromJSON($templateName, $json, $jsonmtime) {        if (!$this->templateExists($templateName) || $this->templateIsOutdated($templateName, $jsonmtime)) { $columns = array( 'hMailTemplateId' => $this->getTemplateId($templateName), 'hMailTemplateName' => $templateName ); $mailTemplateColumns = array( 'hMailTemplateDescription', 'hMailSubject', 'hMailTo', 'hMailCc', 'hMailBcc', 'hMailFrom', 'hMailReplyTo', 'hMailHTML', 'hMailText' ); foreach ($json as $key => $value) { foreach ($mailTemplateColumns as $mailTemplateColumn) { if (strtolower($mailTemplateColumn) == strtolower($key) || strtolower(str_replace('hMail', '', $mailTemplateColumn)) == strtolower($key)) { $columns[$mailTemplateColumn] = $value; } } } foreach ($mailTemplateColumns as $mailTemplateColumn) { if (!isset($columns[$mailTemplateColumn])) { $columns[$mailTemplateColumn] = ''; } } $this->saveTemplate($columns); } return $this; } public function &saveTemplate($columns, $directory = null) {        if (!empty($directory)) { $html = "{$columns['hMailTemplateName']}MailHTML"; $text = "{$columns['hMailTemplateName']}MailText"; $htmlPath = $directory.'/'.$columns['hMailTemplateName'].'.mail.html'; $textPath = $directory.'/'.$columns['hMailTemplateName'].'.mail.txt'; if (file_exists($htmlPath)) { $columns['hMailHTML'] = file_get_contents($this->$html($htmlPath)); } if (file_exists($textPath)) { $columns['hMailText'] = file_get_contents($this->$text($textPath)); } } foreach ($columns as $key => $value) { $columns[$key] = hString::encodeHTML($value); } $columns['hMailJSONLastModified'] = time(); $this->hMailTemplates->save($columns); return $this; } } ?>