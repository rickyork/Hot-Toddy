<?php
  require_once(dirname(__FILE__) . '/mimePart.php'); class hMailMIMELibrary extends hPlugin {                       private $html = '';   private $text = '';   private $output;   private $htmlImages = array();   private $imageTypes = array( 'gif' => 'image/gif', 'jpg' => 'image/jpeg', 'jpeg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'bmp' => 'image/bmp', 'png' => 'image/png', 'tif' => 'image/tiff', 'tiff' => 'image/tiff', 'swf' => 'application/x-shockwave-flash' );   private $buildParams;   private $attachments = array();   private $headers = array();   private $isBuilt = false;   private $returnPath;   private $sendmailPath;    private $Mail_RFC822; private $smtpServer; private $smtpHelo; private $smtpAuthMethod; public function hConstructor() { $this->setup(); } public function freeze() {   return serialize( array( 'html' => $this->html, 'text' => $this->text, 'output' => $this->output, 'htmlImages' => $this->htmlImages, 'imageTypes' => $this->imageTypes, 'buildParams' => $this->buildParams, 'attachments' => $this->attachments, 'headers' => $this->headers, 'isBuilt' => $this->isBuilt, 'returnPath' => $this->returnPath, 'sendmailPath' => $this->sendmailPath, 'smtpServer' => $this->smtpServer, 'smtpHelo' => $this->smtpHelo, 'smtpAuthMethod' => $this->smtpAuthMethod ) ); } public function setReturnPath($returnPath) { $this->returnPath = $returnPath; } public function restore($data) { $data = unserialize($data); $this->html = $data['html']; $this->text = $data['text']; $this->output = $data['output']; $this->htmlImages = $data['htmlImages']; $this->imageTypes = $data['imageTypes']; $this->buildParams = $data['buildParams']; $this->attachments = $data['attachments']; $this->headers = $data['headers']; $this->isBuilt = $data['isBuilt']; $this->returnPath = $data['returnPath']; $this->sendmailPath = $data['sendmailPath']; $this->smtpServer = $data['smtpServer']; $this->smtpHelo = $data['smtpHelo']; $this->smtpAuthMethod = $data['smtpAuthMethod']; $this->setup(); } public function setup() {  $this->buildParams['html_encoding'] = new QPrintEncoding(); $this->buildParams['text_encoding'] = new SevenBitEncoding(); $this->buildParams['html_charset'] = 'ISO-8859-1'; $this->buildParams['text_charset'] = 'ISO-8859-1'; $this->buildParams['head_charset'] = 'ISO-8859-1'; $this->buildParams['text_wrap'] = 998;  $this->headers['MIME-Version'] = '1.0'; $this->headers['X-Mailer'] = 'htmlMimeMail5 <http://www.phpguru.org/>'; }   public function setCRLF($crlf = "\n") { if (!defined('CRLF')) { define('CRLF', $crlf, true); } if (!defined('MAIL_MIMEPART_CRLF')) { define('MAIL_MIMEPART_CRLF', $crlf, true); } }   public function &setSendmailPath($path) { $this->sendmailPath = $path; return $this; }   public function &setTextEncoding(iEncoding $encoding) { $this->buildParams['text_encoding'] = $encoding; return $this; }   public function &setHTMLEncoding(iEncoding $encoding) { $this->buildParams['html_encoding'] = $encoding; return $this; }   public function &setTextCharset($charset = 'ISO-8859-1') { $this->buildParams['text_charset'] = $charset; return $this; }   public function &setHTMLCharset($charset = 'ISO-8859-1') { $this->buildParams['html_charset'] = $charset; return $this; }   public function &setHeadCharset($charset = 'ISO-8859-1') { $this->buildParams['head_charset'] = $charset; return $this; }   public function &setTextWrap($count = 998) { $this->buildParams['text_wrap'] = $count; return $this; }     public function &setHeader($name, $value) { $this->headers[$name] = $value; return $this; }      public function &setPriority($priority = 'normal') { switch (strtolower($priority)) { case 'high': case '1': { $this->headers['X-Priority'] = '1'; $this->headers['X-MSMail-Priority'] = 'High'; break; } case 'normal': case '3': { $this->headers['X-Priority'] = '3'; $this->headers['X-MSMail-Priority'] = 'Normal'; break; } case 'low': case '5': { $this->headers['X-Priority'] = '5'; $this->headers['X-MSMail-Priority'] = 'Low'; break; } } return $this; } public function &setMailer($mailer) { $this->headers['X-Mailer'] .= $mailer; return $this; }   public function &setText($text) { $this->text = $text; return $this; }      function &setHTML($html, $imageFolder = null) { $this->html = $html; if (!empty($imageFolder)) { $this->findHtmlImages($imageFolder); } return $this; }       private function findHtmlImages($dir) { $this->html = str_replace('{$sid}', '', $this->html); $htmlImages = array();  $extensions = array_keys($this->imageTypes); preg_match_all('/src[\=][?:"|\'](.*)[?:"|\']/iUx', $this->html, $matches); foreach ($matches[1] as $path) { if (file_exists($dir.$path)) { $htmlImages[] = $path; $this->html = str_replace($path, basename($path), $this->html); } }  if (!empty($htmlImages)) {  $htmlImages = array_unique($htmlImages); sort($htmlImages); foreach ($htmlImages as $img) { if ($image = file_get_contents($dir.$img)) { $this->addEmbeddedImage( new stringEmbeddedImage( $image, basename($img), $this->imageTypes[preg_replace('#^.*\.(\w{3,4})$#e', 'strtolower("$1")', $img)] ) ); } } } }   public function addEmbeddedImage($embeddedImage) { $embeddedImage->cid = md5(uniqid(time())); $this->htmlImages[] = $embeddedImage; }   public function addAttachment($attachment) { $this->attachments[] = $attachment; }    private function addTextPart(&$message) { $params = array( 'content_type' => 'text/plain', 'encoding' => $this->buildParams['text_encoding']->getType(), 'charset' => $this->buildParams['text_charset'] ); if (!empty($message)) { $message->addSubpart($this->text, $params); } else { $message = new Mail_mimePart($this->text, $params); } }    private function addHtmlPart(&$message) { $params = array( 'content_type' => 'text/html', 'encoding' => $this->buildParams['html_encoding']->getType(), 'charset' => $this->buildParams['html_charset'] ); if (!empty($message)) { $message->addSubpart($this->html, $params); } else { $message = new Mail_mimePart($this->html, $params); } }   private function addMixedPart(&$message) { $params['content_type'] = 'multipart/mixed'; $message = new Mail_mimePart('', $params); }    private function addAlternativePart(&$message) { $params['content_type'] = 'multipart/alternative'; if (!empty($message)) { return $message->addSubpart('', $params); } else { $message = new Mail_mimePart('', $params); } }    private function addRelatedPart(&$message) { $params['content_type'] = 'multipart/related'; if (!empty($message)) { return $message->addSubpart('', $params); } else { $message = new Mail_mimePart('', $params); } }   private function addHtmlImageParts(&$message) { foreach ($this->htmlImages as $value) { $message->addSubpart( $value->data, array( 'content_type' => $value->contentType, 'encoding' => $value->encoding->getType(), 'disposition' => 'inline', 'dfilename' => $value->name, 'cid' => $value->cid ) ); } }   private function addAttachmentParts(&$message) { foreach ($this->attachments as $value) { $message->addSubpart( $value->data, array( 'content_type' => $value->contentType, 'encoding' => $value->encoding->getType(), 'disposition' => 'attachment', 'dfilename' => $value->name ) ); } }  private function build() { if (!empty($this->htmlImages)) { foreach ($this->htmlImages as $value) { $quoted = preg_quote($value->name); $cid = preg_quote($value->cid); $this->html = preg_replace("#src=\"$quoted\"|src='$quoted'#", "src=\"cid:$cid\"", $this->html); $this->html = preg_replace("#background=\"$quoted\"|background='$quoted'#", "background=\"cid:$cid\"", $this->html); } } $message = null; $attachments = !empty($this->attachments); $htmlImages = !empty($this->htmlImages); $html = !empty($this->html); $text = !$html; switch (true) { case $text: { $message = null; if ($attachments) { $this->addMixedPart($message); } $this->addTextPart($message);  $this->addAttachmentParts($message); break; } case $html && !$attachments && !$htmlImages: { $this->addAlternativePart($message); $this->addTextPart($message); $this->addHtmlPart($message); break; } case $html && !$attachments && $htmlImages: { $this->addRelatedPart($message); $alt = $this->addAlternativePart($message); $this->addTextPart($alt); $this->addHtmlPart($alt);  $this->addHtmlImageParts($message); break; } case $html && $attachments && !$htmlImages: { $this->addMixedPart($message); $alt = $this->addAlternativePart($message); $this->addTextPart($alt); $this->addHtmlPart($alt);  $this->addAttachmentParts($message); break; } case $html && $attachments && $htmlImages: { $this->addMixedPart($message); $rel = $this->addRelatedPart($message); $alt = $this->addAlternativePart($rel); $this->addTextPart($alt); $this->addHtmlPart($alt);  $this->addHtmlImageParts($rel);  $this->addAttachmentParts($message); break; } } if (isset($message)) { $output = $message->encode(); $this->output = $output['body']; $this->headers = array_merge($this->headers, $output['headers']); $this->headers['Message-Id'] = sprintf('<%s.%s@%s>', base_convert(time(), 10, 36), base_convert(rand(), 10, 36), $this->hServerHost); $this->isBuilt = true; return true; } else { return false; } }       private function encodeHeader($input, $charset = 'ISO-8859-1') { preg_match_all('/(\w*[\x80-\xFF]+\w*)/', $input, $matches); foreach ($matches[1] as $value) { $replacement = preg_replace('/([\x80-\xFF])/e', '"=" . strtoupper(dechex(ord("\1")))', $value); $input = str_replace($value, '=?' . $charset . '?Q?' . $replacement . '?=', $input); } return $input; } public function setSMTPServer($smtpServer) { $this->smtpServer = $smtpServer; } public function setSMTPHelo($smtpHelo) { $this->smtpHelo = $smtpHelo; } public function setSMTPAuthMethod($smtpAuthMethod) { $this->smtpAuthMethod = $smtpAuthMethod; }      public function send($recipients = array(), $type = 'mail') { if (!defined('CRLF')) { $this->setCRLF(($type == 'mail' OR $type == 'sendmail') ? "\n" : "\r\n"); } if (!$this->isBuilt) { $this->build(); } switch ($type) { case 'mail': { $subject = ''; if (!empty($this->headers['Subject'])) { $subject = $this->encodeHeader($this->headers['Subject'], $this->buildParams['head_charset']); unset($this->headers['Subject']); }  foreach ($this->headers as $name => $value) { $headers[] = $name . ': ' . $this->encodeHeader($value, $this->buildParams['head_charset']); } $to = $this->encodeHeader(implode(', ', $recipients), $this->buildParams['head_charset']); if (!empty($this->returnPath)) { $result = mail($to, $subject, $this->output, implode(CRLF, $headers), '-f' . $this->returnPath); } else { $result = mail($to, $subject, $this->output, implode(CRLF, $headers)); }  if ($subject !== '') { $this->headers['Subject'] = $subject; }  return $result; } case 'sendmail': case 'get': {  foreach ($this->headers as $name => $value) { $headers[] = $name.': '.$this->encodeHeader($value, $this->buildParams['head_charset']); }  $headers[] = 'To: '.$this->encodeHeader(implode(', ', $recipients), $this->buildParams['head_charset']);  $returnPath = ''; if (!empty($this->returnPath)) { $returnPath = '-f' . $this->returnPath; } if ($type == 'sendmail') { $pipe = popen($this->sendmailPath.' '.$returnPath, 'w'); $bytes = fputs($pipe, implode(CRLF, $headers).CRLF.CRLF.$this->output); return pclose($pipe); } else { return implode(CRLF, $headers).CRLF.CRLF.$this->output; } } case 'smtp': {                             $this->setToPHP4(); if (empty($this->smtpServer)) { $this->smtpServer = $this->hMailSMTPServer; } if (empty($this->smtpHelo)) { $this->smtpHelo = $this->hMailSMTPHelo($this->hServerHost); } if (empty($this->smtpAuthMethod)) { $this->smtpAuthMethod = $this->hMailSMTPAuthMethod('PLAIN'); } $parameters = parse_url($this->smtpServer); if ($parameters['scheme'] == 'smtps') { $parameters['scheme'] == 'ssl'; }         if (!class_exists('Net_SMTP')) { require_once 'Net/SMTP.php'; } if (!class_exists('Mail_RFC822')) { require_once('RFC822.php'); } $this->Mail_RFC822 = new Mail_RFC822();  $port = 25; if (!empty($parameters['port'])) {  $port = (int) $parameters['port']; } else if ($parameters['scheme'] == 'ssl') {  $port = 465; }  $host = $parameters['host']; if ($parameters['scheme'] == 'ssl') {  $host = 'ssl://'.$host; } $smtp = new Net_SMTP($host, $port, $this->smtpHelo);  foreach ($recipients as $recipient) { $addresses = $this->Mail_RFC822->parseAddressList($recipient, $this->smtpHelo, null, false); foreach ($addresses as $address) { $smtp_recipients[] = sprintf('%s@%s', $address->mailbox, $address->host); } } unset($addresses);  unset($address);    foreach ($this->headers as $name => $value) { if ($name == 'Cc' || $name == 'Bcc') { $addresses = $this->Mail_RFC822->parseAddressList($value, $this->smtpHelo, null, false); foreach ($addresses as $address) { $smtp_recipients[] = sprintf('%s@%s', $address->mailbox, $address->host); } } if ($name == 'Bcc') { continue; } $headers[] = $name . ': ' . $this->encodeHeader($value, $this->buildParams['head_charset']); }  $headers[] = 'To: ' . $this->encodeHeader(implode(', ', $recipients), $this->buildParams['head_charset']);  $recipients = array_unique($smtp_recipients); $body = $this->output;  if (!empty($this->returnPath)) { $from = $this->returnPath; } else if (!empty($this->headers['From'])) { $from = $this->Mail_RFC822->parseAddressList($this->headers['From']); $from = sprintf('%s@%s', $from[0]->mailbox, $from[0]->host); } else { $from = 'postmaster@' . $this->smtpHelo; } if (pearIsError($error = $smtp->connect())) { $this->warning($error.'.', __FILE__, __LINE__); } if (!empty($parameters['user'])) { if (!empty($parameters['query'])) { $method = strtoupper($parameters['query']); } else { $method = $this->smtpAuthMethod; } $smtp->auth(urldecode($parameters['user']), urldecode($parameters['pass']), $method); } if (pearIsError($smtp->mailFrom($from))) { $this->warning("SMTP Error: Unable to set sender to: {$from}.", __FILE__, __LINE__); } foreach ($recipients as $recipient) { if (pearIsError($res = $smtp->rcptTo($recipient))) { $this->warning("SMTP Error: Unable to add recipient: {$recipient} because ".$res->getMessage().".", __FILE__, __LINE__); } }  if (pearIsError($smtp->data(trim(implode(CRLF, $headers)).CRLF.CRLF.$body))) { $this->warning('SMTP Error: Unable to send data.', __FILE__, __LINE__); } $smtp->disconnect();  $this->setToDefault(); return true; } } }         public function getRFC822($type = 'mail') {  $this->setHeader('Date', date('r')); if (!defined('CRLF')) { $this->setCRLF($type == 'mail' ? "\n" : "\r\n"); } if (!$this->isBuilt) { $this->build(); }  foreach ($this->headers as $name => $value) { $headers[] = ucwords($name).': '.$value; } return implode(CRLF, $headers) . CRLF . CRLF . $this->output; } } class attachment {   public $data;   public $name;   public $contentType;   public $encoding;       public function __construct($data, $name, $contentType, iEncoding $encoding) { $this->data = $data; $this->name = $name; $this->contentType = $contentType; $this->encoding = $encoding; } } class fileAttachment extends attachment {      public function __construct($filename, $contentType = 'application/octet-stream', $encoding = null) { $encoding = is_null($encoding) ? new Base64Encoding() : $encoding; parent::__construct(file_get_contents($filename), basename($filename), $contentType, $encoding); } } class stringAttachment extends attachment {       public function __construct($data, $name = '', $contentType = 'application/octet-stream', $encoding = null) { $encoding = is_null($encoding) ? new Base64Encoding() : $encoding; parent::__construct($data, $name, $contentType, $encoding); } } class fileEmbeddedImage extends fileAttachment { } class stringEmbeddedImage extends stringAttachment { } interface iEncoding { public function encode($input); public function getType(); } class Base64Encoding implements iEncoding {   public function encode($input) { return rtrim(chunk_split(base64_encode($input), 76, defined('MAIL_MIME_PART_CRLF') ? MAIL_MIME_PART_CRLF : "\r\n")); }  public function getType() { return 'base64'; } } class QPrintEncoding implements iEncoding {   public function encode($input) {  $input = preg_replace( '/([^\x20\x21-\x3C\x3E-\x7E\x0A\x0D])/e', 'sprintf("=%02X", ord("\1"))', $input ); $inputLen = strlen($input); $outLines = array(); $output = ''; $lines = preg_split('/\r?\n/', $input);  for ($lineCounter = 0; $lineCounter < count($lines); $lineCounter++) {  if (strlen($lines[$lineCounter]) > $lineMax) {  $outLines[] = substr($lines[$lineCounter], 0, $lineMax - 1).'='; $lines[$lineCounter] = substr($lines[$lineCounter], $lineMax - 1);  $lineCounter--; } else { $outLines[] = $lines[$lineCounter]; } } return implode( "\r\n", preg_replace( '/(\x20+)$/me', 'str_replace(" ", "=20", "\1")', $outLines ) ); }  public function getType() { return 'quoted-printable'; } } class SevenBitEncoding implements iEncoding {   public function encode($input) { return $input; }  public function getType() { return '7bit'; } } class EightBitEncoding implements iEncoding {   public function encode($input) { return $input; }  public function getType() { return '8bit'; } } function pearIsError($data, $code = null) { if (!is_a($data, 'PEAR_Error')) { return false; } if (is_null($code)) { return true; } elseif (is_string($code)) { return $data->getMessage() == $code; } return $data->getCode() == $code; } ?>