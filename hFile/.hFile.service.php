<?php
  class hFileService extends hService { private $methods = array( 'rename' => array( 'authenticate' => 'rw', 'isset' => array( '_GET' => array( 'rename', 'replace' ) ) ), 'delete' => array( 'authenticate' => 'rw' ), 'getDirectory' => array( 'authenticate' => '', 'isset' => array( '_GET' => array('view') ) ), 'newDirectory' => array( 'authenticate' => 'rw', 'isset' => array( '_GET' => array( 'directory', 'replace' ) ) ), 'symbolicLink' => array( 'authenticate' => 'rw', 'isset' => array( '_POST' => array('link') ) ), 'getCopy' => array( 'authenticate' => 'r' ), 'getProperties' => array( 'authenticate' => 'r' ), 'saveProperties' => array( 'authenticate' => 'rw' ), 'upload' => array( 'authenticate' => 'rw', 'isset' => array( '_POST' => array( 'hFinderUploadTitle', 'hFinderUploadDescription' ), '_FILES' => array( 'hFinderUploadFile' ) ) ), 'move' => array( 'authenticate' => 'rw', 'isset' => array( '_GET' => array( 'sourcePath' ) ) ), 'setLabel' => array( 'authenticate' => 'rw' ), 'getLabel' => array( 'authenticate' => 'r' ), 'duplicate' => array( 'authenticate' => 'rw' ), 'touch' => array( 'authenticate' => 'rw', 'isset' => array( '_GET' => array( 'replace', 'file' ) ) ), 'removeFileFromCategory' => array( 'authenticate' => 'rw', 'isset' => array( '_GET' => array( 'file' ) ) ), 'exists' => array( ), 'unzip' => array( 'authenticate' => 'r' ) ); private $hFinder; private $hFile; private $hFileIcon; private $hFileDatabase; private $hUserPermissions; private $hPluginInstall; private $hCategoryDatabase; private $hFileZip; public function hConstructor() {                       if (!isset($_GET['fileActivityId'])) { $this->hFinder = $this->library('hFinder'); $this->hFile = $this->library('hFile'); $this->hUserPermissions = $this->library('hUser/hUserPermissions'); if ($this->inGroup('root')) { if (isset($_GET['hFileSystemAllowDuplicates'])) { $this->hFileSystemAllowDuplicates = (int) $this->get( 'fileSystemAllowDuplicates', false ); } if (isset($_POST['hFileSystemAllowDuplicates'])) { $this->hFileSystemAllowDuplicates = (int) $this->post( 'fileSystemAllowDuplicates', false ); } } hString::safelyDecodeURL($_GET['path']); hString::safelyDecodeURL($_POST['path']); if (array_key_exists($this->hServiceMethod, $this->methods)) { if (($json = $this->hFile->listenerValidation($this->methods, $this->hServiceMethod)) <= 0) { if ($this->hListenerMethod == 'upload') { $this->setUploadResponse($json); return; } else { $this->JSON($json); return; } } } } } public function rename() {                     $this->JSON( (string) $this->hFile->rename( $this->get('path'), $this->get('rename'), $this->get('replace') == 1 ) ); } public function delete() {                $this->JSON( (string) $this->hFile->delete( $this->hFile->filePath ) ); } public function newDirectory() {                    $path = $this->getConcatenatedPath( $this->get('path'), $this->get('directory') ); $replace = $this->get('replace', false); if (!$replace && $this->hFile->exists($path)) { $this->hFile->delete($path); } $json = $this->hFile->newDirectory( $this->get('path'), $this->get('directory') ); $this->JSON((string) $json); } public function symbolicLink() {                      hString::scrubArray($_POST); $this->JSON( (string) $this->hFile->newSymbolicLink( $this->hFile->filePath, $this->post('link') ) ); } public function getCopy() {          $this->HTML( $this->getFileDocument($this->hFile->fileId) ); } public function upload() {                                             $files = array(); if (is_array($_FILES['hFinderUploadFile']['tmp_name'])) { $n = 0; foreach ($_FILES['hFinderUploadFile']['tmp_name'] as $uploadCounter => $tempPath) { $path = $_FILES['hFinderUploadFile']['tmp_name'][$uploadCounter]; $name = $_FILES['hFinderUploadFile']['name'][$uploadCounter]; $mime = $_FILES['hFinderUploadFile']['type'][$uploadCounter]; $size = $_FILES['hFinderUploadFile']['size'][$uploadCounter]; if (!empty($path)) { $extension = $this->getExtension($name); if ($extension == 'hot') { $this->hPluginInstall = $this->library( 'hPlugin/hPluginInstall', array( 'path' => $path, 'name' => $name, 'mime' => $mime ) ); continue; } if (!empty($_POST['hFinderUploadReplaceFile'][$uploadCounter])) { $path = $this->getConcatenatedPath( $this->post('path'), $name ); $this->hFile->query($path); if ($this->hFile->isDirectory) { $this->hFile->delete($path); } } $files[$n] = array( 'hFileTempPath' => $path, 'hFileMIME' => $mime, 'hFileName' => hString::escapeAndEncode($name), 'hFileSize' => $size, 'hFileTitle' => $_POST['hFinderUploadTitle'][$uploadCounter], 'hFileDescription' => $_POST['hFinderUploadDescription'][$uploadCounter], 'hUserPermissions' => true, 'hUserPermissionsWorld' => !empty($_POST['hFinderUploadWorldRead'][$uploadCounter])? 'r' : '', 'hUserPermissionsInherit' => true, 'hFileReplace' => !empty($_POST['hFinderUploadReplaceFile'][$uploadCounter]) ); $n++; } } $this->setUploadResponse( $this->hFile->upload( $this->post('path'), $files ) ); return; } else { $this->setUploadResponse(0); } } private function setUploadResponse($response) {            $sendJSON = $this->get('json'); if ($sendJSON) { $this->JSON( array( 'response' => $response, 'duplicatePath' => $this->hFileDuplicatePath(nil) ) ); } else { $this->HTML( $this->getTemplate( 'Upload', array( 'response' => $response, 'duplicatePath' => $this->hFileDuplicatePath(null) ) ) ); } } public function getProperties() {                     $fileId = $this->hFile->fileId; $permissions = $this->hFiles->getPermissions($fileId); $this->JSON( array( 'hFileTitle' => $this->getFileTitle($fileId), 'hFileDescription' => hString::decodeHTML($this->getFileDescription($fileId)), 'hUserPermissionsWorldRead' => $permissions['hUserPermissionsWorld'] ) ); } public function saveFinderProperties() {        $fileId = (int) $this->post('finderEditFileId'); $files = array(); $file = array( 'hFileId' => $fileId, 'hFileTitle' => $this->post('finderEditFileTitle'), 'hFileDescription' => $this->post('finderEditFileDescription'), 'hUserPermissions' => true, 'hUserPermissionsWorld' => ($this->post('finderEditFileWorldRead') == 1) ); if (isset($_POST['hUserPermissionsGroups'])) { foreach ($file['hUserPermissionsGroups'] as $group) { $file['hUserPermissionsGroups'][$group] = 'r'; } } $temporaryName = $this->fileUpload( 'finderEditFileUpload', 'temporaryName' ); if (!empty($temporaryName)) { $files[0] = array( 'hFileTempPath' => $temporaryName, 'hFileMIME' => $this->fileUpload( 'finderEditFileUpload', 'type' ), 'hFileName' => $this->getFileName($fileId), 'hFileSize' => $this->fileUpload( 'finderEditFileUpload', 'size' ), 'hFileReplace' => 1 ); $files[0] = array_merge($files[0], $file); $response = $this->hFile->upload( urldecode( $this->post('path') ), $files ); } else { $this->hFileDatabase = $this->database('hFile'); $this->hFileDatabase->save($file); $response = 1; } $this->HTML( $this->getTemplate( 'Save Finder Properties', array( 'onSaveProperties' => $this->get( 'onSaveProperties', 'finder.editFile.processResponse' ), 'response' => $response, 'duplicatePath' => $this->hFileDuplicatePath(null) ) ) ); } public function saveProperties() {        $fileId = (int) $this->post('fileId', 0); $files = array(); $file = array( 'hFileTitle' => $this->post('fileTitle'), 'hFileDescription' => $this->post('fileDescription') ); if (isset($_POST['hFileDocument'])) { $file['hFileDocument'] = $_POST['hFileDocument']; } if (isset($_POST['hFileKeywords'])) { $file['hFileKeywords'] = $_POST['hFileKeywords']; } if (isset($_POST['hCategories'])) { $file['hCategories'] = $_POST['hCategories']; } if (isset($_POST['hCategories']) && !is_array($_POST['hCategories'])) { $file['hCategories'] = array(); } if ($this->hEditorPropertiesSetPermissions(false)) { $file['hUserPermissions'] = true; if (isset($_POST['hUserPermissionsGroups'])) { foreach ($_POST['hUserPermissionsGroups'] as $group) { $file['hUserPermissionsGroups'][$group] = 'r'; } } if (isset($_POST['hUserPermissionsWriteGroups'])) { foreach ($_POST['hUserPermissionsWriteGroups'] as $group) { $file['hUserPermissionsGroups'][$group] = 'rw'; } } $file['hUserPermissionsWorld'] = (empty($_POST['hUserPermissionsWorldRead'])? '' : 'r'); } if (!empty($_FILES['hFileUpload']['tmp_name'])) { $files[0] = array( 'hFileTempPath' => $_FILES['hFileUpload']['tmp_name'], 'hFileMIME' => $_FILES['hFileUpload']['type'], 'hFileName' => $this->getFileName($fileId), 'hFileSize' => $_FILES['hFileUpload']['size'], 'hFileReplace' => 1 ); $files[0] = array_merge($files[0], $file); $response = $this->hFile->upload( urldecode($_POST['path']), $files ); } else { $file['hFileId'] = $fileId; $this->hFileDatabase = $this->database('hFile'); $this->hFileDatabase->save($file); $response = 1; } $this->HTML( $this->getTemplate( 'Save Properties', array( 'onSaveProperties' => isset($_GET['onSaveProperties'])? $_GET['onSaveProperties'] : 'finder.editFile.processResponse', 'response' => $response, 'duplicatePath' => $this->hFileDuplicatePath(null) ) ) ); } public function move() {         $sourcePath = urldecode( $this->get('sourcePath') ); hString::safelyDecodeURL($sourcePath); $this->JSON( (string) $this->hFile->move( $this->get('path'), $sourcePath, $this->get('replace', false) == 1 ) ); } public function getFileInformation() {        $fileId = $this->post('fileId'); if (!$fileId) { $this->JSON(-5); return; } hString::scrubArray($_POST); $this->hFileIcon = $this->library('hFile/hFileIcon'); $this->HTML( $this->getTemplate( 'Information', array( 'hFileUnique' => $this->post('fileUnique', nil), 'hFileId' => $fileId, 'hFileIconPath' => $this->hFileIcon->getFileIconPath($fileId), 'hFileTitle' => $this->getFileTitle($fileId), 'hFilePath' => $this->getFilePathByFileId($fileId) ) ) ); } public function getFileInformationJSON() {        $fileId = (int) $this->get('fileId'); if (!$fileId) { $this->JSON(-5); return; } $this->hFileIcon = $this->library('hFile/hFileIcon'); $this->JSON( array( 'hFileId' => $fileId, 'hFileIconPath' => $this->hFileIcon->getFileIconPath($fileId), 'hFilePath' => $this->getFilePathByFileId($fileId), 'hFileTitle' => hString::entitiesToUTF8( $this->getFileTitle($fileId) ) ) ); } public function getFileInformationXML() {        $fileId = (int) $this->get('fileId'); if (!$fileId) { $this->XML(-5); return; } $this->hFileIcon = $this->library('hFile/hFileIcon'); $this->XML( $this->getTemplate( 'Information.xml', array( 'hFileId' => $fileId, 'hFileIconPath' => $this->hFileIcon->getFileIconPath($fileId), 'hFilePath' => $this->getFilePathByFileId($fileId), 'hFileTitle' => hString::entitiesToUTF8( $this->getFileTitle($fileId) ) ) ) ); } public function getFilePath() {         $this->JSON( $this->getFilePathByFileId( (int) $this->get('fileId', 1) ) ); } public function blank() {          $this->HTML(''); } public function setLabel() {          $label = $this->get('fileLabel', 'none'); $this->hFile->setLabel( $this->get('path'), $label ); $this->JSON(1); } public function getLabel() {          $this->JSON( ucwords( $this->hFile->getLabel( $this->get('path') ) ) ); } public function duplicate() {          $this->JSON( $this->hFile->copy( $this->get('path') ) ); } public function touch() {             $path = $this->getConcatenatedPath( $this->get('path'), $this->get('file') ); if (!empty($_GET['replace']) && $this->hFile->exists($path)) { $this->hFile->delete($path); } $this->JSON( $this->hFile->touch($path) ); } public function removeFileFromCategory() {            hString::safelyDecodeURL( $this->get('file') ); $categoryId = $this->getCategoryIdFromPath( $this->get('path') ); $fileId = $this->getFileIdByFilePath( $this->get('file') ); $this->hCategoryDatabase = $this->database('hCategory'); $this->hCategoryDatabase->removeFileFromCategory( $fileId, $categoryId ); $this->JSON(1); } public function exists() {         $this->JSON( $this->hFile->exists( $this->get('path') ) ); } public function unzip() {           $this->hFileZip = $this->library('hFile/hFileZip'); $path = $this->get('path'); $directory = dirname($path); $directoryId = $this->getDirectoryId($directory); if ($this->hDirectories->hasWritePermission($directoryId)) { $this->hFileZip->unzipToHtFSFromHtFS($path); $this->JSON(1); } else { $this->JSON(-1); } } public function activity() {               if (!empty($_GET['fileActivityId'])) { $networkBenchmark = (int) $this->post('networkBenchmark'); $pageLoadBenchmark = (int) $this->post('pageLoadBenchmark'); if ($networkBenchmark < 0) { $networkBenchmark = -$networkBenchmark; } if ($pageLoadBenchmark < 0) { $pageLoadBenchmark = -$pageLoadBenchmark; } $this->hFileActivity->update( array( 'hUserScreenResolution' => $this->post['screenResolution'], 'hUserScreenColorDepth' => (int) $this->post('colorDepth'), 'hFileNetworkBenchmark' => $networkBenchmark, 'hFilePageLoadBenchmark' => $pageLoadBenchmark ), (int) $_GET['fileActivityId'] ); $this->JSON(1); } else { $this->JSON(-5); } } } ?>