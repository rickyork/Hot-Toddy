<?php
  class hFileLibrary extends hPlugin { public $file = array(); private $counter = 0; public $filePath = ''; public $isElevatedUser = false; public $isWebsiteAdministrator = false; public $userAuthenticationWasDone = false; public $isRootUser; public $fileSystemPath = ''; private $hFileDatabase; private $hUserPermissions; private $hSubscription; public $variables = array(  'baseName', 'categoryId', 'directoryId', 'directoryPath', 'exists', 'extension', 'fileExtension', 'fileId', 'fileName', 'filePath', 'fileSystemPath', 'directoryId', 'isCategory', 'isDirectory', 'isElevatedUser', 'isFile', 'isFilePath', 'isDirectory', 'isDirectoryPath', 'isRootUser', 'isServer', 'isServerPath', 'isWebsiteAdministrator', 'parentDirectoryId', 'parentDirectoryPath', 'serverPath', 'userAuthenticationWasDone', 'userIsReadAuthorized', 'userIsWriteAuthorized' ); public $methods = array( 'duplicateFileExists', 'exists', 'hFileExists', 'inFileSystem', 'isRootServerDirectory', 'getAllDirectories', 'getAllDirectoriesInPath', 'getAllFiles', 'getDirectory', 'getDirectoryPseudoMIME', 'getDuplicatePath', 'getFile', 'getFileId', 'getFileProperties', 'getFileResults', 'getName', 'getPathVariables', 'getServerPath', 'getThumbnailPath', 'listenerValidation', 'makeServerPath', 'mergeFileSystemObjects', 'newSymbolicLink', 'setBaseName', 'setCategoryId', 'setDirectoryId', 'setExists', 'setExtension', 'setFileId', 'setFilePath', 'setFileTypes', 'setFilterPaths', 'setInterfacePlugins', 'setIsDirectory', 'setIsElevatedUser', 'setIsFile', 'setIsRootUser', 'setIsServerPath', 'setIsWebsiteAdministrator', 'setIsCategory', 'setLimit', 'setParentDirectoryId', 'setParentDirectoryPath', 'setPath', 'setPermissionsMethodToEverything', 'setPermissionsMethodToWorld', 'setServerPath', 'setUserAuthentication', 'setUserAuthenticationWasDone', 'setUserIsReadAuthorized', 'setUserIsWriteAuthorized', 'sortByCreated', 'sortByFileName', 'sortByIndex', 'sortByLastModified', 'sortByRandom', 'unsetPath', 'query' ); public $filterPaths = array(); public $fileTypes = array(); public function hConstructor() {           $this->fileSystemPath = $this->hFrameworkFileSystemPath; $this->includePlugin('hFile/hFileInterface'); } public function &setPath($path) {                        $this->filePath = $path; return $this; } public function &setFilePath($path) {        $this->filePath = $path; } public function &unsetPath($path) {          if (isset($this->file[$path])) { unset($this->file[$path]); } $this->filePath = nil; return $this; } public function &query($path, $checkExists = false) {                                                                                 $this->setPath($path);   if (!$this->userAuthenticationWasDone) { $this ->setIsRootUser( $this->inGroup('root') ) ->setIsElevatedUser( $this->isInElevated() ) ->setIsWebsiteAdministrator( $this->inGroup('Website Administrators') ) ->setUserAuthenticationWasDone(); } $exists = false; if ($this->isServerPath($path)) { $this ->setIsServerPath() ->setServerPath( $this->getServerFileSystemPath($path) ) ->setIsDirectory( is_dir($this->serverPath) ) ->setIsCategory(false); $exists = file_exists( $this->getServerFileSystemPath($path) ); if ($exists) { if ($this->pathIsFolder) { $this->setDirectoryId( file_exists($this->serverPath)? str_replace('=', '', base64_encode($this->serverPath)).'s' : 0 ) ->setIsFile(false); } else { $this->setDirectoryId( file_exists(dirname($this->serverPath))? str_replace('=', '', base64_encode(dirname($this->serverPath))).'s' : 0 ) ->setFileId( file_exists($this->serverPath)? str_replace('=', '', base64_encode($this->serverPath)).'s' : 0 ) ->setIsFile(); } } } else if ($this->isCategoryPath($path)) { $this->setIsDirectory() ->setIsCategory() ->setIsServerPath(false) ->setIsFile(false); $exists = $this->categoryExists($path); if ($exists) { $this->setCategoryId( $this->getCategoryIdFromPath($path) ); } } else { $directoryId = (int) $this->hDirectories->selectColumn( 'hDirectoryId', array( 'hDirectoryPath' => $path ) ); $this->setIsCategory(false) ->setIsServerPath(false); if (!$directoryId) { $directoryId = (int) $this->getDirectoryId(dirname($path)); if ($directoryId) { $this ->setDirectoryId($directoryId) ->setParentDirectoryId( $this->getDirectoryId( dirname($path) ) ); $fileId = (int) $this->hFiles->selectColumn( 'hFileId', array( 'hDirectoryId' => $directoryId, 'hFileName' => basename($path) ) ); if ($fileId) { $this->setIsFile() ->setIsDirectory(false) ->setFileId($fileId); $exists = true; } else { $this->setIsDirectory() ->setIsFile(false); } } } else { $this ->setIsDirectory() ->setIsFile(false) ->setDirectoryId($directoryId) ->setParentDirectoryId( $this->getDirectoryId( dirname($path) ) ); $exists = true; } } $this ->setExists($exists) ->setBaseName( basename($path) ) ->setParentDirectoryPath( dirname($path) ); if (!$this->isDirectory && strstr($this->baseName, '.')) { $this->setExtension( $this->getExtension($this->baseName) ); } return $this; } private function &setUserAuthenticationWasDone($userAuthenticationWasDone = true) {                   $this->userAuthenticationWasDone = $userAuthenticationWasDone; return $this; } private function &setIsRootUser($isRootUser) {         $this->isRootUser = $isRootUser; return $this; } private function &setIsElevatedUser($isElevatedUser) {         $this->isElevatedUser = $isElevatedUser; return $this; } private function &setIsWebsiteAdministrator($isWebsiteAdministrator) {         $this->isWebsiteAdministrator = $isWebsiteAdministrator; return $this; } private function &setIsServerPath($isServerPath = true) {          $this->isServer = $isServerPath; $this->isServerPath = $isServerPath; return $this; } private function &setServerPath($serverPath) {         $this->serverPath = $serverPath; return $this; } private function &setIsCategory($isCategory = true) {         $this->isCategory = $isCategory; return $this; } private function &setCategoryId($categoryId) {         $this->categoryId = $categoryId; return $this; } private function &setIsDirectory($isDirectory = true) {         $this->isDirectory = $isDirectory; $this->isDirectoryPath = $isDirectory; return $this; } private function &setDirectoryId($directoryId) {         $this->directoryId = $directoryId; return $this; } private function &setExists($exists) {         $this->exists = $exists; return $this; } private function &setParentDirectoryPath($parentDirectoryPath) {         $this->parentDirectoryPath = $parentDirectoryPath; $this->directoryPath = $parentDirectoryPath; return $this; } private function &setParentDirectoryId($parentDirectoryId) {         $this->parentDirectoryId = (int) $parentDirectoryId; return $this; } private function &setExtension($extension) {         $this->extension = $extension; $this->fileExtension = $extension; return $this; } private function &setBaseName($fileName) {         $this->fileName = $fileName; $this->baseName = $fileName; return $this; } private function &setIsFile($isFile = true) {         $this->isFile = $isFile; $this->isFilePath = $isFile; return $this; } private function &setFileId($fileId) {         $this->fileId = $fileId; return $this; } private function &setUserIsReadAuthorized($userIsReadAuthorized = true) {         $this->userIsReadAuthorized = $userIsReadAuthorized; return $this; } private function &setUserIsWriteAuthorized($userIsWriteAuthorized = true) {         $this->userIsWriteAuthorized = $userIsWriteAuthorized; return $this; } public function &setUserAuthentication() {          if ($this->exists) { if ($this->isServerPath) { if ($this->isDocumentRootPath($this->serverPath)) { $this->setUserIsReadAuthorized()->setUserIsWriteAuthorized(false); } else { $this ->setUserIsReadAuthorized($this->isRootUser) ->setUserIsWriteAuthorized($this->isRootUser); } } else if ($this->isCategory) { $this ->setUserIsReadAuthorized( $this->hCategories->hasReadPermission($this->categoryId) ) ->setUserIsWriteAuthorized( $this->hCategories->hasWritePermission($this->categoryId) ); } else { if ($this->isDirectory) { $this ->setUserIsReadAuthorized( $this->hDirectories->hasReadPermission($this->directoryId) ) ->setUserIsWriteAuthorized( $this->hDirectories->hasWritePermission($this->directoryId) ); } else { $this ->setUserIsReadAuthorized( $this->hFiles->hasReadPermission($this->fileId) ) ->setUserIsWriteAuthorized( $this->hFiles->hasWritePermission($this->fileId) ); } } } return $this; } public function exists($path = nil) {         if (empty($path)) { $path = $this->filePath; } else { $presentPath = $this->filePath; } $this->query($path, true); $exists = $this->exists; if (isset($presentPath) && !empty($presentPath)) { $this->filePath = $presentPath; } return $exists; } public function hFileExists($path = nil) {         return $this->exists($path); } public function __set($key, $value) {         if (in_array($key, $this->variables)) { if (!isset($this->file[$this->filePath])) { $this->file[$this->filePath] = array(); } if (!isset($this->file[$this->filePath]['filePath'])) { $this->file[$this->filePath]['filePath'] = $this->filePath; } $this->file[$this->filePath][$key] = $value; } else { parent::__set($key, $value); } } public function &__get($key) {         if (in_array($key, $this->variables)) { if (strstr($key, 'hUser') || stristr($key, 'user')) { $this->setUserAuthentication(); } $rtn = ''; if (isset($this->file[$this->filePath][$key])) { $rtn = $this->file[$this->filePath][$key]; } return $rtn; } else { return parent::__get($key); } } public function getPathVariables() {        return $this->file[$this->filePath]; } public function getDirectory($path, $checkPermissions = true) {            if (empty($this->hFileDatabase)) { $this->hFileDatabase = $this->library('hFile/hFileInterface/hFileInterfaceDatabase'); } $directoryId = $this->getDirectoryId($path); if ($directoryId > 0) { $this->setPath($path); $this->setIsDirectory(); $this->setDirectoryId($directoryId); return $this->hFileDatabase->getFiles( false, $checkPermissions ); } else { $this->warning( "Directory '{$path}' does not exist.", __FILE__, __LINE__ ); } return array(); } public function __call($method, $arguments) {                      $this->counter++; if (empty($this->hFileInterfacePlugins) || !is_array($this->hFileInterfacePlugins)) { $this->setInterfacePlugins(); } foreach ($this->hFileInterfacePlugins as $i => $plugin) { if (method_exists($plugin, 'getMethods')) { if (!$plugin->methodsWereAdded) { $plugin->methodsWereAdded = true; $pluginMethods = $plugin->getMethods(); foreach ($pluginMethods as $pluginMethod) { if (!in_array($pluginMethod, $this->methods)) { array_push( $this->methods, $pluginMethod ); } } } } else { $this->warning( "Unable to use file interface '".get_class($plugin)."', the object does not have a ". "method called getMethods() which supplies the names of all methods defined within it.  ", __FILE__, __LINE__ ); unset($this->hFileInterfacePlugins[$i]); } } if (!in_array($method, $this->methods, true)) { return parent::__call($method, $arguments); } else { $pathReceptical = $this->filePath; if (empty($arguments[0])) {    $arguments[0] = $this->filePath; } $this->filePath = $arguments[0]; if (!empty($this->filePath)) { $this->query($this->filePath); switch ($method) { case 'getServerPath': {        $rtn = $this->serverPath; break; } case 'getName': {        $rtn = $this->fileName; break; } case 'isRootServerDirectory': {                switch ($this->filePath) { case '/System/Server': case '/System/Documents': case '/System/Framework': case '/Template/Pictures': case $this->hFrameworkLibraryRoot: { $rtn = true; break; } default: { $rtn = false; break; } } break; } case 'getAllDirectories': {         if (!$this->isServer) { $directories = $this->getDirectories($this->filePath); if ($this->hFileMergeFileSystems(false) && ($this->isRootUser || $this->hFileDisablePermissionsCheck(false) || $this->isFrameworkRootPath($this->serverPath))) { $this->mergeFileSystemObjects( '/System/Framework'.$this->filePath, $directories, 'getDirectories' ); } } else if ($this->isRootUser || $this->isDocumentRootPath($this->serverPath)) { $directories = $this->getDirectories($this->filePath); } if (is_array($directories)) { ksort($directories, SORT_STRING); } $rtn = $directories; break; } case 'getAllDirectoriesInPath': {        $path = ($this->filePath === '/'? '' : $this->filePath);  $query = $this->hDirectories->select( array( 'hDirectoryId', 'hDirectoryPath' ), array( 'hDirectoryPath' => array( array('=', $path), array('LIKE', $path.'/%') ) ), 'OR', array( 'DESC', 'hDirectoryPath' ) ); $directories = array(); foreach ($query as $data) { $name = basename($data['hDirectoryPath']); $directories[$data['hDirectoryPath']] = array( 'hFileName' => $name, 'hFilePath' => $data['hDirectoryPath'], 'hFileIsServer' => false, 'hDirectoryId' => $data['hDirectoryId'] ); } $rtn = $directories; break; } case 'getFileProperties': {                                                     $rtn = array( 'hFileId' => $this->fileId, 'hFileName' => $this->fileName, 'hFilePath' => $this->filePath, 'hFileIsServer' => true, 'hDirectoryId' => $this->directoryId, 'hFileSize' => $this->getSize(), 'hFileCreated' => $this->getCreated(), 'hFileLastModified' => $this->getLastModified(), 'hFileDescription' => $this->getDescription(), 'hFileTitle' => $this->getTitle(), 'hFileMIME' => $this->getMIMEType(), 'hCategoryFileSortIndex' => 0 ); break; } case 'getFile': {        if ($this->isServer) {  if (filesize($this->serverPath) <= $this->hFileSizeLimit(2097152)) { $rtn = file_get_contents($this->serverPath); } else {  } } break; } case 'getAllFiles': {         if (!$this->isServer) { $files = $this->getFiles($this->filePath); if ($this->hFileMergeFileSystems(false) && ($this->isRootUser || $this->isFrameworkRootPath($this->serverPath))) { $this->mergeFileSystemObjects('/System/Framework'.$this->filePath, $files, 'getFiles'); } } else if ($this->isRootUser || $this->isFrameworkRootPath($this->serverPath)) { $files = $this->getFiles($this->filePath); } else if ($this->isRootUser || $this->isDocumentRootPath($this->serverPath)) { $files = $this->getFiles($this->filePath); } if (is_array($files) && !$this->hFileOrderBy) { ksort($files); } $rtn = $files; break; } case 'newSymbolicLink': {        if ($this->exists) { if ($this->isServer) { $rtn = 1; } else { if ($this->isDirectory) { $rtn = 1; } else { $fileId = $this->hDatabase->insert( array( 'hFileId' => nil, 'hDirectoryId' => $this->directoryId, 0, $arguments[2], time(), time() ), 'hFiles' ); $this->hFileSymbolicLinkTo($arguments[1], $fileId, true); $rtn = $fileId; } } } else { $rtn = -3; } $rtn = 0; break; } default: { unset($arguments[0]); foreach ($this->hFileInterfacePlugins as $plugin) { if (method_exists($plugin, 'shouldBeCalled')) { if ($plugin->shouldBeCalled()) { $plugin->filterPaths = $this->filterPaths; $plugin->fileTypes = $this->fileTypes; if (method_exists($plugin, $method)) { $rtn = call_user_func_array( array( $plugin, $method ), $arguments ); } } } } } } $this->filePath = $pathReceptical; return isset($rtn)? $rtn : nil; } else { $this->warning('The path is empty.', __FILE__, __LINE__); } } } public function &setInterfacePlugins() {             $this->hFileInterfacePlugins = array( $this->library('hFile/hFileInterface/hFileInterfaceUnix'), $this->library('hFile/hFileInterface/hFileInterfaceCategory'), $this->library('hFile/hFileInterface/hFileInterfaceDatabase') ); return $this; } public function &setFilterPaths(array $paths) {          $this->filterPaths = $paths; return $this; } public function &setFileTypes(array $fileTypes) {          $this->fileTypes = $fileTypes; return $this; } public function &setPermissionsMethodToEverything() {           $this->hFilePermissionsMethod = 'Everything'; return $this; } public function &setPermissionsMethodToWorld() {           $this->hFilePermissionsMethod = 'World'; return $this; } public function &sortByCreated($desc = false) {          $this->hFileOrderBy = 'hFileCreated'; $this->hFileOrderByDirection = $desc? 'DESC' : 'ASC'; return $this; } public function &sortByLastModified($desc = false) {           $this->hFileOrderBy = 'hFileLastModified'; $this->hFileOrderByDirection = $desc? 'DESC' : 'ASC'; return $this; } public function &sortByIndex($desc = false) {            $this->hFileOrderBy = 'hFileSortIndex'; $this->hFileOrderByDirection = $desc? 'DESC' : 'ASC'; return $this; } public function &sortByFileName($desc = false) {           $this->hFileOrderBy = 'hFileName'; $this->hFileOrderByDirection = $desc? 'DESC' : 'ASC'; return $this; } public function &sortByRandom() {          $this->hFileOrderBy = 'RAND()'; return $this; } public function &setLimit($limit) {            $this->hFileLimit($limit); return $this; } public function &mergeFileSystemObjects($path, &$objects, $method) {                                                                      $objects = array_merge($this->$method($path), $objects); return $this; } public function duplicateFileExists($md5Checksum) {          if (empty($md5Checksum)) { return false; } return $this->hFileProperties->selectExists( 'hFileId', array( 'hFileMD5Checksum' => $md5Checksum ) ); } public function getDuplicatePath($md5Checksum) {           return $this->getFilePathByFileId( $this->hFileProperties->selectColumn( 'hFileId', array( 'hFileMD5Checksum' => $md5Checksum ) ) ); } public function getFileId($directoryId, $fileName) {         return $this->hFiles->selectColumn( 'hFileId', array( 'hFileName' => $fileName, 'hDirectoryId' => (int) $directoryId ) ); } public function &makeServerPath($path) {         $this->console("Making server path: '{$path}'"); if (!file_exists($path)) { $directories = explode('/', $path); $currentPath = ''; for ($i = 0, $d = count($directories); $i < $d; $i++) { if (empty($directories[$i])) { $currentPath = '/'; continue; } else { if (substr($currentPath, -1, 1) != '/') { $currentPath .= '/'; } $currentPath .= $directories[$i]; } if (!empty($openBaseDir) && $this->beginsPath($openBaseDir, $currentPath) && $openBaseDir != $currentPath) { continue; } if (!file_exists($currentPath)) { $this->mkdir($currentPath); } } } return $this; } public function getDirectoryPseudoMIME($path, $fileIconId = 0) {                                                                                                                       if (!empty($fileIconId)) { return $this->hFileIcons->selectColumn('hFileMIME', $fileIconId); } return 'directory'; } public function inFileSystem($fileId) {          return file_exists($this->hFrameworkFileSystemPath.$this->getFilePathByFileId($fileId)); } public function listenerValidation($methods, $method) {             $response = 1; hString::scrubArray($_GET); if (empty($_GET['path'])) { if (empty($_POST['path'])) { $response = -5; } else { $this->query($_POST['path']); } } else { $this->query($_GET['path']); } if (!$this->isLoggedIn()) { $response = -6; } if ($response > 0) { switch (true) { case (!$this->exists()): { $response = -404; break; } case (isset($methods[$method]['authenticate']) && $methods[$method]['authenticate'] == 'r' && !$this->userIsReadAuthorized): { $response = -1; break; } case (isset($methods[$method]['authenticate']) && $methods[$method]['authenticate'] == 'rw' && !$this->userIsWriteAuthorized): { $response = -1; break; } case !isset($methods[$method]['authenticate']) && !$this->userIsWriteAuthorized: { $response = -1; break; } case isset($methods[$method]['isset']): { $variables = array('_GET', '_POST', '_COOKIE'); foreach ($variables as $variable) { if (isset($methods[$method]['isset'][$variable]) && is_array($methods[$method]['isset'][$variable])) { foreach ($methods[$method]['isset'][$variable] as $key) { switch ($variable) { case '_GET': { if (!isset($_GET[$key])) { $response = -5; } break; } case '_POST': { if (!isset($_POST[$key])) { $response = -5; } break; } case '_COOKIE': { if (!isset($_COOKIE[$key])) { $response = -5; } break; } case '_FILES': { if (!isset($_FILES[$key])) { $response = -5; } break; } default: { $this->warning("Unsupported superglobal '{$variable}'.", __FILE__, __LINE__); } } } } } } } } return $response; } public function getThumbnailPath($path) {         $filename = basename($path); $directory = dirname($path); $filenameBits = explode('.', $filename); $extension = array_pop($filenameBits); array_push($filenameBits, 'thumbnail', 'png'); return $this->fileSystemPath.$directory.'/'.implode('.', $filenameBits); } public function getFileResults($query) {                                 $files = array(); $i = 0; foreach ($query as $data) { $fileName = $data['hFileName']; if (empty($fileName)) { $data[$fileName] = 'No Name '.time().' '.$i; $this->hFiles->update( array( 'hFileName' => $fileName, 'hFileLastModified' => time() ), (int) $data['hFileId'] ); $i++; } if (empty($data['hFileMIME'])) { $data['hFileMIME'] = 'text/html'; } $data['hCategoryFileSortIndex'] = !empty($data['hCategoryFileSortIndex'])? $data['hCategoryFileSortIndex'] : 0; $extension = $this->getExtension($data['hFileName']); $allowed = !in_array($data['hFilePath'], $this->filterPaths) && ( !count($this->fileTypes) || ( count($this->fileTypes) && (in_array($extension, $this->fileTypes) || in_array($data['hFileMIME'], $this->fileTypes)) ) ); if ($allowed) { $files[$fileName] = $data; if (!isset($files[$fileName]['hFileInterfaceObjectId']) && !isset($data['hFileInterfaceObjectId'])) { $files[$fileName]['hFileInterfaceObjectId'] = $data['hFileId']; } } } return $files; } } ?>