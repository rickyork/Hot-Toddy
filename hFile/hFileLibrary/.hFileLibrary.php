<?php
  class hFileLibrary extends hPlugin { private $hFileJSCompress; private $hFileCSSCompress;                             public function hConstructor() {   if ($this->hFrameworkFilePath) { $path = $this->getIncludePath($this->hServerDocumentRoot.$this->hFileWildcardPath); if ($this->beginsPath($path, $this->hServerDocumentRoot)) { $this->hFileSystemPath = $this->hServerDocumentRoot; } else { $this->hFileSystemPath = $this->hFrameworkPath; }   $this->hFilePath = $this->getEndOfPath($path, $this->hFileSystemPath); $name = basename($this->hFilePath); if (strstr($this->hFilePath, '.svn')) { $this->fatal( 'Attempted web access to '.$path.'. SVN files cannot be directly accessed from a browser', __FILE__, __LINE__ ); }  if (strstr($name, '.mail.json')) { $this->fatal( 'Attempted web access to '.$path.'. Mail configuration files cannot be directly accessed through a browser.', __FILE__, __LINE__ ); } if (substr($name, -4) == '.sql') { $this->fatal( 'Framework SQL documents cannot be directly accessed through a browser.', __FILE__, __LINE__ ); } } else {  $this->hFileSystemPath = $this->hFrameworkLibraryPath; $this->hFilePath = $this->getEndOfPath( $this->hFileWildcardPath, $this->hFrameworkLibraryRoot ); } if (file_exists($this->hFileSystemPath)) {  $extension = $this->getExtension($this->hFilePath);     switch ($extension) { case 'cgi': case 'pl': case 'cfc': case 'cfm': case 'py': case 'asp': case 'lasso': case 'afp': case 'rb': {  $this->notice( 'Document: '.$this->hFilePath.' is restricted.', __FILE__, __LINE__ ); break; } case 'php': {  if (!$this->hFrameworkFilePath) {  include $this->hFileSystemPath.$this->hFilePath;  exit; } else {  $this->notice( 'Framework plugin: '.$this->hFilePath.' cannot be accessed directly.', __FILE__, __LINE__ ); exit; } } } $path = $this->hFileSystemPath.$this->hFilePath; if (file_exists($path)) {  $hFileMIME = $this->hFileIcons->selectColumn( 'hFileMIME', array( 'hFileExtension' => $extension ) ); if (empty($hFileMIME)) {   $hFileMIME = $this->getMIMEType($path); }     if (isset($_GET['hFileLastModified'])) { $this->hFileDisableCache = false; $this->hFileEnableCache = true; $this->hFileCacheExpires = strtotime('+10 Years'); }  $this->hFileMIME = $hFileMIME;  $this->hFileSize = filesize($path);  $this->hFileDownload = false;  $this->hFileSystemDocument = true;  $this->hFileLastModified = filemtime($path);  $this->hTemplatePath = '';    $this->hFileName = basename($path);   switch ($extension) { case 'js': {  $this->hServerOutputBuffer = true;    $this->hFrameworkOverrideDocumentOutput = true; $this->hFileJSCompress = $this->library('hFile/hFileJSCompress'); $this->hFileDocument = $this->hFileJSCompress->get($this->hFileSystemPath.$this->hFilePath); break; } case 'css': {  $this->hServerOutputBuffer = true; $this->hFrameworkOverrideDocumentOutput = true; $this->hFileCSSCompress = $this->library('hFile/hFileCSSCompress');  $this->hFileDocument = $this->hFileCSSCompress->get($this->hFileSystemPath.$this->hFilePath); break; } } } else { $this->warning( "Failed to include library file: Path, {$path}, does not exist.", __FILE__, __LINE__ ); } } else { $this->warning( 'File path: '.$this->hFileSystemPath.' does not exist.', __FILE__, __LINE__ ); } }   public function CSS(&$file) { if (!isset($_GET['compression'])) {  $file = preg_replace('/\s{2,}|\n|\r/', '', $file); } if (!isset($_GET['comments'])) {  $file = preg_replace('/\/\*.*\*\//Ums', '', $file); }  $file = $this->parseDocument($file); } } ?>