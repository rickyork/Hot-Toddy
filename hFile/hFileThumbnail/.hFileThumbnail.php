<?php
  class hFileThumbnail extends hPlugin { protected $hFinder; protected $hFile; private $hImage; public function hConstructor() { hString::scrubArray($_GET); if (isset($_GET['path'])) { $this->hFinder = $this->library('hFinder'); $this->hFile = $this->library('hFile');   $path = urldecode($_GET['path']); $path = hString::safelyDecodeURLPath($path); $path = mb_convert_encoding($path, 'UTF-8', 'HTML-ENTITIES'); $path = mb_convert_encoding($path, 'UTF-8', 'HTML-ENTITIES'); $path = htmlspecialchars($path, ENT_QUOTES); $path = mb_convert_encoding($path, 'HTML-ENTITIES', 'UTF-8');   $this->hFile->query($path);        $this->hFileSystemDocument = true;  $this->hTemplatePath = '';  if ($this->hFile->exists()) {            if ($this->hFile->isServer && $this->hFile->isRootUser || $this->hFile->userIsReadAuthorized) {  $fileName = explode('.', $this->hFile->fileName);  $this->hFileSystemImageExtension = array_pop($fileName);  $this->hFileSystemImagePath = $this->hFile->isServer? $this->hFile->serverPath : $this->hFileSystemPath.$this->hFile->filePath;  $imageExists = file_exists($this->hFileSystemImagePath); if ($imageExists) {          $this->hFileSystemThumbnailPath = $this->hFileSystemPath. $this->hFile->getConcatenatedPath( $this->hFile->parentDirectoryPath,   implode('.', $fileName).'.'.(isset($_GET['hMovie'])? '' : 'thumbnail.').'png' );    $this->hFile->makeServerPath(dirname($this->hFileSystemThumbnailPath));  $thumbExists = file_exists($this->hFileSystemThumbnailPath);      if (!$thumbExists || $thumbExists && @filemtime($this->hFileSystemImagePath) > @filemtime($this->hFileSystemThumbnailPath)) { $this->generateThumbnail(); }  $this->hFileMIME = 'image/png';  $this->hDirectoryId = $this->hFile->directoryId;  $this->hFileName = $this->hFile->fileName; } else {  $this->noImage();  $this->warning( "Thumbnail creation failed: The path {$this->hFileSystemImagePath} does not exist ". "in the server's file system.", __FILE__, __LINE__ ); } } else {  $this->notAuthorized(); } } else {   $this->noImage();  $this->warning( "Thumbnail creation failed: The path {$path} does not exist in the framework's file system.", __FILE__, __LINE__ ); } } else {  $this->notice( "Unable to generate a thumbnail, no path was provided.", __FILE__, __LINE__ ); } } private function noImage() {  header('Location: /hFile/hFileThumbnail/Pictures/No Image.png'); exit; } private function generateThumbnail() {   $this->hImage = $this->library('hImage'); $this->hImage->resizeImage( $this->hFileSystemImagePath, $this->hFileSystemThumbnailPath, 110, 110 ); } } ?>