<?php
  class hFileZipLibrary extends hPlugin { private $hFileUtilities; private $hFile; private $temporary; private $unzip; public function hConstructor() { $this->unzip = $this->hFrameworkPathToUnzip('/usr/bin/unzip'); $this->temporary = $this->hFrameworkTemporaryPath;    if (!file_exists($this->temporary)) { if (is_writable($this->hFrameworkPath)) { $this->mkdir($this->temporary); $this->console("Creating temporary directory, {$temporary}"); $this->chmod($this->temporary, 775); $this->console("Chmod of temporary directory set to 775."); } else { $this->warning( "Plugin installation failed, unable to make a temporary folder in: ". "'{$this->hFrameworkPath}'.", __FILE__, __LINE__ ); } } if (!is_writable($this->temporary)) { $this->warning( "Plugin installation failed, temporary folder '{$this->temporary}' ". "is not writable.", __FILE__, __LINE__ ); } $this->hFile = $this->library('hFile'); } public function unzip($path, $name) { if (is_executable($this->unzip)) { $command = '-o '.escapeshellarg($path).' -d '.escapeshellarg($this->temporary.'/'.$name); $this->console("Unzipping '{$path}' with command: unzip {$command}"); $this->pipeCommand($this->unzip, $command); } else { $this->warning( "Unzip failed '{$this->unzip}' does not appear to be executable.", __FILE__, __LINE__ ); } } public function unzipToHtFSFromHtFS($path) {   $this->unzipToHtFS( $path, $this->hFileSystemPath.$path ); } public function unzipToHtFS($destinationHtFSFolder, $sourceZipFile) { $this->hFileSystemAllowDuplicates = true; $source = $sourceZipFile; $destination = $destinationHtFSFolder; $mime = $this->getMIMEType($source); if ($mime == 'application/zip') { $this->console("Unzipping to HtFS '{$source}'");    $name = basename($source); $bits = explode('.', $name); array_pop($bits); $name = implode('.', $bits); $unzippedFolder = $this->temporary.'/'.$name; if (file_exists($unzippedFolder)) { $this->rm($unzippedFolder); }  $this->unzip($source, $name); $folder = dirname($destination); if (file_exists($unzippedFolder)) {    $this->hFileUtilities = $this->library( 'hFile/hFileUtilities', array( 'excludeFolders' => array(), 'includeFileTypes' => array(), 'autoScanEnabled' => false, 'scanTextFiles' => false ) );   $this->hFileUtilities->scanFiles($unzippedFolder); $folders = $this->hFileUtilities->getFolders(); $files = $this->hFileUtilities->getFiles(); $destinationPath = $this->getConcatenatedPath($folder, $name); if ($this->hFile->exists($destinationPath)) { $this->hFile->delete($destinationPath); } $this->console("Creating new folder '{$name}' in path '{$folder}'"); $this->hFile->makePath( $this->getConcatenatedPath($folder, $name) ); if (is_array($folders)) { foreach ($folders as $folder) { $currentPath = $this->getEndOfPath( $folder, $unzippedFolder ); $importPath = $this->getConcatenatedPath( $destinationPath, $currentPath ); $this->console("Importing from zip archive '{$importPath}'"); $this->hFile->makePath($importPath); } if (is_array($files)) { foreach ($files as $file) { $currentPath = $this->getEndOfPath( $file, $unzippedFolder ); $importPath = $this->getConcatenatedPath( $destinationPath, $currentPath ); $this->console("Importing from zip archive '{$importPath}'"); $upload = $this->hFile->import( dirname($importPath), array( array( 'hFileTempPath' => $file, 'hFileMIME' => $this->getMIMEType($file), 'hFileName' => hString::escapeAndEncode(basename($file)), 'hFileSize' => filesize($file), 'hFileTitle' => '', 'hFileDescription' => '', 'hUserPermissions' => true, 'hUserPermissionsWorld' => '', 'hUserPermissionsInherit' => true, 'hFileReplace' => false ) ) ); } }  $this->rm($unzippedFolder); } else { $this->warning( "The folder hierarchy of the unzipped folder was not successfully retrieved ". "from '{$unzippedFolder}'.", __FILE__, __LINE__ ); } } else { $this->warning( "The unzip operation failed, the unzipped folder structure does not exist at ". "'{$unzippedFolder}'. ", __FILE__, __LINE__ ); } } else { $this->warning( "The path provided '{$path}' is not a ZIP file.", __FILE__, __LINE__ ); } } } ?>