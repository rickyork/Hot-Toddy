<?php
  class hFileDocument extends hPlugin { private $hFileIcon; private $touchScrollIncluded = false; public function hConstructor() {           $this->hFileIcon = $this->library('hFile/hFileIcon'); } public function getFileMetaDataForTemplate(array $results, $encoding = true) {                                                   if (!isset($results['hFileId']) && isset($results['hFileId'])) { $results['hFileId'] = $results['hFileId']; } if (!isset($results['hListFileId']) && isset($results['hListFileId'])) { $results['hListFileId'] = $results['hListFileId']; }  if (isset($results['hFileId']) && is_array($results['hFileId'])) { foreach ($results['hFileId'] as $i => $fileId) { if (!isset($results['hFilePath'][$i])) { $results['hFilePath'][$i] = $this->getFilePathByFileId($fileId); } $results['hFileIconPath'][$i] = $this->hFileIcon->getFileIconPath($fileId, nil, nil, $this->hFileIconResolution('32x32')); if (isset($results['hFileDescription'][$i]) && $encoding) { $results['hFileDescription'][$i] = hString::decodeHTML($results['hFileDescription'][$i]); } if (isset($results['hFileDocument'][$i]) && $encoding) { $results['hFileDocument'][$i] = hString::decodeHTML($results['hFileDocument'][$i]); } if (isset($results['hListFileId'][$i])) { $hFileSideboxTitle = $this->hFileSideboxTitle($results['hFileTitle'][$i], $fileId); if (empty($hFileSideboxTitle) && isset($results['hFileName'][$i])) { $hFileSideboxTitle = $results['hFileName'][$i]; } $results['hFileSideboxTitle'][$i] = $hFileSideboxTitle; } else { $hFileHeadingTitle = $this->hFileHeadingTitle($results['hFileTitle'][$i], $fileId); if (empty($hFileHeadingTitle) && isset($results['hFileName'][$i])) { $hFileHeadingTitle = $results['hFileName'][$i]; } $results['hFileHeadingTitle'][$i] = $hFileHeadingTitle; } } } return $results; } public function getFileDocument($fileId = 0) {             if (!is_numeric(($fileId))) { $fileId = $this->getFileIdByFilePath($fileId); } $hFileDocument = $this->hFileDocuments->selectColumn( 'hFileDocument', array( 'hFileId' => empty($fileId)? (int) $this->hFileId : (int) $fileId ) ); return $this->expandDocumentIds(hString::decodeHTML($hFileDocument)); } public function getDocument() {            return $this->hFileDocument; } public function getFileTitle($fileId) {        return $this->hFileDocuments->selectColumn( 'hFileTitle', (int) $fileId ); } public function getFileDescription($fileId) {        return hString::decodeHTML( $this->hFileDocuments->selectColumn( 'hFileDescription', (int) $fileId ) ); } public function getFileParentId($fileId) {        return (int) $this->hFiles->selectColumn( 'hFileParentId', (int) $fileId ); } public function getFileOwner($fileId) {        return (int) $this->hFiles->selectColumn( 'hUserId', (int) $fileId ); } public function getFileKeywords($fileId) {        return $this->hFileDocuments->selectColumn( 'hFileKeywords', (int) $fileId ); } public function getFileInformation($fileId) {                           return $this->hDatabase->selectAssociative( array( 'hFilePath', 'hFiles' => array( 'hFileId', 'hFileName', 'hFileParentId' ), 'hFileDocuments' => array( 'hFileTitle' ) ), array( 'hFiles', 'hFileDocuments' ), array( 'hFiles.hFileId' => array( array('=', 'hFileDocuments.hFileId'), array('=', (int) $fileId) ) ) ); } public function getFilePlugin($fileId) {         return $this->hFiles->selectAssociative( array( 'hPlugin' ), $fileId ); } public function getFileField($field, $fileId, $table = 'hFileDocuments') {                 if (!is_numeric(($fileId))) { $fileId = $this->getFileIdByFilePath($fileId); } return $this->hDatabase->selectColumn( $field, $table, array( 'hFileId' => (int) $fileId ) ); } public function getFileHeaders() {                                                                                                                                                                                                                                  $html = ''; if ($this->hFileMIME == 'text/html' || $this->hFileMIME == 'application/xhtml+xml') { if ($this->hFileXHTML(false)) { $this->hFileXMLProlog = $this->getTemplateXML('Prolog'); } $variables = array( 'fileMIME' => $this->hFileMetaContentType( $this->hFileMIME('text/html') ), 'fileCharset' => $this->hLanguageCharset( $this->hFileEncoding('utf-8') ), 'languageLocalization' => $this->hLanguageLocalization( $this->hFileLanguage('en-us') ), 'fileLanguage' => $this->hLanguageCode( $this->hFileLanguageCode('en') ), 'fileTitle' => $this->translate( strip_tags($this->hFileTitle) ), 'fileDescription' => hString::encodeHTML( strip_tags($this->hFileDescription), true ) ); if ($this->hFrameworkEnableJQuery(true)) { $variables['jQueryPath'] = $this->hFrameworkLibraryRoot.'/jQuery/jQuery.js'; } if (!$this->hFileCopyright) { $this->hFileCopyright = "&copy; Copyright ".date('Y')." {$this->hFrameworkName}, All Rights Reserved."; } return $this->getTemplate('Headers', $variables); } return $html; } public function noScript($html) {          if ($this->userAgent->isW3C) { return ''; } else { return $this->userAgent->isMobile? $html : $this->getTemplate('No Script', get_defined_vars()); } } public function setHeaders($plugin, $method, $file = nil, $path = false) {             if ($this->hPrivateFramework && is_object($this->hPrivateFramework)) { if ($this->hPrivateFramework->getPrivateHeaders($plugin, $method, $file, $path)) {  return; } } if (empty($path)) { if (!empty($file) && !strstr($file, 'ie') && !strstr($file, 'print') && !strstr($file, 'template') && !strstr($file, 'windows')) { $plugin = $this->queryPlugin($file); $plugin = $plugin['path']; $file = $path; } $name = basename(dirname($plugin)); if (!empty($file)) { switch ($file) { case 'ie': case 'ie6': case 'ie7': case 'ie8': { $name .= '.'.$file; break; } case 'print': case 'template': { $name .= '.'.$file; break; } case 'windows': { if ($this->userAgent->isWindows) { $name .= '.'.$file; break; } else { return; } } default: { $name = $file; } } } $path = dirname($plugin).'/'.$name; } else { $path = $file; } if (stristr($path, '.css')) { $path = str_ireplace('.css', '', $path); } if (stristr($path, '.js')) { $path = str_ireplace('.js', '', $path); } switch ($method) { case 'css': { $this->appendToCSS($path); break; } case 'js': { $this->appendToJavaScript($path); break; } case 'both': { $this->appendToCSS($path); $this->appendToJavaScript($path); break; } }  } public function appendToCSS($path) {        if (!strstr($path, '.css')) { $path .= '.css'; } $path = $this->insertSubExtension( $path, 'mobile', $this->userAgent->interfaceIdiomIsPhone ); $this->hFileCSS .= $this->getCSS($path);  } public function appendToJavaScript($path) {        if (!strstr($path, '.js')) { $path .= '.js'; } $path = $this->insertSubExtension( $path, 'mobile', $this->userAgent->interfaceIdiomIsPhone ); $this->hFileJavaScript .= $this->getJavaScript($path);  } public function getJavaScript($path) {             return $this->getTemplate( 'JavaScript', array( 'path' => $path ) ); } private function getPathInfo($path) {           preg_match("/\.ie(\d*)\.|\.print\./", $path, $matches); return array( 'isInternetExplorer' => !empty($matches[0]) && strstr($matches[0], '.ie'), 'internetExplorerVersion' => !empty($matches[1]) && strstr($matches[0], '.ie')? $matches[1] : '', 'isPrint' => !isset($_GET['testPrint']) && !empty($matches[0]) && strstr($matches[0], '.print.'), 'path' => $path ); } public function getCSS($path) {            $data = $this->getPathInfo($path); if ($data['isInternetExplorer'] && $this->hDesktopApplication(false)) { return ''; } return $this->getTemplate('Stylesheet', $data); } public function jQuery() {         $items = func_get_args();  if (!$this->jQueryUICoreLoaded(false)) { $items = array_merge(array('UI-Core'), $items); $this->jQueryUICoreLoaded = true; } foreach ($items as $item) { if ($item == 'Datepicker') { $item .= '/Datepicker'; } $this->hFileJavaScript .= $this->getJavaScript( $this->hFrameworkLibraryRoot.'/jQuery/'.$item.'.js' ); }  } public function jQueryPlugin() {        $items = func_get_args(); foreach ($items as $item) { $this->hFileJavaScript .= $this->getJavaScript( $this->hFrameworkLibraryRoot."/jQuery/Plugins/{$item}".(strstr($item, '/')? '' : "/{$item}").'.js' ); }  } } ?>