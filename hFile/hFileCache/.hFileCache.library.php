<?php
  class hFileCacheLibrary extends hPlugin {  public function hConstructor() {  $sql = $this->getTemplateSQL('deleteExpired');  $this->hDatabase->query($sql); } public function isCached($fileCacheResource, $fileCacheResourceId, $fileCacheLastModified) {                       if ($this->hFileCacheDisabled(false)) { return false; } if (is_array($fileCacheLastModified)) { foreach ($fileCacheLastModified as $lastModified) { $exists = $this->hFileCache->selectExists( 'hFileCacheId', $this->getWhere( $fileCacheResource, $fileCacheResourceId, $lastModified ) ); if (!$exists) { return false; } } return true; } else { $exists = $this->hFileCache->selectExists( 'hFileCacheId', $this->getWhere( $fileCacheResource, $fileCacheResourceId, $fileCacheLastModified ) ); } return $exists; } public function getCacheId($fileCacheResource, $fileCacheResourceId) {         $cacheId = $this->hFileCache->selectColumn( 'hFileCacheId', $this->getWhere( $fileCacheResource, $fileCacheResourceId ) ); return $cacheId? (int) $cacheId : nil; } public function getCachedTimestamp($fileCacheResource, $fileCacheResourceId) { return $this->hFileCache->selectColumn( 'hFileCacheLastModified', $this->getWhere( $fileCacheResource, $fileCacheResourceId ) ); } private function getWhere($fileCacheResource, $fileCacheResourceId, $fileCacheLastModified = nil) { $where = array(  'hFileCacheResource' => $fileCacheResource ); $where['hFileCacheResource'.(is_numeric($fileCacheResourceId)? 'Id' : 'Path')] = $fileCacheResourceId; if (!empty($fileCacheLastModified)) { $where['hFileCacheLastModified'] = array('>=', $fileCacheLastModified); } return $where; }                     public function saveDocumentToCache($fileCacheResource, $fileCacheResourceId, $fileCacheDocument, $fileCacheExpires = 0, $languageId = 0) { $isResourceId = is_numeric($fileCacheResourceId); $this->hFileCache->save( array( 'hFileCacheId' => $this->getCacheId($fileCacheResource, $fileCacheResourceId), 'hLanguageId' => empty($languageId)? $this->hLanguageId(1) : $languageId, 'hFileCacheResourceId' => $isResourceId? $fileCacheResourceId : 0, 'hFileCacheResource' => $fileCacheResource, 'hFileCacheResourcePath' => !$isResourceId? $fileCacheResourceId : '', 'hFileCacheDocument' => hString::encodeHTML($fileCacheDocument), 'hFileCacheLastModified' => time(), 'hFileCacheExpires' => (int) $fileCacheExpires ) ); }                 public function getCachedDocument($fileCacheResource, $fileCacheResourceId, $fileCacheLastModified) { if (isset($_GET['update']) || isset($_GET['refresh']) || $this->hFileCacheDisabled(false)) { return false; } if (false !== ($this->isCached($fileCacheResource, $fileCacheResourceId, $fileCacheLastModified))) { return hString::decodeHTML( $this->hFileCache->selectColumn( 'hFileCacheDocument', $this->getWhere( $fileCacheResource, $fileCacheResourceId ) ) ); } else { return false; } }           public function deleteCachedDocument($fileCacheResource, $fileCacheResourceId) { $columns = array(); $columns['hFileCacheResource'.(is_numeric($fileCacheResourceId)? 'Id' : 'Path')] = $fileCacheResourceId; $columns['hFileCacheResource'] = $fileCacheResource; $this->hFileCache->delete($columns); } public function deleteCachedDocuments($fileId) {  $this->hFileCache->delete( array( 'hFileCacheResourceId' => (int) $fileId, 'hFileCacheResource' => 'hFileDocuments' ) ); $this->hFileCache->delete( array( 'hFileCacheResourceId' => (int) $fileId, 'hFileCacheResource' => 'hFileBreadcrumbs' ) ); } } ?>