<?php
  class hFilePathWildcard extends hPlugin { public function hConstructor() { if (!$this->hFilePath && isset($GLOBALS['uri']['path'])) { $this->setPath($GLOBALS['uri']['path']); $query = $this->hFilePathWildcards->select( array( 'hFilePathWildcard', 'hFileId' ) ); foreach ($query as $data) { if ($this->beginsPath($GLOBALS['uri']['path'], $data['hFilePathWildcard'])) { $this->hFileWildcardPath = $GLOBALS['uri']['path']; $filePath = $this->getFilePathByFileId($data['hFileId']); $this->setPath($filePath); $this->fire->setFileWildcardPath($filePath); return; } } if ($this->isServerPath($GLOBALS['uri']['path'])) {  $this->hFileServerPath = $GLOBALS['uri']['path']; $filePath = $this->getFilePathByPlugin('hFile/hFileServer'); $this->setPath($filePath); $this->fire->setFileWildcardPath($filePath); return; } else if ($this->isServicePath($GLOBALS['uri']['path']) && !strstr($GLOBALS['uri']['path'], '.sql')) { $this->hFileServicePath = $GLOBALS['uri']['path']; $this->hServerOutputBuffer = true; $filePath = $this->getFilePathByPlugin('hFramework/hFrameworkService'); $this->setPath($filePath); $this->fire->setFileWildcardPath($filePath); return; } else if ($this->isListenerPath($GLOBALS['uri']['path']) && !strstr($GLOBALS['uri']['path'], '.sql')) { $this->hFileListenerPath = $GLOBALS['uri']['path']; $this->hServerOutputBuffer = true; $filePath = $this->getFilePathByPlugin('hFramework/hFrameworkListener'); $this->setPath($filePath); $this->fire->setFileWildcardPath($filePath); return; } } } } ?>