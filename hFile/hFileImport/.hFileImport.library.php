<?php
  class hFileImportLibrary extends hPlugin { private $hFile; private $hFileDatabase; private $filePath; private $options; private $phpQuery; private $optionLabels = array( 'importFrom', 'saveFile', 'removeHostName', 'removeIP', 'picturesFolder', 'documentsFolder', 'moviesFolder', 'musicFolder', 'chmod', 'chown', 'hUserId', 'hUserPermissionsOwner', 'hUserPermissionsWorld', 'hUserPermissionsGroups' ); public function hConstructor() { $this->hFile = $this->library('hFile'); $this->hFileDatabase = $this->database('hFile'); } public function reset() { $this->options = array(); } public function setOptions(&$options) {                                                                                                                                                                 foreach ($this->optionLabels as $optionLabel) { if (isset($options[$optionLabel])) { $this->options[$optionLabel] = $options[$optionLabel]; unset($options[$optionLabel]); } } if (empty($this->options['importFrom'])) { $this->options['importFrom'] = 'http://'.$this->hFrameworkSite; } else if (!stristr($this->options['importFrom'], 'http://') && !stristr($this->options['importFrom'], 'https://')) { $this->options['importFrom'] = 'http://'.$this->options['importFrom']; } if (empty($this->options['removeHostName'])) { $this->options['removeHostName'] = $this->hFrameworkSite; } if (!isset($this->options['hUserPermissionsGroups'])) { $this->options['hUserPermissionsGroups'] = array( 'Website Administrators' => 'rw' ); } } public function fromSourceDOM($source, $selector, $filePath, array $file = array(), array $options = array()) { } public function fromSource($source, $filePath = null, array $file = array(), array $options = array()) {                               if (!empty($source)) { $this->setOptions($options); $source = preg_replace_callback( "/(action|src|background|poster)\=(\'|\")(.*)(\'|\")/iU", array($this, 'pathCallback'), $source ); $source = preg_replace_callback( "/\<a(.*)href\=(\'|\")(.*)(\'|\")(.*)\>(.*)\<\/a\>/iU", array($this, 'hrefPathCallback'), $source ); $source = hString::escapeAndEncode($source); $saveFile = !isset($this->options['saveFile']) || !empty($this->options['saveFile']); if ($saveFile) { $fileId = $this->hFileDatabase->save( array_merge( array( 'hFilePath' => $filePath, 'hFileDocument' => $source, ), $file ) ); } if (!empty($this->options['chmod'])) { $this->chmod( $this->hFrameworkFileSystemPath, $this->options['chmod'], true ); } if (!empty($this->options['chown'])) { $this->chown( $this->hFrameworkFileSystemPath, $this->options['chown'], true ); } $this->options = array(); return $saveFile? $fileId : $source; } else { $this->warning("Unable to import source HTML, no value was provided."); } return 0; } public function fromSite($uri, $filePath, Array $file = array(), Array $options = array()) {                  if (!empty($uri)) { $source = file_get_contents($uri); return $this->fromSource( $source, $filePath, $file, $options ); } else { $this->warning("Unable to import from site via URI, no value was provided."); } return 0; } public function fromDisk($path, $filePath, array $file = array(), array $options = array()) {                     if (!empty($path)) { if (file_exists($path)) { $source = file_get_contents($path); return $this->fromSource( $source, $filePath, $file, $options ); } else { $this->warning("Unable to import HTML from disk, path '{$path}' does not exist."); } } else { $this->warning("Unable to import HTML from disk, no path was provided."); } return 0; } public function fromArray($array, array $options = array()) {                         $this->setOptions($options); foreach ($array as $key => $path) { $saveTo = $this->getSaveFolder($path); if (!empty($saveTo)) { if (is_numeric($key)) { $this->saveFileFrom($path, $saveTo); } else { $extension = $this->getExtension($key); if (empty($extension)) { $key .= '.'.$this->getExtension($path); } $this->saveFileFrom($path, $saveTo, $key); } } } } public function pathCallback($matches) {           $attribute = $matches[1]; $quote = $matches[2]; $path = $matches[3]; $this->stripHostName($path); if (substr($path, 0, 1) == '/') { $saveTo = $this->getSaveFolder($path); if (!empty($saveTo)) { $path = $this->saveFileFrom($path, $saveTo); } } return $attribute.'='.$quote.$path.$quote; } public function hrefPathCallback($matches) {                      $beforePath = $matches[1]; $quote = $matches[2]; $path = $matches[3]; $afterPath = $matches[5]; $label = $matches[6]; $this->stripHostName($path); if (substr($path, 0, 1) == '/') { $extension = strtolower($this->getExtension($path)); $saveTo = $this->getSaveFolder($path); $fileName = trim(strip_tags($label)); $fileName = str_replace( array( '/', '\\', ':', ';', '?', '!', '+', '%', '<', '>', '(', ')', '{', '}', '$', '#', '@', '*', '[', ']', "'", '"', '^', '~', '`', '|' ), '', $fileName ); $fileName = str_replace( array( '&', '&amp;', ), 'and', $fileName ); if (!empty($saveTo)) { $path = $this->saveFileFrom( $path, $saveTo, $fileName.'.'.strtolower($extension) ); } } return '<a'.$beforePath.'href='.$quote.$path.$quote.$afterPath.'>'.$label.'</a>'; } public function getSaveFolder($path) { $extension = strtolower($this->getExtension($path)); if (!empty($extension)) { switch ($extension) { case 'php': case 'phtml': case 'aspx': case 'asp': case 'cfm': case 'cf': case 'rb': case 'html': case 'htm': case 'xhtml': case 'cgi': case 'py': { return ''; } default: { switch ($extension) { case 'jpg': case 'png': case 'gif': case 'jpe': case 'jpeg': case 'tif': case 'psd': case 'svg': case 'ico': case 'eps': case 'ai': { if (!empty($this->options['picturesFolder'])) { $saveTo = $this->options['picturesFolder']; } else { $saveTo = '/'.$this->hFrameworkSite.'/Pictures'; } break; } case 'm4v': case 'mp4': case 'mov': case 'wmv': case 'rm': case 'swf': case 'flv': case 'api': case 'fla': case 'mpeg': { if (!empty($this->options['moviesFolder'])) { $saveTo = $this->options['moviesFolder']; } else { $saveTo = '/'.$this->hFrameworkSite.'/Movies'; } break; } case 'mp3': case 'wav': case 'aac': case 'band': case 'm4a': { if (!empty($this->options['musicFolder'])) { $saveTo = $this->options['musicFolder']; } else { $saveTo = '/'.$this->hFrameworkSite.'/Music'; } break; } case 'pdf': case 'doc': case 'docx': case 'xls': case 'xlsx': case 'ppt': case 'pptx': case 'zip': case 'pages': case 'numbers': case 'keynote': case 'txt': case 'rtf': case 'eml': case 'msg': case 'xml': case 'css': case 'js': case 'dmg': case 'iso': case 'json': default: { if (!empty($this->options['documentsFolder'])) { $saveTo = $this->options['documentsFolder']; } else { $saveTo = '/'.$this->hFrameworkSite.'/Documents'; } } } return $saveTo; } } } return ''; } public function saveFileFrom($path, $saveTo, $fileName = null) {                                $extension = strtolower($this->getExtension($path)); if (!$this->hFile->exists($saveTo)) { $permissions = array(); if (isset($this->options['hUserId'])) { $permissions['hUserId'] = $this->options['hUserId']; } if (isset($this->options['hUserPermissionsOwner'])) { $permissions['hUserPermissionsOwner'] = $this->options['hUserPermissionsOwner']; } if (isset($this->options['hUserPermissionsWorld'])) { $permissions['hUserPermissionsWorld'] = $this->options['hUserPermissionsWorld']; } if (isset($this->options['hUserPermissionsGroups']) && is_array($this->options['hUserPermissionsGroups'])) { $permissions['hUserPermissionsGroups'] = $this->options['hUserPermissionsGroups']; } $directoryId = $this->hFile->makePath( $saveTo, $permissions ); } if (empty($fileName)) { $fileName = basename($path); $fileName = str_replace('_', ' ', $fileName); if (strstr($fileName, '.'.strtoupper($extension))) { $fileName = str_replace( '.'.strtoupper($extension), '.'.strtolower($extension), $fileName ); } } $oldPath = $path; $newPath = $this->getConcatenatedPath($saveTo, $fileName); $directoryId = $this->getDirectoryId($saveTo); $temporaryFileName = $this->getRandomString(15); $temporaryPath = $this->hFrameworkPath.'/Temporary/'.$temporaryFileName; file_put_contents( $temporaryPath, file_get_contents($this->options['importFrom'].$path) ); if (!empty($this->options['chmod'])) { $this->chmod( $temporaryPath, $this->options['chmod'] ); } if (!empty($this->options['chown'])) { $this->chown( $temporaryPath, $this->chown ); } $this->hFileSystemAllowDuplicates = true; $mimeType = $this->hFileIcons->selectColumn( 'hFileMIME', array( 'hFileExtension' => $extension ) ); $this->hFile->import( $saveTo, array( array( 'hFileName' => $fileName, 'hFileReplace' => true, 'hFileMD5Checksum' => md5_file($temporaryPath), 'hFileTempPath' => $temporaryPath, 'hFileMIME' => $mimeType ) ) ); $this->hFileSystemAllowDuplicates = false; $fileId = $this->getFileIdByFilePath($newPath); if (is_array($this->options['hUserPermissionsGroups'])) { foreach ($this->options['hUserPermissionsGroups'] as $group => $level) { $this->hFiles->setGroup($group, $level); } } $this->hFiles->savePermissions( $fileId, isset($this->options['hUserPermissionsOwner'])? $this->options['hUserPermissionsOwner'] : 'rw', isset($this->options['hUserPermissionsWorld'])? $this->options['hUserPermissionsWorld'] : 'r' ); $userId = isset($this->options['hUserId'])? (int) $this->options['hUserId'] : 1; $this->hFiles->chown($fileId, $userId); $aliasExists = $this->hFileAliases->selectExists( 'hFileAliasId', array( 'hFileAliasPath' => $oldPath ) ); if (!$aliasExists) { $this->hFileAliases->insert( array( 'hFileId' => $fileId, 'hFileAliasPath' => $oldPath, 'hFileAliasRedirect' => 1, 'hFileAliasCreated' => time(), 'hFileAliasExpires' => 0 ) ); } $this->rm($temporaryPath, true); return '{fileId:'.$fileId.'}'; } private function stripHostName(&$path) {          if (!empty($this->options['removeHostName'])) { if (substr($path, 0, strlen('http://'.$this->removeHostName.'/')) == 'http://'.$this->removeHostName.'/') { $path = substr( $path, strlen('http://'.$this->removeHostName) ); } if (substr($path, 0, strlen('https://'.$this->removeHostName.'/')) == 'https://'.$this->removeHostName.'/') { $path = substr( $path, strlen('https://'.$this->removeHostName) ); } } if (!empty($this->removeIP)) { if (substr($path, 0, strlen('http://'.$this->removeIP.'/')) == 'http://'.$this->removeIP.'/') { $path = substr( $path, strlen('http://'.$this->removeIP) ); } if (substr($path, 0, strlen('https://'.$this->removeIP.'/')) == 'https://'.$this->removeIP.'/') { $path = substr( $path, strlen('https://'.$this->removeIP) ); } } } } ?>