<?php
  class hFrameworkCacheLibrary extends hPlugin { private $hFile; private $hFileUtilities; private $hFileCSSCompress; private $hFileJSCompress; private $documentRoot; public function hConstructor() { $this->hFile = $this->library('hFile'); $this->hFileCSSCompress = $this->library('hFile/hFileCSSCompress'); $this->hFileJSCompress = $this->library('hFile/hFileJSCompress'); $this->hFileUtilities = $this->library( 'hFile/hFileUtilities', array( 'autoScanEnabled' => false, 'includeFileTypes' => array(         ), 'excludeFileTypes' => array( 'sql', 'json', 'csv', 'php', 'rb', 'conf' ), 'excludeFolders' => array( 'HTML', 'SQL', 'Cache' ), 'scanTextFiles' => false ) ); $this->documentRoot = $this->hFrameworkPath.$this->hServerDocumentRootName('/www'); } public function delete() { $this->rm($this->documentRoot.'/Template');     $query = $this->hServerDocumentRootFiles->select( array( 'hServerDocumentRootFilePath', 'hServerDocumentRootFileIsFolder' ), array(), 'AND', array( 'hServerDocumentRootFilePath', 'DESC' ) ); foreach ($query as $data) { if ((int) $data['hServerDocumentRootFileIsFolder']) { $this->rm($data['hServerDocumentRootFilePath']); } else { $this->rm($data['hServerDocumentRootFilePath'], true); } } $this->hServerDocumentRootFiles->truncate(); } public function go() {    $this->delete(); $templatePictures = $this->hFrameworkPicturesPath($this->hFrameworkPath.'/Pictures'); $this->makePath('/Template/Pictures'); $this->copy( $templatePictures, $this->documentRoot.'/Template', true );  $hotToddy = $this->hFrameworkPath.'/Hot Toddy'; $this->hFileUtilities->scanFiles($hotToddy); $files = $this->hFileUtilities->getFiles(); $folders = $this->hFileUtilities->getFolders(); $this->copyFolders( $hotToddy, $folders ); $this->copyFiles( $hotToddy, $files, false ); $this->hFileUtilities->resetFilesAndFolders();  $privatePlugins = $this->hFrameworkPluginRoots( array("/Plugins") ); foreach ($privatePlugins as $privatePlugin) { $privatePluginPath = $this->hFrameworkPath.$privatePlugin; $this->console("Private plugin path '{$privatePluginPath}'"); $this->hFileUtilities->scanFiles($privatePluginPath); $files = $this->hFileUtilities->getFiles(); $folders = $this->hFileUtilities->getFolders(); $this->copyFolders( $privatePluginPath, $folders ); $this->copyFiles( $privatePluginPath, $files, false ); $this->hFileUtilities->resetFilesAndFolders(); }  $library = $this->hFrameworkLibraryPath; $this->hFileUtilities->setExcludeFolders( array( 'Arc90_Service_Twitter', 'bin', 'CoreImageTool', 'Packer', 'PEAR', 'phpFlickr', 'qlpreview', 'Tidy', 'toSqlite' ) ); $this->hFileUtilities->scanFiles($library); $files = $this->hFileUtilities->getFiles(); $folders = $this->hFileUtilities->getFolders(); $this->copyFolders($this->hFrameworkPath, $folders); $this->copyFiles($this->hFrameworkPath, $files); $this->hFileUtilities->resetFilesAndFolders(); } public function copyFolders($basePath, $folders) { foreach ($folders as $folder) { $folderPath = $this->getEndOfPath( $folder, $basePath ); $this->hFile->makeServerPath($this->documentRoot.$folderPath); $this->hServerDocumentRootFiles->insert( array( 'hServerDocumentRootFilePath' => $this->documentRoot.$folderPath, 'hServerDocumentRootFileIsFolder' => 1 ) ); } } public function copyFiles($basePath, $files, $copyCSS = false) { $this->console("Caching to document root with base path '{$basePath}'"); foreach ($files as $file) { $filePath = $this->getEndOfPath($file, $basePath); $extension = $this->getExtension($file); switch ($extension) { case 'css': { if ($copyCSS) { $document = $this->hFileCSSCompress->get($file); file_put_contents($this->documentRoot.$filePath, $document); } break; } case 'js': { $document = $this->hFileJSCompress->get($file); file_put_contents( $this->documentRoot.$filePath, $document ); break; } default: { $this->copy( $file, $this->documentRoot.$filePath ); } } $this->console('Cached to document root: '.$this->documentRoot.$filePath); $this->hServerDocumentRootFiles->insert( array( 'hServerDocumentRootFilePath' => $this->documentRoot.$filePath, 'hServerDocumentRootFileIsFolder' => 0 ) ); } } public function makePath($path) { $this->hFile->makeServerPath($this->documentRoot.$path); } } ?>