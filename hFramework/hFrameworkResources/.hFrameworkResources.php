<?php
  class hFrameworkResources extends hFilePath { public function getResourceId($frameworkResource) {          $isNumeric = is_numeric($frameworkResource); $where['hFrameworkResource'.($isNumeric? 'Id' : 'Table')] = $frameworkResource; $frameworkResource = $this->hFrameworkResources->selectColumn( 'hFrameworkResource'.($isNumeric? 'Table' : 'Id'), $where ); if (!$frameworkResource) { $this->warning('The framework resource '.$frameworkResource.' does not exist.', __FILE__, __LINE__); } return $frameworkResource; } public function &numericResourceId(&$frameworkResourceId) {           if (!is_numeric($frameworkResourceId)) { $frameworkResourceId = $this->getResourceId($frameworkResourceId); } return $this; } public function isResource($frameworkResourceTable) {         return $this->hFrameworkResources->selectExists( 'hFrameworkResourceId', array( 'hFrameworkResourceTable' => $frameworkResourceTable ) ); } public function getResource($frameworkResourceId) {                                  if (!is_numeric($frameworkResourceId)) { $frameworkResourceId = $this->getResourceId($frameworkResourceId); } return $this->hFrameworkResources->selectAssociative( array( 'hFrameworkResourceTable', 'hFrameworkResourcePrimaryKey', 'hFrameworkResourceNameColumn', 'hFrameworkResourceLastModifiedColumn' ), (int) $frameworkResourceId ); } public function getResourceName($frameworkResourceId, $frameworkResourceKey) {          if (!is_numeric($frameworkResourceId)) { $frameworkResourceId = $this->getResourceId($frameworkResourceId); } $resource = $this->getResource($frameworkResourceId); $where[$resource['hFrameworkResourcePrimaryKey']] = (int) $frameworkResourceKey; return $this->hDatabase->selectColumn( $resource['hFrameworkResourceNameColumn'], $resource['hFrameworkResourceTable'], $where ); } public function getFileOwner($fileId = 0) {        if (empty($fileId)) { $fileId = (int) $this->hFileId; } return (int) $this->hFiles->selectColumn('hUserId', (int) $fileId); } public function getResourceLastModifiedColumn($frameworkResourceId) {         if (!is_numeric($frameworkResourceId)) { $frameworkResourceId = $this->getResourceId($frameworkResourceId); } return $this->hFrameworkResources->selectColumn('hFrameworkResourceLastModifiedColumn', (int) $frameworkResourceId); } public function getResourceLastModified($frameworkResourceId, $frameworkResourceKey = 0) {          if (!is_numeric($frameworkResourceId)) { $frameworkResourceId = $this->getResourceId($frameworkResourceId); } if (empty($frameworkResourceKey)) { return $this->hFrameworkResources->selectColumn('hFrameworkResourceLastModified', (int) $frameworkResourceId); } else { $resource = $this->getResource($frameworkResourceId); $where[$resource['hFrameworkResourcePrimaryKey']] = (int) $frameworkResourceKey; return $this->hDatabase->selectColumn( $resource['hFrameworkResourceLastModifiedColumn'], $resource['hFrameworkResourceTable'], $where ); } } public function &modifyResource($frameworkResourceId, $frameworkResourceKey = 0) {          if (!is_numeric($frameworkResourceId)) { $frameworkResourceId = $this->getResourceId($frameworkResourceId); } $columns = array( 'hFrameworkResourceLastModified' => time() ); if ($this->isLoggedIn()) { $columns['hFrameworkResourceLastModifiedBy'] = (int) $_SESSION['hUserId']; } $this->hFrameworkResources->update($columns, $frameworkResourceId); if (!empty($frameworkResourceKey)) { $columns = array(); $resource = $this->getResource($frameworkResourceId); $columns[$resource['hFrameworkResourceLastModifiedColumn']] = time(); if (!empty($resource['hFrameworkResourceLastModifiedByColumn']) && $this->isLoggedIn()) { $columns[$resource['hFrameworkResourceLastModifiedByColumn']] = (int) $_SESSION['hUserId']; } $this->hDatabase->update($columns, $frameworkResourceKey, $resource['hFrameworkResourceTable']); } return $this; } } ?>