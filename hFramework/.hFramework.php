<?php
  interface hPrivatePlugin {  public function getPrivateHeaders(&$plugin, &$method, &$file, &$path);  public function &getPrivateForm(); } $pluginPath = $_SERVER['DOCUMENT_ROOT']; hFrameworkInclude($pluginPath.'/hPlugin/hPlugin.library.php'); hFrameworkInclude($pluginPath.'/hFramework/hFrameworkApplication/hFrameworkApplication.php'); hFrameworkInclude($pluginPath.'/hPlugin/hPlugin.php'); hFrameworkInclude($pluginPath.'/hFramework/hFrameworkVariables/hFrameworkVariables.php'); hFrameworkInclude($pluginPath.'/hFile/hFilePath/hFilePath.php'); hFrameworkInclude($pluginPath.'/hFramework/hFrameworkResources/hFrameworkResources.php'); hFrameworkInclude($pluginPath.'/hHTTP/hHTTP.php'); class hFramework extends hHTTP { public $fusePlugins = array(); public $loadedPaths = array(); public $hDB = ''; public $hDatabase; public $tables = array(); public $hPrivateFramework = nil; private $hEditor; protected $tableObjects = array(); public static function &singleton() {        return $GLOBALS['hFramework']; } protected function setOutputBuffer() {        if ($this->hServerOutputBuffer(true)) {        if ($this->hServerGZip(false) && isset($_SERVER['HTTP_ACCEPT_ENCODING']) && stristr($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip')) { ob_start('ob_gzhandler'); } else { ob_start(); } } } public function defineTableObjects() {           $this->tables = $this->hDatabase->getTables();  } public function addTableObject($table) {               if (!in_array($table, $this->tables)) { array_push($this->tables, $table); } $this->hDatabase->addTableToCache($table); $this->hDatabase->getColumns($table);  } public function refreshTableObjects() {        foreach ($this->tableObjects as $table => $object) { unset($this->tableObjects[$table]); } $this->tables = $this->hDatabase->getTables();  } public function resetTableObject($table) {         if (isset($this->tableObjects[$table])) { $this->tableObjects[$table]->reset(); }  } public function renameTableObject($oldName, $newName) {                     foreach ($this->tables as $i => $table) { if ($table == $oldName) { $this->tables[$i] = $newName; } } if (isset($this->tableObjects[$oldName])) { $this->tableObjects[$newName] = $this->tableObjects[$oldName]; unset($this->tableObjects[$oldName]); $this->tableObjects[$newName]->renameThisTable($newName); } $this->hDatabase->renameTableCache($oldName, $newName);  } public function deleteTableObject($table) {                     foreach ($this->tables as $i => $tableName) { if ($tableName == $table) { unset($this->tables[$i]); } } unset($this->tableObjects[$table]); $this->hDatabase->deleteTableCache($table);  } public function execute() {                        $this->plugin('hTemplate', array(), true);            $this->inspectFilePath();      if (!$this->hShellCLI(false)) {     $this->setOutputBuffer();           if (!isset($GLOBALS['hUserSessionLoaded'])) { $this->plugin('hUser/hUserSession'); } }                     $this->library('hUser/hUserAuthentication', array(), true);      if ($this->isLoggedIn() && $this->hUserActivityLogEnabled(false)) {         $this->plugin('hUser/hUserActivityLog', array(), true); }               $this->setVariables( $this->hFrameworkVariables->selectColumnsAsKeyValue( array( 'hFrameworkVariable', 'hFrameworkValue' ) ) );           $this->setDocumentTemplate();      if ($this->hShellCLI(false)) {                         $this->plugin('hFile/hFileDocument', array(), true);         $this->plugin('hShell'); } else {      $this->getFile();          $html = '';                               if ($this->hTemplatePath) {         $path = $this->getIncludePath($this->hServerDocumentRoot.$this->hTemplatePath);       $path = $this->insertSubExtension( $path, 'mobile', $this->userAgent->interfaceIdiomIsPhone ); if (file_exists($path)) {           if ($this->isLoggedIn() && ($this->hEditorTemplateEnabled('auto') === true || $this->hEditorTemplateEnabled('auto') === 1 || isset($_GET['hEditorTemplateEnabled']))) {     if ($this->hFiles->hasPermission($this->hEditorTemplateFileId($this->hFileId), 'rw')) {       $this->hEditor = $this->library('hEditor'); $this->hEditor->wysiwyg();  } }             include_once $path;    $this->hFileDocument = '';        if ($this->hCoreMetricsClientId(nil) && !$this->hDesktopApplication(false)) {    $this->plugin('hCoreMetrics/hCoreMetricsTag'); }                if ($this->hGoogleAnalytics(false) && !$this->hDesktopApplication(false)) {    $this->plugin('hGoogle/hGoogleAnalytics'); }       $body = $html.$this->hFileDocument;           $this->parseBody($body);      $this->hFileDocument = ($this->hFileHTMLHeaders(true)? $this->getFileHeaders() : '').$body;                 if ($this->hFileDocumentParseEnabled(true)) {  $this->hFileDocument = $this->parseTemplateMarkup($this->hFileDocument); $this->hFileDocument = $this->parseDocument($this->hFileDocument); }       if ($this->hFileCloseMarkup(true)) {           if ($this->hFrameworkOutputLoadedPaths(false)) { $html = "<!-- Loaded Paths ".count($this->loadedPaths)."\n"; foreach ($this->loadedPaths as $path) { $html .= "  {$path}\n"; } $html .= "-->\n"; $this->hFileDocument .= $html; }        if ($this->hFileDocumentAppend(nil)) { $this->hFileDocument .= $this->hFileDocumentAppend; }        $this->hFileDocument .= $this->getTemplate( dirname(__FILE__).'/HTML/Close.html', array( 'benchmark' => $this->getBenchmark() ) ); }        if ($this->hDatabaseOptimize(false)) { $this->plugin('hDatabase/hDatabaseBenchmark'); } } else { $this->warning("The template '{$path}' does not exist.", __FILE__, __LINE__); } } else if (!$this->hFileSystemDocument) {        $headers = ''; $body = $html.$this->getDocument();            $this->parseBody($body); if ($this->isHTMLDocument() && $this->hFileHTMLHeaders(false)) { $headers = $this->getFileHeaders(); } $this->hFileDocument = $headers.$body;        if ($this->isHTMLDocument() && $this->hFileDocumentParseEnabled(true)) { $this->hFileDocument = $this->parseTemplateMarkup($this->hFileDocument); $this->hFileDocument = $this->parseDocument($this->hFileDocument); }         if ($this->isHTMLDocument() && ($this->hFileHTMLHeaders(false) || $this->hFileCloseMarkup(false))) { if ($this->hFileDocumentAppend(nil)) { $this->hFileDocument .= $this->hFileDocumentAppend; } $this->hFileDocument .= $this->getTemplate( dirname(__FILE__).'/HTML/Close.html', array( 'benchmark' => $this->getBenchmark(), 'hDesktopApplication' => $this->hDesktopApplication(false) ) ); } } if (!$this->hFileSystemDocument) {           $this->hFileContentLength = strlen($this->hFileDocument);     $this->setHTTPHeaders();    echo $this->hFileDocument; } else {                  $file = $this->getFileSystemPath();      if (file_exists($file)) { if (is_readable($file)) {          ini_set('zlib.output_compression', false);       set_time_limit(0);           $this->hFileSize = filesize($file);              $this->hFileSize( $this->hFileSize, $this->hFileId, true );          $movie = false; $audio = false; switch (true) { case $this->isVideo($this->hFileName, $this->hFileMIME): {             $this->hFileThrottle = 320; $this->hFileBurstSize = 500; $movie = true; break; } case $this->isAudio($this->hFileName, $this->hFileMIME): {          $this->hFileThrottle = 84; $this->hFileBurstSize = 120; $audio = true; break; } }               $this->range();           $range = $this->hFileRange(false);     $useRange = !empty($range);          if (isset($_GET['hFileLastModified']) && !$movie && !$audio) { $this->hFileDisableCache = false; $this->hFileEnableCache = true; $this->hFileCacheExpires = strtotime('+10 Years'); }     if ($useRange || $movie || $audio) {   $this->hFileDisableCache = true; $this->hFileEnableCache = false; }                          if ($this->hFrameworkOverrideDocumentOutput(false)) { $this->hFileSize = strlen($this->hFileDocument); }         if ($useRange) { $this->hFileContentLength = $this->hFileRangeEnd - $this->hFileRangeStart + 1; } else { $this->hFileContentLength = $this->hFileSize; }      @ob_end_clean();      $this->setHTTPHeaders();      if ($this->hFrameworkOverrideDocumentOutput(false)) { echo $this->hFileDocument; } else {        $sent = 0;  $handle = fopen($file, 'r');       if ($this->hFileRangeStart(0) > 0) {    fseek($handle, $this->hFileRangeStart);     if ($this->hFileMIME == 'video/x-flv') { echo 'FLV'.pack('C', 1).pack('C', 1).pack('N', 9).pack('N', 9); } }     if (!$useRange) {      $blocksize = (1 << 10);          while ($sent < $this->hFileSize && !(connection_aborted() || connection_status() == 1)) {  echo fread($handle, $blocksize); $sent += $blocksize; } } else {      $speed = 0; $chunk = 1; $throttle = $this->hFileThrottle(false); $burst = $this->hFileBurst(nil)? $this->hFileBurst * 1024 : 0; $buffer = $this->hFileBufferSize(8) * 1024; while (!(connection_aborted() || connection_status() == 1) && $sent < $this->hFileContentLength) { if ($sent >= $burst) { $speed = $throttle; } if ($sent + $buffer > $this->hFileContentLength) { $buffer = $this->hFileContentLength - $sent; } echo fread($handle, $buffer); $sent += $buffer; if ($speed && ($sent - $burst > $speed * $chunk * 1024)) { sleep(1); $chunk++; } } }  fclose($handle); } } else {     $this->warning( "'{$file}' could not be accessed because it is not readable.", __FILE__, __LINE__ ); } } else {  header('Content-type: text/html; charset=utf-8'); header('Content-disposition: inline; filename=error.html'); echo $this->getTemplate( dirname(__FILE__).'/HTML/Missing File.html' ); $this->warning( "'{$file}' could not be accessed because it does not exist.", __FILE__, __LINE__ ); } }  if ($this->hServerOutputBuffer(false)) { @ob_end_flush(); } }      if ($this->hFileActivityEnabled(false) && $this->hFileActivityId) { $this->hFileActivity->update( array( 'hFileId' => $this->hFileId, 'hFilePath' => $this->hFilePath, 'hFileWildcardPath' => $this->hFileWildcardPath, 'hFileReferrer' => $_SERVER['HTTP_REFERER'], 'hUserId' => $this->isLoggedIn()? $_SESSION['hUserId'] : 0, 'hFileExecutionBenchmark' => $this->getBenchmark(), 'hDatabaseQueryBenchmark' => $this->hDatabaseQueryBenchmark, 'hDatabaseQueryCount' => $this->hDatabaseQueryCount ), $this->hFileActivityId ); }  exit; } public function isEditable() {         return ( $this->isLoggedIn() && ( $this->hEditorTemplateEnabled('auto') !== false && $this->hFiles->hasPermission( $this->hEditorTemplateFileId($this->hFileId), 'rw' ) ) ); } public function isHTMLDocument() {          switch ($this->hFileMIME('text/html')) { case 'text/html': case 'application/xhtml+xml': { return true; } } return false; } public function parseBody($document) {               if ($this->isHTMLDocument()) { preg_match('/\<video|\<audio/siU', $document, $matches); if (isset($matches[0]) && $matches[0] == '<video') { $this->hFileMediaElement = true; } }  } public function parseDocument($document) {                                                            if ($this->hFileMIME == 'application/xhtml+xml') {   $document = preg_replace_callback( array( '/(<style[^>]*?>)(.*?)(<\/style>)/siU', '/(<script[^>]*?>)(.*?)(<\/script>)/si' ), array($this, 'XMLCDataCallback'), $document ); } switch ($this->hFileMIME('text/html')) { case 'text/html': case 'application/xhtml+xml': {     $document = preg_replace_callback( "/(href|action|src|background|poster)\=(\'|\")(.*)(\'|\")/iU", array( $this, 'attributePathCallback' ), $document ); break; } } switch ($this->hFileMIME('text/html')) { case 'text/html': case 'application/xhtml+xml': case 'text/css': { $document = preg_replace_callback( "/(url\()(\"|\')(.*)(\"|\')(\))/iU", array( $this, 'CSSPathCallback' ), $document ); break; } } return $document; } public function attributePathCallback($matches) { $attribute = $matches[1]; $quote = $matches[2]; $path = $matches[3];                     if ($this->isFrameworkPath($path)) {            $path = $this->makeFrameworkPath($path, true); }  return $attribute.'='.$quote.$path.$quote; } public function CSSPathCallback($matches) {         $opening = $matches[1]; $quote = $matches[2]; $path = $matches[3]; $closing = $matches[5];  if (!$this->isFrameworkPath($path)) { return $matches[0]; }  $path = $this->makeFrameworkPath($path); return $opening.$quote.$path.$quote.$closing; } public function XMLCDataCallback($matches) {         if (!empty($matches[2])) { return $matches[1]."<![CDATA[\n".$matches[2]."]]>".$matches[3]; } return $matches[0]; } protected function getFile() {       if (!$this->isLoggedIn()) {                      $this->library('hUser/hUserLogin', array(), true); $this->login(); }               if ($this->isLoggedIn() && $this->inGroup('root') && isset($_GET['hDesktopApplication'])) { $this->hDesktopApplication = true; }                                    if ($this->hFilePasswordsEnabled(false)) { $this->plugin('hFile/hFilePassword'); } else {                 $this->hFileAuthorized = $this->hFiles->hasPermission($this->hFileId, 'r'); } if ($this->hFileAuthorized) {                                                                                                                                                  $data = $this->hDatabase->getAssociativeResults( $this->getTemplate( dirname(__FILE__).'/SQL/getFile.sql', array( 'hFileId' => $this->hFileId ) ) );     if (empty($data['hFileSystemPath'])) { unset($data['hFileSystemPath']); }    if (empty($data['hFileMIME'])) { $data['hFileMIME'] = 'text/html'; } if (!$this->hFileSystemDocument) { foreach ($data as $key => &$value) { switch ($key) { case 'hFileDocument': case 'hFileCSS': case 'hFileJavaScript': {      $value = hString::decodeHTML($value); break; } } } }     $this->setVariables($data);     if ($this->hFileSystemDocument) { $this->hTemplatePath = ''; } else {     $this->getDocumentFrameworks(); }               $this->setFileVariables();         if ($this->hPlugin) { $this->plugin($this->hPlugin); } } else {  $this->hFileMIME = 'text/html'; $this->getDocumentFrameworks(); $this->hFileSystemDocument = false; $file = array( 'hFileLastModified' => time(), 'hFileCSS' => '', 'hFileJavaScript' => '', 'hFileKeywords' => '', 'hFileDescription' => '' ); if (!$this->hFilePassword(false)) { if ($this->isLoggedIn()) { $this->setVariables($file);        $this->notAuthorized();        $this->h403 = true; $this->hFileStatusCode = 403; } else { $this->setVariables($file); $this->notLoggedIn(); } } else { $this->getPluginCSS('hFile/hFilePassword'); } }                     if ($this->hFileStatisticsEnabled(false)) { $this->plugin('hFile/hFileStatistics'); }  } public function getDocumentFrameworks() {                   if ($this->hFileMIME == 'text/html' && $this->hFileXHTML(false) && !empty($_SERVER['HTTP_ACCEPT'])) { $accept = explode(',', $_SERVER['HTTP_ACCEPT']); if (in_array('application/xhtml+xml', $accept)) { $this->hFileMIME = 'application/xhtml+xml'; } }                                               if ($this->hFileLanguagesEnabled(false)) { $this->plugin('hLanguage', array(), true); }                 $this->plugin('hFile/hFileDocument', array(), true);                            if ($this->hFileBreadcrumbsEnabled(false)) { $this->plugin('hFile/hFileBreadcrumbs', array(), true); }                         if ($this->hFileListsEnabled(false)) { $this->plugin('hList', array(), true); } if ($this->hCoreMetricsClientId) { $this->plugin('hCoreMetrics/hCoreMetricsAPI', array(), true); }                   if ($this->hPrivatePlugin && !$this->hDesktopApplication(false)) { $this->hPrivateFramework = $this->plugin($this->hPrivatePlugin, array(), true); }             if ($this->hTemplatePluginsEnabled(false)) { if ($this->hDatabase->tableExists('hTemplatePlugins')) { $query = $this->hTemplatePlugins->select( 'hPlugin', array( 'hTemplateId' => (int) $this->hTemplateId ) ); foreach ($query as $data) { $this->plugin($data['hPlugin'], array(), true); } } } } public function addLoadedPath($path) {          if (!is_array($this->loadedPaths)) { $this->loadedPaths = array(); } if (!in_array($path, $this->loadedPaths)) { array_push($this->loadedPaths, $path); }  } public function getGMTTime() {        return ((time() - (-date('Z'))) * 1000); } public function getBenchmark() {        return round((hFrameworkBenchmarkMicrotime() - hFrameworkBenchmarkStart), 3) * 1000; } public function bytes($bytes, $space = ' ') {         switch (true) { case ($bytes < pow(2,10)): { return $bytes.$space.'Bytes'; } case ($bytes >= pow(2,10) && $bytes < pow(2,20)): { return round($bytes / pow(2,10), 0).$space.'KB'; } case ($bytes >= pow(2,20) && $bytes < pow(2,30)): { return round($bytes / pow(2,20), 1).$space.'MB'; } case ($bytes > pow(2,30)): { return round($bytes / pow(2,30), 2).$space.'GB'; } } } public function getRandomString($length = 7, $randomUppercase = false, $nonAlphaNumericCharacters = false) {          $string = ''; $alpha = 'abcdefghijkmnopqrstuvwxyz'; $pool = $alpha.'023456789'; if ($nonAlphaNumericCharacters) { $pool .= '!@#$%^&*()~`{}[]:;<>,.?/+=-_'; } $count = strlen($pool); while (strlen($string) <= $length) { $bit = substr($pool, rand(1, $count), 1); if (!is_numeric($bit) && strstr($alpha, $bit) && $randomUppercase && rand(1, 2) == 1) { $bit = strtoupper($bit); } $string .= $bit; } return $string; } public function decodeJSON($json) {          if (!function_exists('json_decode')) {  $this->setToPHP4(); include_once 'Services/JSON.php'; } $obj = json_decode(str_replace(array("\n", "\r"), '', $json), false); if ($obj === nil) { $lastError = json_last_error(); switch ($lastError) { case JSON_ERROR_NONE: { break; } case JSON_ERROR_DEPTH: { $this->warning("JSON: The maximum stack depth has been exceeded"); break; } case JSON_ERROR_STATE_MISMATCH: { $this->warning("JSON: Invalid or malformed JSON"); break; } case JSON_ERROR_CTRL_CHAR: { $this->warning("JSON: Control character error, possibly incorrectly encoded"); break; } case JSON_ERROR_SYNTAX: { $this->warning("JSON: Syntax error"); break; } case JSON_ERROR_UTF8: { $this->warning("JSON: Malformed UTF-8 characters, possibly incorrectly encoded"); break; } } } $this->setToDefault(); return $obj; } public function addClass(&$existing, $classToAdd) {         if (!isset($existing)) { $existing = ''; } if (empty($existing)) { $existing = $classToAdd; } else { $existing .= ' '.$classToAdd; }  } public function get($argument, $default = 0) {         $arguments = func_get_args(); if (count($arguments) > 1) { $default = array_pop($arguments); } foreach ($arguments as $argument) { $hArgumentName = 'h'.ucfirst($argument); if (isset($_GET[$argument])) { return $_GET[$argument]; } else if (isset($_GET[$hArgumentName])) { return $_GET[$hArgumentName]; } } return $default; } public function post($argument, $default = nil) {         $arguments = func_get_args(); if (count($arguments) > 1) { $default = array_pop($arguments); } foreach ($arguments as $argument) { $hArgumentName = 'h'.ucfirst($argument); if (isset($_POST[$argument])) { return $_POST[$argument]; } else if (isset($_POST[$hArgumentName])) { return $_POST[$hArgumentName]; } } return $default; } public function fileUpload($argument, $attribute) { $hArgumentName = 'h'.ucfirst($argument); if (isset($_FILES[$argument])) { $file = $_FILES[$argument]; } else if (isset($_FILES[$hArgumentName])) { $file = $_FILES[$hArgumentName]; } else { return false; } switch ($attribute) { case 'temporaryName': case 'tmp_name': { return $file['tmp_name']; } case 'mime': case 'type': { return $file['type']; } case 'size': { return $file['size']; } } } } ?>