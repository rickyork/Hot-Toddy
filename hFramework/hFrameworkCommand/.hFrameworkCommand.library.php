<?php
  class hFrameworkCommandLibrary extends hPlugin { public function command($command) {          $output = array(); $returnValue = 0; $rtn = ''; $rtn = exec( $command, $output, $returnValue ); if ((int) $returnValue > 0) { $this->verbose( "Command '{$command}' exited with status '{$returnValue}'.", __FILE__, __LINE__ ); } return $rtn; } public function pipeCommand($command, $arguments, $returnPipe = 1, $errorReporting = true) {                             if (is_executable($command)) { $descriptor = array( 0 => array('pipe', 'r'),  1 => array('pipe', 'w'),  2 => array('pipe', 'w')  ); $pipes = array(); $process = proc_open( $command.' '.$arguments, $descriptor, $pipes ); if (is_resource($process)) {      fclose($pipes[0]); $output = stream_get_contents($pipes[1]); fclose($pipes[1]); $stderr = stream_get_contents($pipes[2]); fclose($pipes[2]);   $return = proc_close($process); if ($errorReporting) { if ($stderr) { $this->verbose("Command '{$command}' wrote to stderr:\n".$stderr); } $this->verbose( "Command '{$command}' exited with return value '{$return}'.", __FILE__, __LINE__ ); } } switch ($returnPipe) { case 0: { return $return; } case 2: { return $stderr; } case 1: default: { return $output; } } } else { $this->warning( "Command '{$command}' is not executable.", __FILE__, __LINE__ ); } } public function &rename($source, $destination) {                 if ($this->hFilePHPFunctions(ini_get('safe_mode'))) { if (!rename($source, $destination)) { $this->warning( "Rename failed: {$source} to {$destination}".'.', __FILE__, __LINE__ ); } } else { $this->command('mv '.escapeshellarg($source).' '.escapeshellarg($destination)); } return $this; } public function &mkdir($path) {                 if ($this->hFilePHPFunctions(ini_get('safe_mode'))) { if (!mkdir($path)) { $this->warning('mkdir failed.', __FILE__, __LINE__); } } else { $this->command('mkdir '.escapeshellarg($path)); } return $this; } public function &chmod($path, $mode, $recursive = false) {                       if ($this->hFilePHPFunctions(ini_get('safe_mode'))) { if (!chmod($path, $mode)) { $this->warning('chmod failed.', __FILE__, __LINE__); } } else { $this->command('chmod '.($recursive? '-R ' : '').$mode.' '.escapeshellarg($path)); } return $this; } public function &chown($path, $user, $recursive = false) {                       if ($this->hFilePHPFunctions(ini_get('safe_mode'))) { if (!chown($path, $user)) { $this->warning('chown failed.', __FILE__, __LINE__); } } else { $this->command('chown '.($recursive? '-R ' : '').escapeshellarg($user).' '.escapeshellarg($path)); } return $this; } public function &chgrp($path, $group, $recursive = false) {                       if ($this->hFilePHPFunctions(ini_get('safe_mode'))) { if (!chgrp($path, $group)) { $this->warning('chgrp failed.', __FILE__, __LINE__); } } else { $this->command('chgrp '.($recursive? '-R ' : '').escapeshellarg($group).' '.escapeshellarg($path)); } return $this; } public function &touch($path) {                 if ($this->hFilePHPFunctions(ini_get('safe_mode'))) { if (!touch($path)) { $this->warning('touch failed.', __FILE__, __LINE__); } } else { $this->command('touch '.escapeshellarg($path)); } return $this; } public function &copy($source, $destination, $isFolder = false) {                   if ($this->hFilePHPFunctions(ini_get('safe_mode'))) { if (!copy($source, $destination)) { $this->warning("Copy failed: {$source} to {$destination}", __FILE__, __LINE__); } } else { $this->command('cp -'.($isFolder? 'Rf' : 'f').' '.escapeshellarg($source).' '.escapeshellarg($destination)); } return $this; } public function &move($source, $destination) {                 if ($this->hFilePHPFunctions(ini_get('safe_mode'))) { if (!rename($source, $destination)) { $this->warning("Copy failed: {$source} to {$destination}", __FILE__, __LINE__); } } else { $this->command('mv -f '.escapeshellarg($source).' '.escapeshellarg($destination)); } return $this; } public function getMIMEType($path) {           $result = $this->command('file --mime-type '.escapeshellarg($path)); $result = explode(':', $result); return trim(array_pop($result)); } public function hot($arguments) {          $string = ''; if (is_array($arguments)) { foreach ($arguments as &$argument) { $argument = escapeshellarg($argument); } $string = implode(' ', $arguments); } else { $string = $arguments; } $php = escapeshellarg($this->hFrameworkPathToPHP('/usr/bin/php')); $frameworkPath = escapeshellarg($this->hFrameworkPath.'/hot'); return `{$php} {$frameworkPath} {$string}`; } public function &rm($path, $isFile = false) {                   if ($this->hFilePHPFunctions(ini_get('safe_mode'))) { if ($isFile) { if (!unlink($path)) { $this->warning("Delete file failed: {$path}", __FILE__, __LINE__); } } else if (!rmdir($path)) { $this->warning("Delete directory failed: {$path}", __FILE__, __LINE__); } } else { $this->command('rm -f'.($isFile? '' : 'r').' '.escapeshellarg($path)); } return $this; } } ?>