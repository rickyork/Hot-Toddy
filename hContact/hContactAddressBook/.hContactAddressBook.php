<?php
  interface hContactApplication { public function getSearchColumns(); } class hContactAddressBook extends hPlugin implements hContactApplication { private $hContactAddressBookName; private $hSpotlightSearch; public function hConstructor() {        $this->hSpotlightSearch = $this->library('hSpotlight/hSpotlightSearch'); $this->getSearchColumns(); $this->hSpotlightSearch->setColumnSelected( 'hContacts', 'hContactId' ); } public function &getAddressBookPlugin($plugin) {        $this->hContactAll = false; if (!empty($plugin)) { return $this->plugin($plugin); } else if ($this->inGroup('Contact Administrators')) { $this->hContactAll = true;   return $this->plugin('hContact/hContactAll'); } else {  return $this->plugin('hContact/hContactMine'); } } public function &setAddressBookName($addressBookName) {        $this->hContactAddressBookName = $addressBookName; return $this; } public function getMenus() {        return array( $this->hContactAddressBookName => array( 'Preferences', '-', 'Close' ), 'File' => array( 'New Contact', 'Open Contact', '-', 'Save', 'Save As...', '-', 'Import', 'Export', '-', 'Print' ), 'Edit' => array( 'Selected Contact', 'Variables', '-', 'Delete' ), 'View' => array( 'Contact Information', '-', 'Notes', 'Variables' ) ); } public function &getSearchColumns() {        $this->hSpotlightSearch ->addTable( 'hContacts', 'Contact Information' ) ->defineJoinColumns('hContactId') ->addAdvancedColumns( array( 'hContactId' => 'Contact Id', 'hUserId' => 'User Id' ) ) ->addDefaultColumns( array( 'hContactFirstName' => 'First Name', 'hContactLastName' => 'Last Name' ) ) ->addAdvancedColumns( array( 'hContactDisplayName' => 'Display Name', 'hContactNickName' => 'Nick Name', 'hContactWebsite' => 'Website' ) ) ->addDefaultColumns( array( 'hContactCompany' => 'Company', 'hContactTitle' => 'Title', 'hContactDepartment' => 'Department' ) ) ->addTable( 'hContactInternetAccounts', 'Internet Accounts' ) ->addAdvancedColumns( array( 'hContactId' => 'Contact Id', 'hContactInternetAccountId' => 'Internet Account Id', 'hContactFieldId' => 'Field Id', 'hContactInternetAccount' => 'Online Account (AIM, Yahoo!, Windows Messenger, etc)' ) ) ->addTable( 'hContactPhoneNumbers', 'Phone Numbers' ) ->addAdvancedColumns( array( 'hContactId' => 'Contact Id', 'hContactPhoneNumberId' => 'Phone Number Id', 'hContactFieldId' => 'Field Id', 'hContactPhoneNumber' => 'Phone Number' ) ) ->addTable( 'hContactEmailAddresses', 'Email Addresses' ) ->addAdvancedColumns( array( 'hContactId' => 'Contact Id', 'hContactEmailAddressId' => 'Email Address Id (Address Book)', 'hContactFieldId' => 'Field Id', 'hContactEmailAddress' => 'Email Address (Address Book)' ) ) ->addTable( 'hContactAddresses', 'Addresses' ) ->addAdvancedColumns( array( 'hContactId' => 'Contact Id', 'hContactAddressId' => 'Address Id', 'hContactFieldId' => 'Field Id', 'hContactAddressStreet' => 'Street', 'hContactAddressCity' => 'City', 'hLocationStateId' => 'State', 'hContactAddressPostalCode' => 'Postal Code', 'hLocationCountryId' => 'Country', 'hContactAddressLatitude' => 'Latitude', 'hContactAddressLongitude' => 'Longitude', 'hContactAddressIsDefault' => 'Default Address' ) ) ->addTable( 'hContactVariables', 'Contact Variables' ) ->addAdvancedColumns( array( 'hContactId' => 'Contact Id', 'hContactVariable' => 'Variable', 'hContactValue' => 'Value' ) ); return $this; } public function &query($search, &$where, $time, &$results) { $this->hSpotlightSearch->query( 'hContacts', $search, $where, $time, '`hContacts`.`hUserId`', 'hContactId', $results ); return $this; } public function getResultsHTML($results) {         $html = ''; if (isset($results['key'])) { unset($results['key']); } return $this->getTemplate( 'Results', array( 'results' => $this->hDatabase->getResultsForTemplate($results) ) ); } } ?>