<?php
  class hContactValidationLibrary extends hPlugin { private $countryId; private $phoneNumberTemplate; private $tollFreeAreaCodes = array( 800, 822, 833, 844, 855, 866, 877, 880, 881, 882, 888 ); public function isPhoneNumber($phoneNumber) {                                                                                                              if (!empty($phoneNumber)) { $pattern = $this->getPhoneValidationPattern(); if (!empty($pattern)) { return preg_match($pattern, $phoneNumber); } } return true; } public function getPhoneValidationPattern($pattern = true) {                    if (!empty($this->countryId)) { switch ($this->countryId) {  case 223:  case 38:  case 7:  case 9:  case 16:  case 19:  case 24:  case 231:  case 40:  case 59:  case 60:  case 86:  case 106:  case 143:  case 172:  case 178:  case 179:  case 180:  case 213:  case 217:  case 232:  {  return $pattern? '/^\+{0,1}1{0,1}\s{0,1}\(\d{3}\)\s{0,1}\d{3}\-{1}\d{4}$/' : '(XXX) XXX-XXXX'; } } } return false; } public function parsePhoneNumber($phoneNumber) {                               if (!empty($phoneNumber)) { $matches = array(); preg_match_all('/\d+/', $phoneNumber, $matches); if ($matches && is_array($matches) && isset($matches[0]) && isset($matches[0][0])) { $numbers = str_split(implode('', $matches[0])); foreach ($numbers as &$digit) { $digit = (int) $digit; } return $numbers; } } return array(); } public function isTollFree($phoneNumber = nil, $tollFreeAreaCodes = array()) {                 return ( $this->hasAreaCode( $phoneNumber, $tollFreeAreaCodes? $tollFreeAreaCodes : $this->tollFreeAreaCodes ) ); } private function &castNumbers(&$numbers) {        if (isset($numbers) && is_array($numbers) && count($numbers)) { foreach ($numbers as &$digit) { $digit = (int) $digit; } } return $this; } public function hasAreaCode($phoneNumber, $areaCodes = array()) {          if (!is_array($areaCodes) && !empty($areaCodes)) { $areaCodes = array($areaCodes); } $this->castNumbers($areaCodes); $numbers = $this->parsePhoneNumber($phoneNumber); if (count($numbers) == 11 && $numbers[0] == 1) { array_shift($numbers); } if (count($numbers) == 10) { $phoneNumberAreaCode = $numbers[0].$numbers[1].$numbers[3]; foreach ($areaCodes as $areaCode) { if ($phoneNumberAreaCode == $areaCode) { return true; } } } return false; } public function &setPhoneNumberTemplate($template) { $this->phoneNumberTemplate = $template; return $this; } public function &formatPhoneNumber(&$phoneNumber, $template = '1 (___) ___-____') { if ($this->phoneNumberTemplate) { $template = $this->phoneNumberTemplate; }                       if (empty($phoneNumber)) {  $phoneNumber = ''; return $this; }   $numbers = $this->parsePhoneNumber($phoneNumber); if (count($numbers)) { if (count($numbers) < 10) {    return $this; } if (!empty($this->countryId)) { switch ($this->countryId) {  case 223:  case 38:  case 7:  case 9:  case 16:  case 19:  case 24:  case 231:  case 40:  case 59:  case 60:  case 86:  case 106:  case 143:  case 172:  case 178:  case 179:  case 180:  case 213:  case 217:  case 232:  { $phoneNumber = $this->formatCountryPrefixOneNumber($numbers, $template); break; } } } else { $phoneNumber = $this->formatCountryPrefixOneNumber($numbers, $template); } } return $this; } private function formatCountryPrefixOneNumber(array $numbers, $template) {                              $phoneNumber = ''; if (is_array($numbers)) { if (count($numbers) == 11 && $numbers[0] == 1) { array_shift($numbers); } if (count($numbers) == 10) { foreach ($numbers as $number) {  $template = preg_replace('/\_/', $number, $template, 1); } $phoneNumber = $template; } } return $phoneNumber; } public function getFormattedPhoneNumber($phoneNumber, $template = '1 (___) ___-____') {                    $this->formatPhoneNumber($phoneNumber, $template); return $phoneNumber; } public function setCountryId(&$countryId) {                    if (isset($countryId)) { $this->countryId = $countryId; } return $this; } public function isFieldId($contactFieldId, $frameworkResourceId) {             return $this->hContactFields->selectExists( 'hContactFieldId', array( 'hContactFieldId' => (int) $contactFieldId, 'hFrameworkResourceId' => (int) $frameworkResourceId ) ); } } ?>