<?php
  class hContactDirectoryLibrary extends hPlugin { private $hLocation; private $keyMap = array( 'hContactFirstName' => 'FirstName', 'hContactLastName' => 'LastName', 'hContactDisplayName' => 'RealName', 'hContactCompany' => 'Company', 'hContactTitle' => 'JobTitle', 'hContactDepartment' => 'Department' ); private $addressMap = array( 'hContactAddressStreet' => 'Street', 'hContactAddressCity' => 'City', 'hLocationStateId' => 'State', 'hContactAddressPostalCode' => 'PostalCode' ); private $emailMap = array( 20 => 'EMailAddress' ); private $phoneMap = array( 6 => 'PhoneNumber', 5 => 'MobileNumber', 9 => 'FAXNumber', 10 => 'PagerNumber' ); private $enabledFields = array(); private $userName = nil; public function hConstructor() {  if (!$this->hContactDirectoryAdministratorUser(nil)) { $this->warning( "No administrator username is set.", __FILE__, __LINE__ ); } if (!$this->hContactDirectoryAdministratorPassword(nil)) { $this->warning( "No administrator password is set.", __FILE__, __LINE__ ); } if (is_array($this->hContactDirectoryEnabledFields)) { $this->enabledFields = $this->hContactDirectoryEnabledFields; } $this->hLocation = $this->library('hLocation'); } public function setUser($user, $overrideCheck = false) {               if (!$overrideCheck) { $userId = $this->user->getUserId($user); if (!$this->user->isDirectoryUser($userId)) { $this->userName = ''; return; } } $this->userName = hString::entitiesToUTF8($user, false); } public function userSet() {        return !empty($this->userName); } public function isEnabled($key) {                     if (is_array($this->enabledFields) && count($this->enabledFields)) { return in_array($key, $this->enabledFields); } return true; } public function &save(array $contact) {         if (empty($this->userName)) { return; } foreach ($contact as $key => $value) { if (isset($this->keyMap[$key]) && $this->isEnabled($key)) { $this->saveKey($this->keyMap[$key], $value); } } return $this; } public function &saveAddress(array $contactAddress, $contactFieldId) {         if ($contactFieldId == 2) { foreach ($contactAddress as $key => $value) { if (isset($this->addressMap[$key]) && $this->isEnabled($key)) { if ($key == 'hLocationStateId') { $value = $this->hLocation->getStateName($value); } $this->saveKey($this->addressMap[$key], $value); } } } return $this; } public function &saveEmailAddress($contactEmailAddress, $contactFieldId) {        foreach ($this->emailMap as $key => $value) { if ($contactFieldId == $key && $this->isEnabled('hContactEmailAddress')) { $this->saveKey($value, $contactEmailAddress); } } return $this; } public function &savePhoneNumber($contactPhoneNumber, $contactFieldId) {        foreach ($this->phoneMap as $key => $value) { $fieldName = ''; switch ($value) { case 'PhoneNumber': { $fieldName = 'hContactPhoneNumber'; break; } case 'MobileNumber': { $fieldName = 'hContactPhoneNumberMobile'; break; } case 'FAXNumber': { $fieldName = 'hContactPhoneNumberFax'; break; } case 'PagerNumber': { $fieldName = 'hContactPhoneNumberPager'; break; } } if ($contactFieldId == $key && $this->isEnabled($fieldName)) { $this->saveKey($value, $contactPhoneNumber); } } return $this; } public function &saveKey($key, $value) {        $value = hString::entitiesToUTF8($value, false); $existingValue = $this->getKey($key, false); if (empty($value)) { $result = $this->pipeCommand( '/usr/bin/dscl', '-u '.escapeshellarg($this->hContactDirectoryAdministratorUser(nil)).' '. '-P '.escapeshellarg($this->hContactDirectoryAdministratorPassword(nil)).' '. escapeshellarg($this->hContactDirectoryPath('.')).' '. '-delete '.escapeshellarg('/Users/'.$this->userName).' '.$key, 1, false ); } else { if (!$existingValue) { $result = $this->pipeCommand( '/usr/bin/dscl', '-u '.escapeshellarg($this->hContactDirectoryAdministratorUser(nil)).' '. '-P '.escapeshellarg($this->hContactDirectoryAdministratorPassword(nil)).' '. escapeshellarg($this->hContactDirectoryPath('.')).' '. '-merge '.escapeshellarg('/Users/'.$this->userName).' '.$key.' '.escapeshellarg($value), 1, false ); } else { $result = $this->pipeCommand( '/usr/bin/dscl', '-u '.escapeshellarg($this->hContactDirectoryAdministratorUser(nil)).' '. '-P '.escapeshellarg($this->hContactDirectoryAdministratorPassword(nil)).' '. escapeshellarg($this->hContactDirectoryPath('.')).' '. '-change '.escapeshellarg('/Users/'.$this->userName).' '.$key.' '.escapeshellarg($existingValue).' '.escapeshellarg($value), 1, false ); } } return $this; } public function getName() {        return $this->getKey('RealName'); } public function getPhoto() {  } public function getFirstName() {        return $this->getKey('FirstName'); } public function getLastName() {        return $this->getKey('LastName'); } public function getEmailAddress() {        return $this->getKey('EMailAddress'); } public function getTitle() {        return $this->getKey('JobTitle'); } public function getCompany() {        return $this->getKey('Company'); } public function getPhoneNumber() {        return $this->getKey('PhoneNumber'); } public function getMobileNumber() {        return $this->getKey('MobileNumber'); } public function getFaxNumber() {        return $this->getKey('FAXNumber'); } public function getPagerNumber() {        return $this->getKey('PagerNumber'); } public function getDepartment() {        return $this->getKey('Department'); } public function getStreet() {        return $this->getKey('Street'); } public function getCity() {        return $this->getKey('City'); } public function getState() {        return $this->hLocation->getStateId(223, $this->getKey('State')); } public function getCountry() {         $country = $this->getKey('Country'); if (!$country) { $country = 'US'; } return $this->hLocation->getCountryId($country); } public function getPostalCode() {        return $this->getKey('PostalCode'); } public function getRecordNames() {         $recordNames = $this->getKey('RecordName'); if (strstr($recordNames, "\n")) { return explode("\n", $recordNames); } else { return explode(" ", $recordNames); } } public function getKey($key, $encodeResult = true) {          $result = $this->pipeCommand( '/usr/bin/dscl', ($this->hContactDirectoryAdministratorUser(nil)? '-u '.escapeshellarg($this->hContactDirectoryAdministratorUser(nil)).' ' : ''). ($this->hContactDirectoryAdministratorPassword(nil)? '-P '.escapeshellarg($this->hContactDirectoryAdministratorPassword(nil)).' ' : ''). escapeshellarg($this->hContactDirectoryPath('.')).' '. '-read '.escapeshellarg('/Users/'.$this->userName).' '.$key, 1, false ); $result = strstr($result, 'No such key:')? '' : trim(substr($result, strlen($key.':'))); return $encodeResult? hString::encodeHTML($result) : $result; } } ?>