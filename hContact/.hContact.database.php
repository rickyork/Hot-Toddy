<?php
  class hContactDatabase extends hPlugin { private $hContactValidation; private $hForm; private $hContactEmailAddress; private $hContactDirectory; private $hMap; private $contactId = 0; private $contactAddressId = 0; private $duplicateFields = true; public function hConstructor() {                  $this->hContactValidation = $this->library('hContact/hContactValidation'); $this->hMap = $this->library('hMap'); if ($this->hContactDirectoryEnabled(false) && $this->hContactDatabaseSyncDirectory(true)) { $this->hContactDirectory = $this->library('hContact/hContactDirectory'); } } public function getAddressBookId($addressBook) {       return $this->hContactAddressBooks->selectColumn( 'hContactAddressBookId', array( 'hContactAddressBookName' => $addressBook ) ); } public function addressBookExists($addressBook) {       return $this->hContactAddressBooks->selectExists( 'hContactAddressBookId', array( 'hContactAddressBookName' => $addressBook ) ); } public function &setForm(hFormLibrary &$form) {       $this->hForm = &$form; return $this; } public function &setContactId($contactId) {         $this->contactId = (int) $contactId; return $this; } public function &setContactAddressId($contactAddressId) {         $this->contactAddressId = (int) $contactAddressId; return $this; } public function getContactId() {         return $this->contactId; } public function getContactAddressId() {         return $this->contactAddressId; } public function saveContact($columns, $contactAddressBookId, $userId, $contactId = 0) {         return $this->save( $columns, $contactAddressBookId, $userId, $contactId ); } public function save($columns, $contactAddressBookId, $userId, $contactId = 0) {                                                                             $this->checkArgument($columns, 'is_array') ->checkArgument($contactAddressBookId, '!empty') ->checkArgument($userId, '!empty'); $this->hContactAddressBooks->modifyResource($contactAddressBookId); if (!isset($columns['hContactDisplayName']) && !empty($columns['hContactFirstName']) && !empty($columns['hContactLastName'])) { $columns['hContactDisplayName'] = $columns['hContactFirstName'].' '.$columns['hContactLastName']; } if (empty($contactId)) { $columns['hContactCreated'] = time(); } $this->contactId = $this->hContacts->save( array_merge( $columns, array( 'hContactAddressBookId' => (int) $contactAddressBookId, 'hContactId' => $contactId, 'hUserId' => (int) $userId, 'hContactLastModified' => time() ) ) ); if (is_object($this->hContactDirectory) && $contactAddressBookId == 1) { $this->hContactDirectory->setUser( $this->user->getUserName($userId) ); $this->hContactDirectory->save($columns); } if (!empty($this->contactId)) { $this->modifyAddressBookByContactId($this->contactId); } $this->contact->setId($this->contactId); $this->hContacts->modifyResource($this->contactId); return $this->contactId; } public function &setDuplicateFields($duplicateFields) {               $this->duplicateFields = $duplicateFields; return $this; } public function saveAddress($columns, $contactFieldId = 2, $contactAddressId = 0, $contactId = 0) {                                                                                                                  if (!empty($contactId)) { $this->setContactId($contactId); } if (!empty($this->contactId)) { $this->modifyAddressBookByContactId($this->contactId); } $query = $this->hContactAddresses->selectQuery( 'hContactAddressId', array_merge( array( 'hContactId' => (int) $this->contactId, 'hContactFieldId' => (int) $contactFieldId ), $this->duplicateFields? array( 'hContactAddressStreet' => trim($columns['hContactAddressStreet']), 'hContactAddressCity' => trim($columns['hContactAddressCity']), 'hLocationStateId' => (int) $columns['hLocationStateId'], 'hContactAddressPostalCode' => trim($columns['hContactAddressPostalCode']), 'hLocationCountryId' => (int) $columns['hLocationCountryId'] ) : array() ) ); $this->getMergedColumns( $columns, 'hContactAddresses', $query, $contactAddressId, $contactFieldId ); if (is_object($this->hContactDirectory) && $this->hContactDirectory->userSet()) { $this->hContactDirectory->saveAddress( $columns, $contactFieldId ); } $contactAddressId = $this->hContactAddresses->save($columns); if ($this->hMapEnableGeocode(true)) { $this->hMap->getAddressCoordinates($contactAddressId); } $this->hContactAddresses->modifyResource($contactAddressId); $this->hContacts->modifyResource($this->contactId); $this->setContactAddressId($contactAddressId); return $contactAddressId; } public function saveHomeAddress($columns, $contactAddressId = 0, $contactId = 0) {        return $this->saveAddress($columns, 1, $contactAddressId, $contactId); } public function saveWorkAddress($columns, $contactAddressId = 0, $contactId = 0) {        return $this->saveAddress($columns, 2, $contactAddressId, $contactId); } public function saveOtherAddress($columns, $contactAddressId = 0, $contactId = 0) {        return $this->saveAddress($columns, 3, $contactAddressId, $contactId); } public function deleteAddress($contactAddressId) {              $contactId = $this->hContactAddresses->selectColumn( 'hContactId', $contactInternetAccountId ); $contactAddressBookId = $this->hContacts->selectColumn( 'hContactAddressBookId', $contactId ); $this->hContactAddressBooks->modifyResource($contactAddressBookId); $this->hContacts->modifyResource($contactId); $this->hContactAddresses->modifyResource(); return $this->hContactAddresses->delete('hContactAddressId', $contactAddressId); } public function &deleteAddresses($contactId) {        $this->hContactAddresses->delete('hContactId', $contactId); return $this; } public function savePhoneNumber($columns, $contactFieldId = 6, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {                                                                                                                                                if (!empty($contactId)) { $this->setContactId($contactId); } if (!empty($contactAddressId)) { $this->setContactAddressId($contactAddressId); } if (!empty($this->contactId)) { $this->modifyAddressBookByContactId($this->contactId); } if (!is_array($columns)) { $columns = array( 'hContactPhoneNumber' => trim($columns) ); } $query = $this->queryFieldId( 'hContactPhoneNumbers', $columns['hContactPhoneNumber'], $contactFieldId ); $this->getMergedColumns( $columns, 'hContactPhoneNumbers', $query, $contactPhoneNumberId, $contactFieldId ); if (is_object($this->hContactDirectory) && $this->hContactDirectory->userSet()) { $this->hContactDirectory->savePhoneNumber( $columns['hContactPhoneNumber'], $contactFieldId ); } $contactPhoneNumberId = $this->hContactPhoneNumbers->save($columns); $this->hContactPhoneNumbers->modifyResource($contactPhoneNumberId); $this->hContacts->modifyResource($this->contactId); return $contactPhoneNumberId; } public function saveHomeNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 4, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveMobileNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 5, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveWorkNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 6, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveExtensionNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 7, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveCompanyNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 8, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveFaxNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 9, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function savePagerNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 10, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveMainNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 22, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveTollFreeNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 23, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveAppointmentsNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 24, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveSchedulingNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 47, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveiPhoneNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 25, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveHomeFaxNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 26, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveWorkFaxNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 27, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveOtherFaxNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 28, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function saveOtherNumber($contactPhoneNumber, $contactPhoneNumberId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->savePhoneNumber( $contactPhoneNumber, 11, (int) $contactPhoneNumberId, (int) $contactId, (int) $contactAddressId ); } public function deletePhoneNumber($contactPhoneNumberId) {             $contactId = $this->hContactPhoneNumbers->selectColumn( 'hContactId', $contactPhoneNumberId ); $contactAddressBookId = $this->hContacts->selectColumn( 'hContactAddressBookId', $contactId ); $this->hContactAddressBooks->modifyResource($contactAddressBookId); $this->hContacts->modifyResource($contactId); $this->hContactPhoneNumbers->modifyResource(); return $this->hContactPhoneNumbers->delete( 'hContactPhoneNumberId', $contactPhoneNumberId ); } public function &deletePhoneNumbers($contactId) {         $this->hContactPhoneNumbers->delete( 'hContactId', $contactId ); return $this; } public function saveInternetAccount($columns, $contactFieldId, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {                                                                                                                                                          if (!empty($contactId)) { $this->setContactId($contactId); } if (!empty($contactAddressId)) { $this->setContactAddressId($contactAddressId); } if (!empty($this->contactId)) { $this->modifyAddressBookByContactId($this->contactId); } if (!is_array($columns)) { $columns = array( 'hContactInternetAccount' => trim($columns) ); } $query = $this->queryFieldId( 'hContactInternetAccounts', $columns['hContactInternetAccount'], $contactFieldId ); $this->getMergedColumns( $columns, 'hContactInternetAccounts', $query, $contactInternetAccountId, $contactFieldId ); $contactInternetAccountId = $this->hContactInternetAccounts->save($columns); $this->hContactInternetAccounts->modifyResource($contactInternetAccountId); $this->hContacts->modifyResource($this->contactId); return $contactInternetAccountId; } public function saveAppleIdAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 30, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveiMessagesAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 31, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveiCloudAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 32, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveGameCenterAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 33, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveiTunesAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 34, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveMacAppStoreAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 35, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveFacebookAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 29, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveWindowsLiveAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 36, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveWindowsAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 36, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveGoogleAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 42, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveAolAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 12, $contactInternetAccountId, $contactId, $contactAddressId ); } public function savePlaystationAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 45, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveXboxAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 46, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveYahooAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 13, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveICQAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 15, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveiChatAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 16, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveJabberAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 17, $contactInternetAccountId, $contactId, $contactAddressId ); } public function saveOtherAccount($contactInternetAccount, $contactInternetAccountId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveInternetAccount( $contactInternetAccount, 18, $contactInternetAccountId, $contactId, $contactAddressId ); } public function deleteInternetAccount($contactInternetAccountId) {          $contactId = $this->hContactInternetAccounts->selectColumn( 'hContactId', $contactInternetAccountId ); $contactAddressBookId = $this->hContacts->selectColumn( 'hContactAddressBookId', $contactId ); $this->hContactAddressBooks->modifyResource($contactAddressBookId); $this->hContacts->modifyResource($contactId); $this->hContactInternetAccounts->modifyResource(); return $this->hContactInternetAccounts->delete( 'hContactInternetAccountId', $contactInternetAccountId ); } public function &deleteInternetAccounts($contactId) {        $this->hContactInternetAccounts->delete('hContactId', $contactId); return $this; } public function saveEmailAddress($columns, $contactFieldId = 19, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {                                                                                                                  if (!empty($contactId)) { $this->setContactId($contactId); } if (!empty($contactAddressId)) { $this->setContactAddressId($contactAddressId); } if (!empty($this->contactId)) { $this->modifyAddressBookByContactId($this->contactId); } if (!is_array($columns)) { $columns = array( 'hContactEmailAddress' => trim($columns) ); } $query = $this->queryFieldId( 'hContactEmailAddresses', $columns['hContactEmailAddress'], $contactFieldId ); $this->getMergedColumns( $columns, 'hContactEmailAddresses', $query, $contactEmailAddressId, $contactFieldId ); if (is_object($this->hContactDirectory) && $this->hContactDirectory->userSet()) { $this->hContactDirectory->saveEmailAddress( $columns['hContactEmailAddress'], $contactFieldId ); } $contactEmailAddressId = $this->hContactEmailAddresses->save($columns); $this->hContactEmailAddresses->modifyResource($contactEmailAddressId); $this->hContacts->modifyResource($this->contactId); return $contactEmailAddressId; } public function savePersonalEmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 19, $contactEmailAddressId, $contactId, $contactAddressId ); } public function saveWorkEmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 20, $contactEmailAddressId, $contactId, $contactAddressId ); } public function saveFacebookEmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 37, $contactEmailAddressId, $contactId, $contactAddressId ); } public function saveGmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 38, $contactEmailAddressId, $contactId, $contactAddressId ); } public function saveHotmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 39, $contactEmailAddressId, $contactId, $contactAddressId ); } public function saveWindowsLiveEmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 40, $contactEmailAddressId, $contactId, $contactAddressId ); } public function saveiCloudEmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 41, $contactEmailAddressId, $contactId, $contactAddressId ); } public function saveMicrosoftExchangeEmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 43, $contactEmailAddressId, $contactId, $contactAddressId ); } public function saveAolEmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 44, $contactEmailAddressId, $contactId, $contactAddressId ); } public function saveOtherEmail($contactEmailAddress, $contactEmailAddressId = 0, $contactId = 0, $contactAddressId = 0) {        return $this->saveEmailAddress( $contactEmailAddress, 21, $contactEmailAddressId, $contactId, $contactAddressId ); } public function deleteEmailAddress($contactEmailAddressId) {          $contactId = $this->hContactEmailAddresses->selectColumn( 'hContactId', $contactEmailAddressId ); $contactAddressBookId = $this->hContacts->selectColumn( 'hContactAddressBookId', $contactId ); $this->hContactAddressBooks->modifyResource($contactAddressBookId); $this->hContacts->modifyResource($contactId); $this->hContactEmailAddresses->modifyResource(); return $this->hContactEmailAddresses->delete( 'hContactEmailAddressId', $contactEmailAddressId ); } public function &deleteEmailAddresses($contactId) {        $this->hContactEmailAddresses->delete( 'hContactId', $contactId ); return $this; } private function &getMergedColumns(&$columns, $table, $query, $contactColumnId, $contactFieldId) {         if (empty($contactColumnId)) { $contactColumnId = $this->hDatabase->getColumn($query); } $this->validateFieldId($table, $contactFieldId); $columns['hContactId'] = $this->contactId; if ($table != 'hContactAddresses') { $columns['hContactAddressId'] = $this->contactAddressId; } $columns['hContactFieldId'] = $contactFieldId; $columns[preg_replace('/s$|es$/', 'Id', $table)] = (int) $contactColumnId; return $this; } private function queryFieldId($table, $data, $contactFieldId) {                          $fields = array(); if ($this->duplicateFields) { $fields[preg_replace('/s$|es$/', '', $table)] = $data; } if (!empty($this->contactAddressId)) { $fields['hContactAddressId'] = $this->contactAddressId; } return $this->$table->selectQuery( preg_replace('/s$|es$/', '', $table).'Id', array_merge( array( 'hContactId' => (int) $this->contactId, 'hContactFieldId' => (int) $contactFieldId ), $fields ) ); } public function &validateFieldId($table, $contactFieldId) {           if (!$this->hContactValidation->isFieldId($contactFieldId, $this->getResourceId($table))) { $this->warning('Field Id, '.$contactFieldId.', is not valid for resource, '.$table.'.', __FILE__, __LINE__); } return $this; } public function saveAddressBook($columns) {                                        $userId = 0; if (isset($columns['hUserId'])) { $userId = (int) $columns['hUserId']; } $contactAddressBookId = 0; if (isset($columns['hContactAddressBookId'])) { $contactAddressBookId = (int) $columns['hContactAddressBookId']; } if (empty($contactAddressBookId) && empty($userId)) { $userId = $this->isLoggedIn()? (int) $_SESSION['hUserId'] : 1; } $data = array('hContactAddressBookId' => $contactAddressBookId); if (isset($columns['hContactAddressBookName'])) { $data['hContactAddressBookName'] = $columns['hContactAddressBookName']; } if (!empty($userId)) { $data['hUserId'] = $userId; } if (isset($columns['hPlugin'])) { $data['hPlugin'] = $columns['hPlugin']; } if (isset($columns['hContactAddressBookIsDefault'])) { $data['hContactAddressBookIsDefault'] = (int) $columns['hContactAddressBookIsDefault']; } if (empty($contactAddressBookId)) { $columns['hContactAddressBookCreated'] = time(); } $contactAddressBookId = $this->hContactAddressBooks->save($data); $this->hContactAddressBooks->modifyResource($contactAddressBookId); return $contactAddressBookId; } public function getAddressBook($contactAddressBookId) {         return $this->hContactAddressBooks->selectAssociative( array( 'hContactAddressBookName', 'hPlugin' ), (int) $contactAddressBookId ); } public function &saveVariable($contactId, $contactVariable, $contactValue) {          $this->modifyAddressBookByContactId($contactId); $this->hContacts->modifyResource($contactId); $this->hContactVariables->delete( array( 'hContactId' => (int) $contactId, 'hContactVariable' => $contactVariable ) ); $this->hContactVariables->insert( array( 'hContactId' => (int) $contactId, 'hContactVariable' => $contactVariable, 'hContactValue' => $contactValue ) ); return $this; } public function getContactIdByEmailAddress($contactEmailAddress, $contactAddressBookId = 1) {         return $this->hDatabase->selectColumn( array( 'hContacts' => 'hContactId' ), array( 'hContacts', 'hContactAddressBooks', 'hContactEmailAddresses' ), array( 'hContacts.hContactAddressBookId' => 'hContactAddressBooks.hContactAddressBookId', 'hContactAddressBooks.hContactAddressBookId' => (int) $contactAddressBookId, 'hContacts.hContactId' => 'hContactEmailAddresses.hContactId', 'hContactEmailAddresses.hContactEmailAddress' => $contactEmailAddress ) ); } public function getContactIdByUserId($userId = 0, $contactAddressBookId = 1) {          $this->user ->setNumericUserId($userId) ->whichUserId($userId); return $this->hContacts->selectColumn( 'hContactId', array( 'hContactAddressBookId' => (int) $contactAddressBookId, 'hUserId' => (int) $userId ) ); } public function getContactsByState($locationStateId, $contactAddressBookId = 1) {          return $this->hDatabase->selectResults( array( 'DISTINCT', 'hContacts' => 'hContactId' ), array( 'hContactAddresses', 'hContacts' ), array( 'hContactAddresses.hContactId' => 'hContacts.hContactId', 'hContacts.hContactAddressBookId' => (int) $contactAddressBookId, 'hContactAddresses.hLocationStateId' => (int) $locationStateId ) ); } public function chown($userId = 0, $contactId = 0) {          $this->user ->setNumericUserId($userId) ->whichUserId($userId); $this->whichContactId($contactId)->modifyAddressBookByContactId($contactId); $this->hContacts->modifyResource($contactId); return $this->hContacts->update( array('hUserId' => (int) $userId), (int) $contactId ); } public function &modifyAddressBookByContactId($contactId = 0) {          $this->whichContactId($contactId) ->hContactAddressBooks ->modifyResource( $this->hContacts->selectColumn( 'hContactAddressBookId', (int) $contactId ) ); return $this; } public function &saveFile($fileId, $contactId = 0, $fileCategoryId = 1, $isProfilePhoto = true, $isDefaultProfilePhoto = true) {          $this->whichContactId($contactId) ->modifyAddressBookByContactId($contactId); $this->hContacts->modifyResource($contactId); $exists = $this->hContactFiles->selectExists( 'hFileId', array( 'hContactId' => (int) $contactId, 'hFileId' => (int) $fileId ) ); if ($exists) { $this->hContactFiles->update( array( 'hContactFileCategoryId' => (int) $fileCategoryId, 'hContactIsProfilePhoto' => (int) $isProfilePhoto, 'hContactIsDefaultProfilePhoto' => (int) $isDefaultProfilePhoto ), array( 'hContactId' => (int) $contactId, 'hFileId' => (int) $fileId ) ); } else { $this->hContactFiles->insert( array( 'hContactId' => (int) $contactId, 'hFileId' => (int) $fileId, 'hContactFileCategoryId' => (int) $fileCategoryId, 'hContactIsProfilePhoto' => (int) $isProfilePhoto, 'hContactIsDefaultProfilePhoto' => (int) $isDefaultProfilePhoto ) ); } return $this; } public function &delete($contactId = 0) {                                     $this ->whichContactId($contactId) ->modifyAddressBookByContactId($contactId) ->hDatabase ->delete( array( 'hContactFiles', 'hContactAddresses', 'hContactEmailAddresses', 'hContactInternetAccounts', 'hContactPhoneNumbers', 'hContactUsers', 'hContactVariables', 'hContacts' ), 'hContactId', $contactId ); return $this; } public function getFieldLabel($contactFieldId) {          return $this->hContactFields->selectColumn( 'hContactField', (int) $contactFieldId ); } public function getFieldsForTemplate($frameworkResourceId, $contactFieldId = 0) {               $this->numericResourceId($frameworkResourceId); $query = $this->hContactFields->select( array( 'hContactFieldId', 'hContactField' ), array( 'hFrameworkResourceId' => (int) $frameworkResourceId ), 'AND', 'hContactFieldSortIndex' ); $results = array(); foreach ($query as $data) { $results['hContactFieldId'][] = $data['hContactFieldId']; $results['hContactFieldLabel'][] = $data['hContactField']; $results['hContactFieldIsSelected'][] = ($contactFieldId == $data['hContactFieldId']); } return $results; } public function getFields($frameworkResourceId) {                                                                                                                                                                                                                                                 $this->numericResourceId($frameworkResourceId); return $this->hContactFields->selectColumnsAsKeyValue( array( 'hContactFieldId', 'hContactField' ), array( 'hFrameworkResourceId' => (int) $frameworkResourceId ), 'AND', 'hContactFieldSortIndex' ); } public function getAddressesNearZipCode($locationZipCode, $radius = 10, $contactAddressBookId = 1, $limit = 3) {                $fence = $this->hMap->getZipCodeGeofence($locationZipCode);         return array( 'contacts' => $this->hDatabase->getResults( $this->getTemplateSQL( array_merge( $fence, array( 'contactAddressBookId' => $contactAddressBookId, 'limit' => $limit ) ) ) ), 'latitude' => $fence['latitude'], 'longitude' => $fence['longitude'] ); } public function &whichContactId(&$contactId) {          $contactId = !empty($contactId)? $contactId : $this->contactId; return $this; } } ?>