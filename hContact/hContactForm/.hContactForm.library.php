<?php
  interface hContactFormTitle { public function setForm(hFormLibrary &$form); public function setTitle(); } class hContactFormLibrary extends hPlugin { private $hForm; private $hContactId; private $hContactValidation; private $hLocationValidation; private $hContactDatabase; private $hUserValidation; private $hContactFormTitle; private $hContactFormCompany; private $addressFieldId = 2; private $phoneFieldId = 6; private $companyFieldId = 8; private $appointmentFieldId = 24; private $tollFreeFieldId = 23; private $mainFieldId = 22; private $faxFieldId = 9; private $mobileFieldId = 5; private $pagerFieldId = 10; private $emailFieldId = 19; private $schedulingFieldId = 47; private $duplicateFields = false; private $contactFormExists = false; private $defaultEmail = false; private $callLog = array(); private $methods = array( 'hContactFirstName' => array( 'method' => 'getFirstName', 'options' => array( 'label' => 'First Name:', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify your first name.' ) ), 'hContactMiddleName' => array( 'method' => 'getMiddleName', 'options' => array( 'label' => 'Middle Name:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify your middle name.' ) ), 'hContactLastName' => array( 'method' => 'getLastName', 'options' => array( 'label' => 'Last Name:', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify your last name.' ) ), 'hContactCompany' => array( 'method' => 'getCompany', 'options' => array( 'label' => 'Company:', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify your company.' ) ), 'hContactDepartment' => array( 'method' => 'getDepartment', 'options' => array( 'label' => 'Department:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify a department.' ) ), 'hContactWebsite' => array( 'method' => 'getWebsite', 'options' => array( 'label' => 'Website:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify a website.' ) ), 'hContactTitle' => array( 'method' => 'getTitle', 'options' => array( 'label' => 'Title:', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify your title.' ) ), 'hContactEmailAddress' => array( 'method' => 'getEmailAddress', 'options' => array( 'label' => 'Email Address:', 'required' => true, 'enabled' => false, 'requiredError' => 'You did not specify your email address.' ) ), 'hLocationCountryId' => array( 'method' => 'getCountry', 'options' => array( 'label' => '', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify your country.' ) ), 'hContactAddressStreet' => array( 'method' => 'getStreetAddress', 'options' => array( 'label' => 'Street:', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify your street address.' ) ), 'hContactAddressCity' => array( 'method' => 'getCity', 'options' => array( 'label' => 'City:', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify a city.' ) ), 'hLocationStateId' => array( 'method' => 'getState', 'options' => array( 'label' => '', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify a {$label}.' ) ), 'hContactAddressPostalCode' => array( 'method' => 'getPostalCode', 'options' => array( 'label' => 'Postal Code:', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify your postal code.' ) ), 'hLocationCountyId' => array( 'method' => 'getCounty', 'options' => array( 'label' => 'County:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify your county.' ) ), 'hContactPhoneNumber' => array( 'method' => 'getPhoneNumber', 'options' => array( 'label' => 'Phone Number:', 'required' => true, 'enabled' => true, 'requiredError' => 'You did not specify a phone number.' ) ), 'hContactPhoneNumberCompany' => array( 'method' => 'getCompanyNumber', 'options' => array( 'label' => 'Company Phone Number:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify a company phone number.' ) ), 'hContactPhoneNumberFax' => array( 'method' => 'getFaxNumber', 'options' => array( 'label' => 'Fax:', 'required' => false, 'enabled' => true, 'requiredError' => 'You did not specify a fax number.' ) ), 'hContactPhoneNumberAppointment' => array( 'method' => 'getAppointmentNumber', 'options' => array( 'label' => 'Appointment:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify an appointment number.' ) ), 'hContactPhoneNumberTollFree' => array( 'method' => 'getTollFreeNumber', 'options' => array( 'label' => 'Toll Free:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify a toll free number.' ) ), 'hContactPhoneNumberMain' => array( 'method' => 'getMainNumber', 'options' => array( 'label' => 'Main Number:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify a main number.' ) ), 'hContactPhoneNumberScheduling' => array( 'method' => 'getSchedulingNumber', 'options' => array( 'label' => 'Scheduling Number:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify a scheduling number.' ) ), 'hContactGender' => array( 'method' => 'getGender', 'options' => array( 'label' => 'Gender:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify your gender.' ) ), 'hContactDateOfBirth' => array( 'method' => 'getDateOfBirth', 'options' => array( 'label' => 'Date of Birth:', 'required' => false, 'enabled' => false, 'requiredError' => 'You did not specify your date of birth.' ) ) ); private $countryFieldExecuted = false; private $addressFields = array( 'hLocationCountryId', 'hContactAddressStreet', 'hContactAddressCity', 'hLocationStateId', 'hContactAddressPostalCode' ); public function hConstructor() {       $this->hContactValidation = $this->library('hContact/hContactValidation'); $this->hLocationValidation = $this->library('hLocation/hLocationValidation'); $this->hUserValidation = $this->library('hUser/hUserValidation'); $this->hForm = $this->library('hForm'); $this->getPluginFiles(); } public function setDefaultEmail($defaultEmail) {                     $this->defaultEmail = $defaultEmail; } public function &setForm(hFormLibrary &$form) {       $this->hForm = &$form; return $this; } public function &setAddressFieldId($addressFieldId) {       $this->addressFieldId = $addressFieldId; return $this; } public function &setPhoneFieldId($phoneFieldId) {       $this->phoneFieldId = $phoneFieldId; return $this; } public function &setFaxFieldId($faxFieldId) {       $this->faxFieldId = $faxFieldId; return $this; } public function &setEmailFieldId($emailFieldId) {       $this->emailFieldId = $emailFieldId; return $this; } public function &setDuplicateFields($duplicateFields) {       $this->duplicateFields = $duplicateFields; return $this; } public function &setContactId($contactId = 0) { if (empty($contactId)) { $contactId = $this->user->getContactId(); } $this->hContactId = (int) $contactId; return $this; } public function saveContactForm($userId = 0, $contactAddressBookId = 1, $uniqueByEmailAddress = false, array $fieldNames = array()) {        return $this->save($userId, $contactAddressBookId, $uniqueByEmailAddress, $fieldNames); } public function save($userId = 0, $contactAddressBookId = 1, $uniqueByEmailAddress = false, array $fieldNames = array()) {            if (!count($fieldNames)) { if ($this->contactFormExists) { $fieldNames = $this->hForm->getFieldNames(); } else {   $this->hForm = $this->library('hForm'); $this->hForm->addDiv('hContactForm'); $this->addContactForm($uniqueByEmailAddress); $form = $this->hForm->getForm(); $fieldNames = $this->hForm->getFieldNames(); } } $this->user->whichUserId($userId); $this->hContactDatabase = $this->database('hContact'); $this->hContactDatabase->setDuplicateFields($this->duplicateFields); if (!isset($_POST['hContactDisplayName']) && isset($_POST['hContactFirstName']) && isset($_POST['hContactLastName'])) { $_POST['hContactDisplayName'] = $_POST['hContactFirstName'].' '.$_POST['hContactLastName']; } if (isset($_POST['hContactDateOfBirth'])) { $_POST['hContactDateOfBirth'] = strtotime($_POST['hContactDateOfBirth']); } if (isset($_POST['hContactGender'])) { if ($_POST['hContactGender'] == 1)  { $_POST['hContactGender'] = 0;  } else if ($_POST['hContactGender'] == 2) { $_POST['hContactGender'] = 1;  } }   if ($uniqueByEmailAddress) { $contactId = $this->hContactDatabase->getContactIdByEmailAddress( $_POST['hContactEmailAddress'], $contactAddressBookId ); } else if (!empty($userId) && $contactAddressBookId == 1) { $contactId = $this->hContactDatabase->getContactIdByUserId( $userId, $contactAddressBookId ); } else if ($contactAddressBookId > 1 && !empty($this->hContactId)) { $contactId = $this->hContactId; } else { $contactId = 0; } array_push($fieldNames, 'hContactDisplayName'); $contactId = $this->hContactDatabase->saveContact( $this->hDatabase->getPostDataByColumnName('hContacts', $fieldNames), $contactAddressBookId, $userId, $contactId ); $addressFieldsAreSet = ( isset($_POST['hContactAddressStreet']) || isset($_POST['hContactAddressCity']) || isset($_POST['hLocationStateId']) || isset($_POST['hContactAddressPostalCode']) || isset($_POST['hLocationCountryId']) ); if ($addressFieldsAreSet) { $this->hContactDatabase->saveAddress( $this->hDatabase->getPostDataByColumnName( 'hContactAddresses', $fieldNames ), $this->addressFieldId ); } if (isset($_POST['hContactPhoneNumber'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactPhoneNumber'], $this->phoneFieldId ); } if (isset($_POST['hContactFaxNumber'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactFaxNumber'], $this->faxFieldId ); } if (isset($_POST['hContactPhoneNumberFax'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactPhoneNumberFax'], $this->faxFieldId ); } if (isset($_POST['hContactPhoneNumberCompany'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactPhoneNumberCompany'], $this->companyFieldId ); } if (isset($_POST['hContactPhoneNumberMobile'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactPhoneNumberMobile'], $this->mobileFieldId ); } if (isset($_POST['hContactPhoneNumberPager'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactPhoneNumberPager'], $this->pagerFieldId ); } if (isset($_POST['hContactPhoneNumberAppointment'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactPhoneNumberAppointment'], $this->appointmentFieldId ); } if (isset($_POST['hContactPhoneNumberMain'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactPhoneNumberMain'], $this->mainFieldId ); } if (isset($_POST['hContactPhoneNumberTollFree'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactPhoneNumberTollFree'], $this->tollFreeFieldId ); } if (isset($_POST['hContactPhoneNumberScheduling'])) { $this->hContactDatabase->savePhoneNumber( $_POST['hContactPhoneNumberScheduling'], $this->schedulingFieldId ); } if (isset($_POST['hContactEmailAddress'])) { $this->hContactDatabase->saveEmailAddress( $_POST['hContactEmailAddress'], $this->emailFieldId ); } $this->setContactId($contactId); return $contactId; } /**
    * Return an array that has all of the fields of the contact form set,
    * in the same format as the $_POST array.
    */ public function getContactData($setPost = false) {                                                                                                                                                          $contact = $this->contact->getRecord($this->hContactId? $this->hContactId : 0); foreach ($contact['hContactAddresses'] as $contactAddressId => $address) { if ($address['hContactFieldId'] == $this->addressFieldId) { $contact = array_merge($address, $contact); } } if (count($contact['hContactPhoneNumbers']) == 1) { foreach ($contact['hContactPhoneNumbers'] as $contactPhoneNumberId => $number) { $contact['hContactPhoneNumber'] = $number['hContactPhoneNumber']; break; } } else { foreach ($contact['hContactPhoneNumbers'] as $contactPhoneNumberId => $number) { switch ($number['hContactFieldId']) { case $this->phoneFieldId: { $contact['hContactPhoneNumber'] = $number['hContactPhoneNumber']; break; } case $this->faxFieldId: { $contact['hContactFaxNumber'] = $number['hContactPhoneNumber']; $contact['hContactPhoneNumberFax'] = $number['hContactPhoneNumber']; break; } case $this->mobileFieldId: { $contact['hContactPhoneNumberMobile'] = $number['hContactPhoneNumber']; break; } case $this->pagerFieldId: { $contact['hContactPhoneNumberPager'] = $number['hContactPhoneNumber']; break; } case $this->schedulingFieldId: { $contact['hContactPhoneNumberScheduling'] = $number['hContactPhoneNumber']; break; } } } } if (count($contact['hContactEmailAddresses'])) { foreach ($contact['hContactEmailAddresses'] as $contactEmailAddressId => $address) { if (!empty($address)) { $contact['hContactEmailAddress'] = $address['hContactEmailAddress']; break; } } } else if ($contact['hContactAddressBookId'] == 1 || $this->defaultEmail) { $contact['hContactEmailAddress'] = $this->user->getUserEmail( $this->contact->getUserId($this->hContactId) ); } if ($setPost) { $_POST = $contact; } return $contact; } public function &setLayout() {          $arguments = func_get_args(); $this->hContactFormLayout = (isset($arguments[0]) && is_array($arguments[0])) ? $arguments[0] : $arguments; return $this; } public function &createForm($fieldset = 'Contact Information', $id = 'hContactForm') {        return $this->getForm($fieldset, $id); } public function &getForm($fieldset = 'Contact Information', $id = 'hContactForm') {                $this->contactFormExists = true; if (!$this->hContactFormLayout) { $this->hContactFormLayout = array( 'hContactFirstName', 'hContactMiddleName', 'hContactLastName', 'hContactCompany', 'hContactWebsite', 'hContactTitle', 'hContactEmailAddress', 'hLocationCountryId', 'hContactAddressStreet', 'hContactAddressCity', 'hLocationStateId', 'hContactAddressPostalCode', 'hContactPhoneNumber', 'hContactPhoneNumberFax', 'hContactGender', 'hContactDateOfBirth' ); } $form = &$this->hForm; $this->hContactValidation->setCountryId($_POST['hLocationCountryId']); $this->hLocationValidation ->setCountryId($_POST['hLocationCountryId']) ->setStateId($_POST['hLocationStateId']) ->setPostalCode($_POST['hContactAddressPostalCode']); $form->addFieldset( $fieldset, '100%', $this->hContactFormLabelColumnWidth('175px').',auto', $id ); if ($this->hContactFormPrependData(nil)) { $form->addData('', $this->hContactFormPrependLabel, $this->hContactFormPrependData); } foreach ($this->hContactFormLayout as $field => $data) { if (!is_numeric($field) && $field == 'hContactFaxNumber') { $field = 'hContactPhoneNumberFax'; } else if (is_numeric($field) && $data == 'hContactFaxNumber') { $data = 'hContactPhoneNumberFax'; } if (is_numeric($field)) { if (in_array($data, $this->addressFields) && !$this->hContactFormEnableAddress(true)) { continue; } $method = $this->methods[$data]['method']; if (method_exists($this, $method)) { $label = $this->getLabel( $method, $this->methods[$data]['options']['label'], $bullocks );  $isEnabled = $this->isEnabled( $method, $this->methods[$data]['options']['enabled'], $asdf ); $isRequired = $this->isRequired( $method, $this->methods[$data]['options']['required'], $bullocks ); $requiredError = $this->getRequiredError( $method, $this->methods[$data]['options']['requiredError'], $bullocks ); if (!$isEnabled) { continue; } if ($isRequired) { $this->hForm->addRequiredField($requiredError); } $this->$method($label); } else { $this->warning( 'Contact form method, '.$method.', does not exist.', __FILE__, __LINE__ ); } } else { if (is_array($data)) { $callback = nil; $method = nil; $options = array(); foreach ($data as $key => $value) { switch (true) { case is_object($value): { $callback = $value; break; } case !is_numeric($key): { $options[$key] = $value; break; } default: { $method = $value; } } }  $arguments = array(); $isEnabled = true; $isRequired = false; $requiredError = ''; if (isset($this->methods[$field]['method'])) { $method = $this->methods[$field]['method']; $arguments[0] = $this->getLabel( $method, $this->methods[$field]['options']['label'], $options['label'] ); $isEnabled = $this->isEnabled( $method, $this->methods[$field]['options']['enabled'], $options['enabled'] ); $isRequired = $this->isRequired( $method, $this->methods[$field]['options']['required'], $options['required'] ); $requiredError = $this->getRequiredError( $method, $this->methods[$field]['options']['requiredError'], $options['requiredError'] ); if ($method == 'getCountry') { $arguments[1] = $isEnabled; } else { if (!$isEnabled) { continue; } } } else { if (!empty($options['enabled'])) { continue; } $isRequired = isset($options['required']) ? $options['required'] : false; $requiredError = isset($options['requiredError']) ? $options['requiredError'] : ''; } if (!empty($isRequired) && !empty($requiredError)) { $this->hForm->addRequiredField($requiredError); } if (!empty($options['appendInput'])) { $this->hForm->setVariable( 'hFormAppendInput', $options['appendInput'] ); } if (!empty($options['prependInput'])) { $this->hForm->setVariable( 'hFormPrependInput', $options['prependInput'] ); } if (is_object($callback) && !empty($method)) { $className = get_class($callback); if (!isset($this->callLog[$className])) { $this->callLog[$className] = array(); } if (!isset($this->callLog[$className][$method])) { $this->callLog[$className][$method] = true; call_user_func_array( array( $callback, $method ), $arguments ); } } else { call_user_func_array( array($this, $method), $arguments ); } unset($options); } } } if (!$this->countryFieldExecuted) { $this->getCountry('', false); } return $this; } private function getOption($variable, $method, $default, &$option) {      if (isset($option)) { return $option; } $variable = str_replace( '{$name}', str_replace('get', '', $method), $variable ); return $this->$variable($default); } private function getLabel($method, $default, &$option) {       return $this->getOption( 'hContactForm{$name}Label', $method, $default, $option ); } private function isRequired($method, $default, &$option) {       return $this->getOption( 'hContactFormRequire{$name}', $method, $default, $option ); } private function getRequiredError($method, $default, &$option) {      return $this->getOption( 'hContactFormRequire{$name}Error', $method, $default, $option ); } private function isEnabled($method, $default, &$option) {      return $this->getOption( 'hContactFormEnable{$name}', $method, $default, $option ); } public function &addContactForm($email = true, $fieldset = 'Contact Information', $id = 'hContactForm') { $this->hContactFormEnableEmailAddress = $email; $this->getForm($fieldset, $id); return $this; } public function &getFirstName($label = 'F:First Name:') {      $this->hForm ->addValidationByComparison( 'Your first name must be entered in 100 characters or less.', '<=', 100 ) ->addTextInput( 'hContactFirstName', $label, '25,100' ); return $this; } public function &getMiddleName($label = 'M:Middle Name:') {      $this->hForm ->addValidationByComparison( 'Your middle name must be entered in 100 characters or less.', '<=', 100 ) ->addTextInput( 'hContactMiddleName', $label, '25,100' ); return $this; } public function &getLastName($label = 'L:Last Name:') {      $this->hForm ->addValidationByComparison( 'Your last name must be entered in 100 characters or less.', '<=', 100 ) ->addTextInput( 'hContactLastName', $label, '25,100' ); return $this; } public function &getCompany($label = 'o:Company:') {      if ($this->hContactFormCompanyPlugin(nil)) {   $this->hContactFormCompany = $this->plugin($this->hContactFormCompanyPlugin(nil)); $this->hContactFormCompany->setForm($this->hForm); $this->hContactFormCompany->setCompany(); } else { $this->hForm ->addValidationByComparison( 'Your company must be entered in 200 characters or less.', '<=', 200 ) ->addTextInput( 'hContactCompany', $label, '25,200' ); } return $this; } public function &getWebsite($label = 'W:Website:') {      $this->hForm ->addValidationByComparison( 'Your website must be entered in 255 characters or less.', '<=', 255 ) ->addURLInput( 'hContactWebsite', $label, '25,255', !isset($_POST['hContactWebsite']) ? 'http://' : '' ); return $this; } public function &getDepartment($label = 'D:Department:') {      $this->hForm ->addValidationByComparison( 'Your department must be entered in 100 characters or less.', '<=', 100 ) ->addTextInput( 'hContactDepartment', $label, '25,100' ); return $this; } public function &getTitle($label = 'T:Title:') {         if ($this->hContactFormTitlePlugin(nil)) {   $this->hContactFormTitle = $this->plugin($this->hContactFormTitlePlugin(nil)); $this->hContactFormTitle->setForm($this->hForm); $this->hContactFormTitle->setTitle(); } else { $this->hForm ->addValidationByComparison( 'Your job title must be entered in 100 characters or less.', '<=', 100 ) ->addTextInput( 'hContactTitle', $label, '50,100' ); } return $this; } public function &getEmailAddress($label = 'l:Email Address:') {      $this->hForm ->addValidationByComparison( 'Your email address must be entered in 255 characters or less.', '<=', 255 ) ->addValidationByCallback( 'The email address you entered is not valid.', $this->hUserValidation, 'isValidEmailAddress' ) ->addEmailInput( 'hContactEmailAddress', $label, '25,255' ); return $this; } public function &getCounty($label = '', $enabled = false) {     $this->hForm->addSelectInput( 'hLocationCountyId', $label, array() ); return $this; } public function &getCountry($label = '', $enabled = true) {     $this->countryFieldExecuted = true; $this->hForm ->addValidationByCallback( 'You did not specify a valid country.', $this->hLocationValidation, 'isCountryId' ) ->defineCell( array( 'id' => 'hContactFormCountryInput' ) ); if ($enabled) { if (!empty($_POST['hLocationCountryId'])) { $iso2 = $this->hDatabase->selectColumn( 'hLocationCountryISO2', 'hLocationCountries', (int) $_POST['hLocationCountryId'] ); } else { $iso2 = $this->hContactFormDefaultCountryISO2('us'); } $this->hForm ->setCellAttributes( array( 'id' => 'hLocationCountryIdCell' ) ) ->addSelectCountry( 'hLocationCountryId', !empty($label) ? $label : $this->getTemplate( 'Country Label', array( 'iso2' => strtolower($iso2) ) ), 1, isset($_POST['hLocationCountryId']) ? $_POST['hLocationCountryId'] : $this->hContactFormDefaultCountryId(223) ); } else { $this->hForm->addHiddenInput( 'hLocationCountryId', $this->hContactFormDefaultCountryId(223) ); } return $this; } public function &getStreetAddress($label = 'S:Street Address: -L') {     if ($this->hContactFormAddressStreetInputType == 'text') { $this->hForm->addTextInput( 'hContactAddressStreet', $label, '35,250' ); } else { $this->hForm->addTextareaInput( 'hContactAddressStreet', $label, '35,2' ); } return $this; } public function &getCity($label = 'y:City:') {      $this->hForm ->addValidationByComparison( 'Your city must be entered in 100 characters or less.', '<=', 100 ) ->addTextInput( 'hContactAddressCity', $label, '25,100' ); return $this; } public function &getState($label = '') {      if (empty($label)) { if (!empty($_POST['hLocationCountryId'])) { $label = $this->hLocationCountries->selectColumn( 'hLocationStateLabel', (int) $_POST['hLocationCountryId'] ); } else { $label = 'State'; } $label .= ':'; }  $this->hForm ->addValidationByCallback( 'The '.strtolower($label).' you specified is not valid for the country you specified.', $this->hLocationValidation, 'isStateId' ) ->defineLabelCell( array( 'id' => 'hContactFormStateLabel' ) ) ->addSelectState( 'hLocationStateId', $label, !empty($_POST['hLocationCountryId']) ? $_POST['hLocationCountryId'] : $this->hContactFormDefaultCountryId(223), 1 ); return $this; } public function &getPostalCode($label = 'P:Postal Code:') {       $this->hForm ->addValidationByComparison( 'Your postal code must be entered in 15 characters or less.', '<=', 15 ) ->addValidationByCallback( 'The postal code you entered is not valid for the country you selected.', $this->hLocationValidation, 'isPostalCode' ) ->addTextInput( 'hContactAddressPostalCode', $label, '15,15' ); return $this; } public function &getPhoneNumber($label = 'p:Telephone:') {      if ($this->hContactPhoneNumberStrictFormat(false)) { $this->hForm->addValidationByCallback( 'Please specify your phone number in the format of '. '<b>'.$this->hContactValidation->getPhoneValidationPattern(false).'</b>.', $this->hContactValidation, 'isPhoneNumber' ); } $this->hForm ->addValidationByComparison( 'Your phone number must be entered in 255 characters or less.', '<=', 255 ) ->addPhoneInput( 'hContactPhoneNumber', $label, '20,255' ); return $this; } public function &getCompanyNumber($label = 'x:Company Phone Number:') {      $this->hForm ->addValidationByCallback( 'Please specify your company number in the format of '. '<b>'.$this->hContactValidation->getPhoneValidationPattern(false).'</b>.', $this->hContactValidation, 'isPhoneNumber' ) ->addValidationByComparison( 'The company phone number must be entered in 255 characters or less.', '<=', 255 ) ->addTextInput( 'hContactPhoneNumberCompany', $label, '20,255' ); return $this; } public function &getAppointmentNumber($label = 'x:Appointment:') {      $this->hForm ->addValidationByCallback( 'Please specify your appointment number in the format of '. '<b>'.$this->hContactValidation->getPhoneValidationPattern(false).'</b>.', $this->hContactValidation, 'isPhoneNumber' ) ->addValidationByComparison( 'The appointment phone number must be entered in 255 characters or less.', '<=', 255 ) ->addTextInput( 'hContactPhoneNumberAppointment', $label, '20,255' ); return $this; } public function &getTollFreeNumber($label = 'x:Toll Free:') {      $this->hForm ->addValidationByCallback( 'Please specify your toll free number in the format of '. '<b>'.$this->hContactValidation->getPhoneValidationPattern(false).'</b>.', $this->hContactValidation, 'isPhoneNumber' ) ->addValidationByComparison( 'The toll-free number must be entered in 255 characters or less.', '<=', 255 ) ->addTextInput( 'hContactPhoneNumberTollFree', $label, '20,255' ); return $this; } public function &getMainNumber($label = 'n:Main Phone Number:') {      $this->hForm ->addValidationByCallback( 'Please specify your main number in the format of '. '<b>'.$this->hContactValidation->getPhoneValidationPattern(false).'</b>.', $this->hContactValidation, 'isPhoneNumber' ) ->addValidationByComparison( 'The main phone number must be entered in 255 characters or less.', '<=', 255 ) ->addTextInput( 'hContactPhoneNumberMain', $label, '20,255' ); return $this; } public function &getSchedulingNumber($label = 'u:Scheduling Phone Number:') {      $this->hForm ->addValidationByCallback( 'Please specify your scheduling number in the format of '. '<b>'.$this->hContactValidation->getPhoneValidationPattern(false).'</b>.', $this->hContactValidation, 'isPhoneNumber' ) ->addValidationByComparison( 'The scheduling phone number must be entered in 255 characters or less.', '<=', 255 ) ->addTextInput( 'hContactPhoneNumberScheduling', $label, '20,255' ); return $this; } public function &getFaxNumber($label = 'x:Fax:') {      $this->hForm ->addValidationByCallback( 'Please specify your fax number in the format of '. '<b>'.$this->hContactValidation->getPhoneValidationPattern(false).'</b>.', $this->hContactValidation, 'isPhoneNumber' ) ->addValidationByComparison( 'The fax number must be entered in 255 characters or less.', '<=', 255 ) ->addTextInput( 'hContactPhoneNumberFax', $label, '20,255' ); return $this; } public function &getGender($label = 'Gender:') {      $this->hForm ->setVariable( 'hFormBlockWrapper', false ) ->addRadioInput( 'hContactGender', $label, array( 1 => 'Female', 2 => 'Male' ) ); return $this; } public function &getDateOfBirth($label = 'Date of Birth:') {      $this->jQuery('Datepicker'); $this->hForm->addTextInput( 'hContactDateOfBirth', $label, '10,10' ); return $this; } public function getCoreMetrics($newsletter = nil, $subscribed = nil) { if ($_POST['hLocationCountryId'] == 223) { $registration = array( 'hContactId' => $this->contact->hContactId, 'hContactEmailAddress' => $_POST['hContactEmailAddress'], 'hContactAddressCity' => $_POST['hContactAddressCity'], 'hLocationStateCode' => $this->hDatabase->selectColumn( 'hLocationStateCode', 'hLocationStates', (int) $_POST['hLocationStateId'] ), 'hContactAddressPostalCode' => $_POST['hContactAddressPostalCode'], 'hLocationCountryName' => $this->hDatabase->selectColumn( 'hLocationCountryName', 'hLocationCountries', (int) $_POST['hLocationCountryId'] ), 'hContactCategory' => $this->getPrivateCategory(), 'hContactTitle' => $_POST['hContactTitle'], 'hContactCompany' => $_POST['hContactTitle'], 'hContactRegistered' => $this->isLoggedIn() ); if ($newsletter != nil) { $registration['newsletterName'] = $newsletter; $registration['newsletterSubscribed'] = $subscribed; } return $this->getRegistrationTag($registration); } else { return ''; } } }  ?>