<?php
  class hContactLibrary extends hPlugin { public $contactId = 0; public $userContactId = 0; private $userPermissions; private $methods = array( 'getHomeNumber', 'getMobileNumber', 'getWorkNumber', 'getExtensionNumber', 'getCompanyNumber', 'getFaxNumber', 'getPagerNumber', 'getOtherNumber', 'getMainNumber', 'getTollFreeNumber', 'getAppointmentNumber', 'getSchedulingNumber', 'getiPhoneNumber', 'getHomeFaxNumber', 'getWorkFaxNumber', 'getOtherFaxNumber' ); public function __call($method, $arguments) { if (in_array($method, $this->methods, true)) { $rtn = ''; $contactFieldId = 0; switch ($method) { case 'getHomeAddress': $contactFieldId = 1; break; case 'getWorkAddress': $contactFieldId = 2; break; case 'getOtherAddress': $contactFieldId = 3; break; case 'getHomeNumber': $contactFieldId = 4; break; case 'getMobileNumber': $contactFieldId = 5; break; case 'getWorkNumber': $contactFieldId = 6; break; case 'getExtensionNumber': $contactFieldId = 7; break; case 'getCompanyNumber': $contactFieldId = 8; break; case 'getFaxNumber': $contactFieldId = 9; break; case 'getPagerNumber': $contactFieldId = 10; break; case 'getOtherNumber': $contactFieldId = 11; break; case 'getMainNumber': $contactFieldId = 22; break; case 'getTollFreeNumber': $contactFieldId = 23; break; case 'getAppointmentNumber': $contactFieldId = 24; break; case 'getSchedulingNumber': $contactFieldId = 47; break; case 'getiPhoneNumber': $contactFieldId = 25; break; case 'getHomeFaxNumber': $contactFieldId = 26; break; case 'getWorkFaxNumber': $contactFieldId = 27; break; case 'getOtherFaxNumber': $contactFieldId = 28; break; case 'getPersonalEmail': $contactFieldId = 19; break; case 'getWorkEmail': $contactFieldId = 20; break; case 'getOtherEmail': $contactFieldId = 21; break; } if (!empty($contactFieldId)) { $contactId = ( !empty($arguments[0]) ? (int) $arguments[0] : $this->user->getContactId() ); $contactAddressId = isset($arguments[1])? (int) $arguments[1] : 0; if (!empty($contactId)) { switch (true) { case stristr($method, 'Number'): { $rtn = $this->getPhoneNumber( $contactId, $contactFieldId, $contactAddressId ); break; } case stristr($method, 'Address'): { $rtn = $this->getAddress( $contactId, $contactFieldId ); break; } case stristr($method, 'Email'): { $rtn = $this->getEmailAddress( $contactId, $contactFieldId, $contactAddressId ); break; } case stristr($method, 'Account'): { $rtn = $this->getInternetAccount( $contactId, $contactFieldId, $contactAddressId ); break; } } return $rtn; } else { $this->warning("Unable to '{$method}' because no contactId was provided.", __FILE__, __LINE__); } } return $rtn; } else { return parent::__call($method, $arguments); } } public function hConstructor() {           $this->hContacts->getColumns(); $this->setContactId(); } public function &setContactId($userId = 0) {         if (empty($userId) && $this->isLoggedIn()) { $userId = (int) $_SESSION['hUserId']; } if (!empty($userId)) { $this->hContactId = $this->user->getContactId($userId); } return $this; } public function getRecordsByEmailAddress($contactEmailAddress = '') {             return $this->getRecords( $this->hContactEmailAddresses->select( 'hContactId', array( 'hContactEmailAddress' => $contactEmailAddress ) ) ); } public function getRecord($contactId = 0, $userId = 0) {            if (empty($userId)) { if (empty($contactId)) { $this->setContactId(); $contactId = $this->hContactId; if (empty($contactId)) { $this->notice('No contact Id could be set.', __FILE__, __LINE__); return $this->getBlankContact(); } } } else { $this->setContactId($userId); $contactId = $this->hContactId; } $record = $this->getRecords(array($contactId)); return $record[$contactId]; } public function userIdToContactId($userId = 0) {             $this->user ->whichUserId($userId) ->setNumericUserId($userId); return (int) $this->hContacts->selectColumn( 'hContactId', array( 'hContactAddressBookId' => 1, 'hUserId' => $userId ) ); } public function getFlatRecord($contactId = 0, $unset = true) { $this->whichContactId($contactId);                                                                                                                 $contact = $this->getRecord($contactId); if (is_array($contact['hContactAddresses']) && count($contact['hContactAddresses'])) { $contactAddressId = 0; foreach ($contact['hContactAddresses'] as $addressId => $address) { if (!empty($address['hContactAddressIsDefault'])) { $contactAddressId = $addressId; break; } } if (!empty($contactAddressId)) { $contact = $contact['hContactAddresses'][$contactAddressId]; } else { $contact = array_merge( $contact, array_shift($contact['hContactAddresses']) ); } } $contact = array_merge($contact, $contact['hContactAddressBook']); unset($contact['hContactAddressBook']); unset($contact['hContactAddresses']); $this->setPhoneNumbers($contact, $unset); $this->setEmailAddresses($contact, $unset); $this->setInternetAccounts($contact, $unset); $variables = $this->getVariables($contactId); foreach ($variables as $variable) { $contact[$variable['hContactVariable']] = $variable['hContactValue']; } return $contact; } public function &setPhoneNumbers(&$contact, $unset = true) {                       $this->setFieldValuesForArray( $contact, 'hContactPhoneNumber', 'hContactPhoneNumbers', $unset ); return $this; } public function &setEmailAddresses(&$contact, $unset = true) {                      $this->setFieldValuesForArray( $contact, 'hContactEmailAddress', 'hContactEmailAddresses', $unset ); return $this; } public function &setInternetAccounts(&$contact, $unset = true) {                      $this->setFieldValuesForArray( $contact, 'hContactInternetAccount', 'hContactInternetAccounts', $unset ); return $this; } private function &setFieldValuesForArray(&$contact, $singular, $plural, $unset = true) {             if (isset($contact[$plural]) && is_array($contact[$plural])) { foreach ($contact[$plural] as $field) { $item = $field[$singular]; if (!isset($contact[$singular])) { $contact[$singular] = $item; } $contact[$this->getFieldLabelForArray($field['hContactFieldId'])] = $item; } if ($unset) { unset($contact[$plural]); } } return $this; } public function getFieldLabelForArray($contactFieldId) {            return ( $this->hFrameworkResources->selectColumn( 'hFrameworkResourceNameColumn', $this->hContactFields->selectColumn( 'hFrameworkResourceId', $contactFieldId ) ). $this->hContactFields->selectColumn( 'hContactFieldName', $contactFieldId ) ); } public function getBlankContact() {           return array( 'hContactAddressBookId' => 0, 'hContactId' => 0, 'hUserId' => 0, 'hContactFirstName' => '', 'hContactMiddleName' => '', 'hContactLastName' => '', 'hContactDisplayName' => '', 'hContactNickName' => '', 'hContactWebsite' => '', 'hContactCompany' => '', 'hContactTitle' => '', 'hContactDepartment' => '', 'hContactGender' => '', 'hContactDateOfBirth' => nil, 'hContactCreated' => nil, 'hContactLastModified' => nil, 'hContactDateOfBirthFormatted' => nil, 'hContactAddresses' => array(), 'hContactAddressBook' => array(), 'hContactEmailAddresses' => array(), 'hContactPhoneNumbers' => array(), 'hContactInternetAccounts' => array(), 'hContactVariables' => array() ); } public function getRecords(array $contactIds = array()) {                                                                                                                                                                                                    if (!count($contactIds)) { $contactIds = array($this->hContactId); } $records = array(); foreach ($contactIds as $contactId) {   $contact = $this->getContact($contactId); $contact[$contactId]['hContactEmailAddresses'] = $this->getEmailAddresses($contactId); $contact[$contactId]['hContactPhoneNumbers'] = $this->getPhoneNumbers($contactId); $contact[$contactId]['hContactInternetAccounts'] = $this->getInternetAccounts($contactId); $contact[$contactId]['hContactAddresses'] = $this->getAddresses($contactId); $contact[$contactId]['hContactAddressBook'] = $this->getAddressBook($contactId); $contact[$contactId]['hContactVariables'] = $this->hContactVariables->select( array( 'hContactVariable', 'hContactValue' ), $contactId ); $records[$contactId] = $contact[$contactId]; } return $records; } public function getUserAddressBookId($userId = 0) {                 $this->user ->whichUserId($userId) ->setNumericUserId($userId); if (!empty($userId)) { $contactAddressBookId = $this->hContactAddressBooks->selectColumn( 'hContactAddressBookId', array( 'hUserId' => (int) $userId, 'hContactAddressBookIsDefault' => 1 ) ); if (!empty($contactAddressBookId)) { return (int) $contactAddressBookId; } else {  $contactAddressBookId = $this->hContactAddressBooks->insert( array( 'hContactAddressBookId' => nil, 'hUserId'=> (int) $userId, 'hContactAddressBookName' => $this->user->getFullName().'&039;s Address Book', 'hPlugin' => '', 'hContactAddressBookIsDefault' => 1 ) ); $this->hUserPermissions = $this->library('hUser/hUserPermissions');  $this->hUserPermissions->save( 'hContactAddressBooks', $contactAddressBookId ); } } else { return 0; } } public function getAddressBook($contactId = 0) { $this->whichContactId($contactId);                        return $this->hContactAddressBooks->selectAssociative( array( 'hContactAddressBookId', 'hContactAddressBookName', 'hContactAddressBookIsDefault' ), (int) $this->getAddressBookId($contactId) ); } public function getAddressBookId($contactId = 0) {          $this->whichContactId($contactId); return (int) $this->hContacts->selectColumn( 'hContactAddressBookId', (int) $contactId ); } public function getUserId($contactId = 0) {          $this->whichContactId($contactId); return (int) $this->hContacts->selectColumn( 'hUserId', (int) $contactId ); } public function getContact($contactId = 0) {                                                                    $this->whichContactId($contactId); $this->hDatabase->setResultIndex('hContactId'); $contacts = $this->hContacts->selectResults( array( 'hContactAddressBookId', 'hContactId', 'hUserId', 'hContactFirstName', 'hContactMiddleName', 'hContactLastName', 'hContactDisplayName', 'hContactNickName', 'hContactWebsite', 'hContactCompany', 'hContactTitle', 'hContactDepartment', 'hContactGender', 'hContactDateOfBirth', 'hContactCreated', 'hContactLastModified' ), (int) $contactId ); foreach ($contacts as $i => &$contact) { $contact['hContactFirstName'] = hString::decodeHTML($contact['hContactFirstName']); $contact['hContactMiddleName'] = hString::decodeHTML($contact['hContactMiddleName']); $contact['hContactLastName'] = hString::decodeHTML($contact['hContactLastName']); $contact['hContactDisplayName'] = hString::decodeHTML($contact['hContactDisplayName']); $contact['hContactNickName'] = hString::decodeHTML($contact['hContactNickName']); $contact['hContactCompany'] = hString::decodeHTML($contact['hContactCompany']); $contact['hContactTitle'] = hString::decodeHTML($contact['hContactTitle']); $contact['hContactDepartment'] = hString::decodeHTML($contact['hContactDepartment']); $contact['hContactGender'] = (int) $contact['hContactGender']; $contact['hContactDateOfBirthFormatted'] = date('m/d/Y', $contact['hContactDateOfBirth']); $contact['hContactCreatedFormatted'] = date('m/d/Y h:i a', $contact['hContactCreated']); $contact['hContactLastModifiedFormatted'] = date('m/d/Y h:i a', $contact['hContactLastModified']); $gender = ''; switch ((int) $contact['hContactGender']) { case -1: { $gender = 'Not Specified'; break; } case 0: { $gender = 'Female'; break; } case 1: { $gender = 'Male'; break; } } $contact['hContactGenderLabel'] = $gender; } return $contacts; } public function getAddresses($contactId = 0) {                                                                                            $this->whichContactId($contactId); $sql = $this->getTemplateSQL( array( 'contactId' => (int) $contactId ) ); return $this->hDatabase->getResults($sql, 'hContactAddressId'); } public function getAddress($contactId = 0, $contactFieldId = 2) { $this->whichContactId($contactId); $sql = $this->getTemplateSQL( 'getAddresses', array( 'contactId' => $contactId, 'contactFieldId' => $contactFieldId ) ); return $this->hDatabase->getAssociativeResults($sql); } public function getEmailAddresses($contactId = 0) {                                  $this->whichContactId($contactId); $data = $this->getData($contactId, 'hContactEmailAddress', 'es'); if ($this->getAddressBookId($contactId) == 1 && !count($data)) { $userId = $this->getUserId($contactId); $data[0] = array( 'hContactEmailAddressId' => -1, 'hContactFieldId' => 20, 'hContactFieldName' => 'Work', 'hContactEmailAddress' => $this->user->getUserEmail($userId) ); } return $data; } public function getEmailAddress($contactId, $contactFieldId = 2, $contactAddressId = 0) {                 return $this->getSingleDataFromArray( 'hContactEmailAddress', 'es', $contactId, $contactFieldId, $contactAddressId ); } public function getPhoneNumbers($contactId = 0) {                             $this->whichContactId($contactId); return $this->getData( $contactId, 'hContactPhoneNumber' ); } public function getPhoneNumber($contactId = 0, $contactFieldId = 6, $contactAddressId = 0) { $this->whichContactId($contactId);               return $this->getSingleDataFromArray( 'hContactPhoneNumber', 's', $contactId, $contactFieldId, $contactAddressId ); } public function getInternetAccounts($contactId = 0) {                             $this->whichContactId($contactId); return $this->getData( $contactId, 'hContactInternetAccount' ); } public function getInternetAccount($contactId = 0, $contactFieldId = 18, $contactAddressId = 0) { $this->whichContactId($contactId);               return $this->getSingleDataFromArray( 'hContactInternetAccount', 's', $contactId, $contactFieldId, $contactAddressId ); } private function getData($contactId = 0, $field = '', $plural = 's') {           $this->whichContactId($contactId); $this->hDatabase->setResultIndex($field.'Id'); $data = $this->hDatabase->selectResults( array( $field.'Id', 'hContactFieldId', $field ), $field.$plural, array( 'hContactId' => (int) $contactId ), 'AND', 'hContactFieldId' ); foreach ($data as $id => $record) { $data[$id]['hContactFieldName'] = $this->getFieldName($data[$id]['hContactFieldId']); } return $data; } private function getSingleDataFromArray($field, $plural, $contactId, $contactFieldId, $contactAddressId) { $table = $field.$plural; if (is_array($contactId)) { if (isset($contactId[$table]) && is_array($contactId[$table])) { foreach ($contactId[$table] as $data) { $condition = (( empty($contactFieldId) || !isset($contactId['hContactFieldId']) || isset($contactId['hContactFieldId']) && $contactFieldId == $contactId['hContactFieldId'] ) && ( empty($contactAddressId) || !isset($contactId['hContactAddressId']) || isset($contactId['hContactAddressId']) && $contactAddressId == $contactId['hContactAddressId'] )); if ($condition) { return $data[$field]; } } } return nil; } else { $where = array( 'hContactId' => $contactId, 'hContactFieldId' => $contactFieldId ); if (!empty($contactAddressId)) { $where['hContactAddressId'] = $contactAddressId; } return $this->$table->selectColumn($field, $where); } } public function getFieldName($contactFieldId) {        return $this->hContactFields->selectColumn( 'hContactField', (int) $contactFieldId ); } public function &setId($contactId) {         $this->hContactId = $contactId; return $this; } public function getVariable($contactVariable, $default = nil, $contactId = 0) {              $this->whichContactId($contactId); $this->hDatabase->setDefaultResult($default); return $this->hContactVariables->selectColumn( 'hContactValue', array( 'hContactId' => (int) $contactId, 'hContactVariable' => $contactVariable ) ); } public function getVariables($contactId = 0) {        $this->whichContactId($contactId); return $this->hContactVariables->select( array( 'hContactVariable', 'hContactValue' ), array( 'hContactId' => (int) $contactId ) ); } public function &whichContactId(&$contactId) {          $contactId = empty($contactId) ? $this->hContactId : (int) $contactId; return $this; } } ?>