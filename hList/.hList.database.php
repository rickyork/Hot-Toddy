<?php
  class hListDatabase extends hPlugin { public function listExists($listName, $listCategoryId = 0) {         return $this->hLists->selectExists( 'hListId', array( 'hListName' => $listName, 'hListCategoryId' => (int) $listCategoryId ) ); } public function getListId($listName, $listCategoryId = 0) {        return $this->hLists->selectColumn( 'hListId', array( 'hListName' => $listName, 'hListCategoryId' => (int) $listCategoryId ) ); } public function save($listId, $listName, $listCategoryId = 0, $listSortIndex = 0) {        return $this->hLists->save( array( 'hListId' => (int) $listId, 'hListName' => $listName, 'hListCategoryId' => (int) $listCategoryId, 'hListSortIndex' => (int) $listSortIndex ) ); } public function getLists($listCategoryId) {        return $this->hLists->selectColumnsAsKeyValue( array( 'hListId', 'hListName' ), array( 'hListCategoryId' => (int) $listCategoryId ), 'AND', 'hListSortIndex' ); } public function getListsForTemplate($listCategoryId = 0, $fileId = 0) {         $this->hDatabase->setPrependResult('');  $productLists = $this->getLists($listCategoryId); $results = array(); foreach ($productLists as $listId => $listName) { $results['hListId'][] = (int) $listId; $results['hListName'][] = $listName; if ($fileId) { $results['hListHasFiles'][] = $this->listHasFiles($listId, $fileId); } } return $results; } public function listHasFiles($listId, $fileId) {         return $this->hListFiles->selectExists( 'hListFileId', array( 'hFileId' => (int) $fileId, 'hListId' => (int) $listId ) ); } public function getListFiles($listId, $fileId) {        return $this->hListFiles->select( array( 'DISTINCT', 'hListFileId' ), array( 'hFileId' => (int) $fileId, 'hListId' => (int) $listId ), 'AND', 'hListFileSortIndex' ); } public function deleteFileLists($fileId, $lists) {         if (is_array($lists)) { foreach ($lists as $listId) { $this->hListFiles->delete( array( 'hListId' => (int) $listId, 'hFileId' => (int) $fileId ) ); } } else { $this->hListFiles->delete( array( 'hListId' => (int) $lists, 'hFileId' => (int) $fileId ) ); } } public function saveFileLists($fileId, array $listFiles) {          $listFileSortIndex = 0; foreach ($listFiles as $listFileId => $listId) { if (!empty($listFileId) && !empty($listId)) { $this->hListFiles->insert( array( 'hFileId' => (int) $fileId, 'hListId' => (int) $listId, 'hListFileId' => (int) $listFileId, 'hListFileSortIndex' => (int) $listFileSortIndex ) ); $listFileSortIndex++; } } } } ?>