<?php
  class hImageGDLibrary extends hPlugin implements hImageInterface {  private $formats = array( 'jpg', 'jpe', 'jpeg', 'gif', 'png' ); private $dimensions = array(); public $hImage; public function hConstructor() { if (!function_exists('imagecreatetruecolor')) { $this->warning('PHP GD extension is not installed.', __FILE__, __LINE__); } } public function getSupportedFormats() { return $this->formats; } public function getDimensions($path) { if (file_exists($path)) { if (!isset($this->dimensions[$path])) { $size = getImageSize($path); $this->dimensions[$path] = array( 'width' => $size[0], 'height' => $size[1] ); } return $this->dimensions[$path]; } else { $this->warning("Unable to retrieve image dimensions because path '{$path}' does not exist.", __FILE__, __LINE__); } } public function resizeImage($sourcePath, $destinationPath, $width, $height, $quality) { $sourceFormat = $this->getExtension($sourcePath); $destinationFormat = $this->getExtension($destinationPath); $destination = imageCreateTrueColor($width, $height); $dimensions = $this->getDimensions($sourcePath); switch ($sourceFormat) { case 'jpeg': case 'jpe': case 'jpg': { $source = imageCreateFromJPEG($sourcePath); break; } case 'png': { $source = imageCreateFromPNG($sourcePath); break; } case 'gif': { $source = imageCreateFromGIF($sourcePath); break; } }   if ($sourceFormat == 'gif' || $sourceFormat == 'png') { $transparency = imageColorTransparent($source);  if ($transparency >= 0) {  $transparentColor = imageColorsForIndex($source, $transparency);  $transparentIndex = imageColorAllocate( $destination, $transparentColor['red'], $transparentColor['green'], $transparentColor['blue'] );  imageFill($destination, 0, 0, $transparentIndex);  imageColorTransparent($destination, $transparentIndex); }  else if ($sourceFormat == 'png') {  imageAlphaBlending($destination, false);  $color = imageColorAllocateAlpha($destination, 0, 0, 0, 127);  imageFill($destination, 0, 0, $color);  imageSaveAlpha($destination, true); } } $this->copyResized($source, $destination, $dimensions, $width, $height); switch ($destinationFormat) { case 'jpeg': case 'jpe': case 'jpg': { imageJPEG($destination, $destinationPath, $quality); break; } case 'png': { imagePNG($destination, $destinationPath); break; } case 'gif': { imageGIF($destination, $destinationPath); break; } } @imageDestroy($source); @imageDestroy($destination); } private function copyResized(&$source, &$destination, $dimensions, $width, $height) { imageCopyResampled( $destination, $source, 0, 0, 0, 0, $width, $height, $dimensions['width'], $dimensions['height'] ); } } ?>