<?php
  class hWYSIWYGFCKEditorLibrary extends hPlugin implements hWYSIWYG { private $width; private $height; private $toolbar; private $stylesheet; private $editors; public function &setDefaultDimensions($width, $height) {          $this->width = $width; $this->height = $height; return $this; } public function &setDefaultToolbar($toolbar) {         $this->toolbar = $toolbar; return $this; } public function setDefaultStylesheet($path) {          $this->stylesheet = $path; } public function addEditor($id, $width = 0, $height = 0, $plugins = array(), $toolbar = '', $css = '', $configuration = '') {         if (empty($width)) { $width = $this->width; } if (empty($height)) { $height = $this->height; } if (empty($toolbar)) { $toolbar = $this->toolbar; } if (empty($css)) { $css = $this->stylesheet; } $this->editors[$id] = array( 'plugins' => $plugins, 'width' => $width, 'height' => $height, 'toolbar' => $toolbar, 'css' => $css, 'configuration' => $configuration ); $this->plugins = array_merge($plugins); array_unique($this->plugins); } private function getEditorsList() {        $editors = array_keys($this->editors); return array_unique($editors); } public function getJavaScript() {        $editors = ''; $space = "                            "; foreach ($this->editors as $id => $config) { $configuration = '/hWYSIWYG/hWYSIWYGFCKEditor/hWYSIWYGFCKEditor.js'; if (!empty($this->editors[$id]['configuration'])) { $configuration = $this->editors[$id]['configuration']; } $editors .= "\n". $space."this.editors['{$id}'] = new FCKeditor('{$id}');\n". $space."this.editors['{$id}'].Config['CustomConfigurationsPath'] = '{$configuration}';\n". $space."this.editors['{$id}'].BasePath = '{$this->hFrameworkLibraryRoot}/fckeditor/';\n"; foreach ($this->editors[$id] as $config => $value) { if (!empty($value)) { switch ($config) { case 'plugins': { break; } case 'width': { $editors .= $space."this.editors['{$id}'].Width = '{$value}';\n"; break; } case 'height': { $editors .= $space."this.editors['{$id}'].Height = '{$value}';\n"; break; } case 'toolbar': { $editors .= $space."this.editors['{$id}'].ToolbarSet = '".$this->getToolbar($value)."';\n"; break; } case 'fullpage': { $editors .= $space."this.editors['{$id}'].FullPage = true;\n"; break; } } } } $editors .= $space."this.editors['{$id}'].ReplaceTextarea();\n"; } return $this->getTemplate( 'WYSIWYG', array( 'editors' => $editors ) ); } public function getToolbar($set = null) {        switch ($set) { case 'minimum': { return 'Basic'; } default: { return $set; } } } } ?>