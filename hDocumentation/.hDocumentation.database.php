<?php
  class hDocumentationDatabase extends hPlugin { public function getMethods($documentationFileId) {          return $this->hDocumentationMethods->selectColumnsAsKeyValue( array( 'hDocumentationMethodId', 'hDocumentationMethodName' ), array( 'hDocumentationFileId' => $documentationFileId ) ); } public function getMethodArguments($methodId) {          return $this->hDocumentationMethodArguments->selectColumnsAsKeyValue( array( 'hDocumentationMethodArgumentId', 'hDocumentationMethodArgumentName' ), array( 'hDocumentationMethodId' => $methodId ) ); } public function getDocumentationFileId($file, $name) {           $documentationFileId = $this->hDocumentationFiles->selectColumn( 'hDocumentationFileId', array( 'hDocumentationFile' => $this->getEndOfPath($file, $this->hFrameworkPath) ) ); if (empty($documentationFileId)) { $documentationFileId = $this->hDocumentationFiles->insert( array( 'hDocumentationFile' => $this->getEndOfPath($file, $this->hFrameworkPath), 'hDocumentationFileTitle' => $name ) ); } return (int) $documentationFileId; } public function saveMethods($file, $documentation) {                                  $documentationFileId = $this->getDocumentationFileId( $file, isset($documentation['name'])? $documentation['name'] : '' ); if ($documentationFileId) { $methods = $this->getMethods($documentationFileId); if (isset($documentation['description'])) { $this->hDocumentationFiles->update( array( 'hDocumentationFileTitle' => isset($documentation['name'])? $documentation['name'] : '', 'hDocumentationFileDescription' => isset($documentation['description'])? hString::escapeAndEncode($documentation['description']) : '', 'hDocumentationFileClosingDescription' => isset($documentation['closingDescription'])? hString::escapeAndEncode($documentation['closingDescription']) : '' ), $documentationFileId ); }                                                                                       foreach ($documentation['methods'] as $methodName => $method) { if (empty($methodName)) { continue; } $methodId = $this->saveMethod( array( 'hDocumentationFileId' => $documentationFileId, 'hDocumentationMethodName' => $methodName, 'hDocumentationMethodSignature' => $method['signature'], 'hDocumentationMethodBody' => $method['body'], 'hDocumentationMethodDescription' => $method['description'], 'hDocumentationMethodIsProtected' => $method['isProtected'], 'hDocumentationMethodIsPrivate' => $method['isPrivate'], 'hDocumentationMethodIsStatic' => $method['isStatic'], 'hDocumentationMethodReturnsReference' => $method['returnsReference'], 'hDocumentationMethodReturnType' => $method['returnType'], 'hDocumentationMethodReturnDescription' => isset($method['returnDescription'])? $method['returnDescription'] : '' ) ); if (isset($method['arguments'])) { $arguments = $this->getMethodArguments($methodId);                                                                               $argumentCounter = 0; foreach ($method['arguments'] as $argumentName => $argument) { $argumentId = $this->saveArgument( array( 'hDocumentationMethodId' => $methodId, 'hDocumentationMethodArgumentIndex' => $argumentCounter, 'hDocumentationMethodArgumentName' => $argumentName, 'hDocumentationMethodArgumentDescription' => $argument['description'], 'hDocumentationMethodArgumentType' => $argument['type'], 'hDocumentationMethodArgumentTypeHint' => $argument['typeHint'], 'hDocumentationMethodArgumentDefault' => $argument['default'], 'hDocumentationMethodArgumentByReference' => $argument['byReference'] ) ); unset($arguments[$argumentId]); $argumentCounter++; }      foreach ($arguments as $argumentId => $argumentName) { $this->deleteArgument($argumentId); } } unset($methods[$methodId]); }      foreach ($methods as $methodId => $methodName) { $this->deleteMethodArguments($methodId); $this->deleteMethod($methodId); }  } } public function saveMethod(Array $columns) {                                                                                                          $methodId = $this->hDocumentationMethods->selectColumn( 'hDocumentationMethodId', array( 'hDocumentationFileId' => (int) $columns['hDocumentationFileId'], 'hDocumentationMethodName' => $columns['hDocumentationMethodName'] ) ); if (empty($methodId)) { $methodId = $this->hDocumentationMethods->insert( array( 'hDocumentationMethodId' => 0, 'hDocumentationFileId' => (int) $columns['hDocumentationFileId'], 'hDocumentationMethodName' => $columns['hDocumentationMethodName'], 'hDocumentationMethodSignature' => hString::escapeAndEncode($columns['hDocumentationMethodSignature']), 'hDocumentationMethodBody' => hString::escapeAndEncode($columns['hDocumentationMethodBody']), 'hDocumentationMethodDescription' => hString::escapeAndEncode($columns['hDocumentationMethodDescription']), 'hDocumentationMethodIsProtected' => $columns['hDocumentationMethodIsProtected']? 1 : 0, 'hDocumentationMethodIsPrivate' => $columns['hDocumentationMethodIsPrivate']? 1 : 0, 'hDocumentationMethodIsStatic' => $columns['hDocumentationMethodIsStatic']? 1 : 0, 'hDocumentationMethodIsOverloaded' => 0, 'hDocumentationMethodReturnsReference' => $columns['hDocumentationMethodReturnsReference']? 1 : 0, 'hDocumentationMethodReturnType' => hString::escapeAndEncode($columns['hDocumentationMethodReturnType']), 'hDocumentationMethodReturnDescription' => isset($columns['hDocumentationMethodReturnDescription'])? hString::escapeAndEncode($columns['hDocumentationMethodReturnDescription']) : '' ) ); } else { $this->hDocumentationMethods->update( array( 'hDocumentationMethodSignature' => hString::escapeAndEncode($columns['hDocumentationMethodSignature']), 'hDocumentationMethodBody' => hString::escapeAndEncode($columns['hDocumentationMethodBody']), 'hDocumentationMethodDescription' => hString::escapeAndEncode($columns['hDocumentationMethodDescription']), 'hDocumentationMethodIsProtected' => $columns['hDocumentationMethodIsProtected']? 1 : 0, 'hDocumentationMethodIsPrivate' => $columns['hDocumentationMethodIsPrivate']? 1 : 0, 'hDocumentationMethodIsStatic' => $columns['hDocumentationMethodIsStatic']? 1 : 0, 'hDocumentationMethodIsOverloaded' => 0, 'hDocumentationMethodReturnsReference' => $columns['hDocumentationMethodReturnsReference']? 1 : 0, 'hDocumentationMethodReturnType' => hString::escapeAndEncode($columns['hDocumentationMethodReturnType']), 'hDocumentationMethodReturnDescription' => isset($columns['hDocumentationMethodReturnDescription'])? hString::escapeAndEncode($columns['hDocumentationMethodReturnDescription']) : '' ), $methodId ); } return (int) $methodId; } public function saveArgument($columns) {                                                                                       $argumentId = $this->hDocumentationMethodArguments->selectColumn( 'hDocumentationMethodArgumentId', array( 'hDocumentationMethodId' => $columns['hDocumentationMethodId'], 'hDocumentationMethodArgumentName' => $columns['hDocumentationMethodArgumentName'] ) ); if (empty($argumentId)) { $argumentId = $this->hDocumentationMethodArguments->insert( array( 'hDocumentationMethodArgumentId' => 0, 'hDocumentationMethodId' => $columns['hDocumentationMethodId'], 'hDocumentationMethodArgumentIndex' => $columns['hDocumentationMethodArgumentIndex'], 'hDocumentationMethodArgumentName' => $columns['hDocumentationMethodArgumentName'], 'hDocumentationMethodArgumentDescription' => hString::escapeAndEncode($columns['hDocumentationMethodArgumentDescription']), 'hDocumentationMethodArgumentType' => empty($columns['hDocumentationMethodArgumentType'])? $columns['hDocumentationMethodArgumentTypeHint'] : $columns['hDocumentationMethodArgumentType'], 'hDocumentationMethodArgumentDefault' => hString::escapeAndEncode($columns['hDocumentationMethodArgumentDefault']), 'hDocumentationMethodArgumentIsOptional' => !empty($columns['hDocumentationMethodArgumentDefault'])? 1 : 0, 'hDocumentationMethodArgumentByReference' => $columns['hDocumentationMethodArgumentByReference']? 1 : 0 ) ); } else { $this->hDocumentationMethodArguments->update( array( 'hDocumentationMethodArgumentIndex' => $columns['hDocumentationMethodArgumentIndex'], 'hDocumentationMethodArgumentDescription' => hString::escapeAndEncode($columns['hDocumentationMethodArgumentDescription']), 'hDocumentationMethodArgumentType' => empty($columns['hDocumentationMethodArgumentType'])? $columns['hDocumentationMethodArgumentTypeHint'] : $columns['hDocumentationMethodArgumentType'], 'hDocumentationMethodArgumentDefault' => hString::escapeAndEncode($columns['hDocumentationMethodArgumentDefault']), 'hDocumentationMethodArgumentIsOptional' => !empty($columns['hDocumentationMethodArgumentIsOptional'])? 1 : 0, 'hDocumentationMethodArgumentByReference' => $columns['hDocumentationMethodArgumentByReference']? 1 : 0 ), $argumentId ); } return (int) $argumentId; } public function deleteMethodArguments($methodId) {            return $this->hDocumentationMethodArguments->delete( 'hDocumentationMethodId', $methodId ); } public function deleteMethod($methodId) {            return $this->hDocumentationMethods->delete( 'hDocumentationMethodId', $methodId ); } public function deleteArgument($argumentId) {            return $this->hDocumentationMethodArguments->delete( 'hDocumentationMethodArgumentId', (int) $argumentId ); } } ?>