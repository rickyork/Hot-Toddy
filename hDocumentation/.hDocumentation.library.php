<?php
  class hDocumentationLibrary extends hPlugin { private $methods = array(); private $objectName; private $createFolders = true; private $createFiles = true; private $files = array(); private $documentationPath; private $hFileUtilities; private $hFileCache; public function hConstructor($options) { } public function getFile($documentationFileId) {                                        return $this->hDocumentationFiles->selectAssociative( array( 'hDocumentationFileId', 'hDocumentationFile', 'hDocumentationFileTitle', 'hDocumentationFileDescription', 'hDocumentationFileClosingDescription' ), (int) $documentationFileId ); } public function searchFiles($search) {                      $sql = $this->getTemplateSQL( array( 'search' => $search ) ); $query = $this->hDatabase->getResults($sql); if (is_array($query) && count($query)) { $this->prepFileResults($query); return $this->getTemplate( 'Files', array( 'search' => $search, 'files' => $this->hDatabase->getResultsForTemplate($query) ) ); } else { return $this->searchMethods($search); } } public function searchMethods($search) {             $sql = $this->getTemplateSQL( array( 'search' => $search ) );  $methods = $this->hDatabase->getResults($sql); $this->prepMethodResults($methods); $html = ''; foreach ($methods as $method) { $method['methodSearch'] = true; $html .= $this->getTemplate('Method', $method); } return $this->getTemplate( 'Method Results', array( 'methods' => $html, 'search' => $search, 'count' => count($methods) ) ); } private function prepFileResults(&$query, $forTemplate = true) {              if (is_array($query)) { if ($forTemplate) { foreach ($query as $i => &$data) { $data['hDocumentationFileDescription'] = hString::decodeHTML($data['hDocumentationFileDescription']); $data['hDocumentationFileClosingDescription'] = hString::decodeHTML($data['hDocumentationFileClosingDescription']); } } else { $query['hDocumentationFileDescription'] = hString::decodeHTML($query['hDocumentationFileDescription']); $query['hDocumentationFileClosingDescription'] = hString::decodeHTML($query['hDocumentationFileClosingDescription']); } } else { $query = array(); } } private function prepMethodResults(&$query, $forTemplate = true) {              if (is_array($query)) { if ($forTemplate) { foreach ($query as $i => &$data) { $data['hDocumentationMethodDescription'] = hString::decodeHTML($data['hDocumentationMethodDescription']); $data['hDocumentationMethodSignature'] = hString::decodeHTML($data['hDocumentationMethodSignature']); $data['hDocumentationMethodBody'] = hString::decodeHTML($data['hDocumentationMethodBody']); $data['hDocumentationMethodReturnType'] = hString::decodeHTML($data['hDocumentationMethodReturnType']); $data['hDocumentationMethodReturnDescription'] = hString::decodeHTML($data['hDocumentationMethodReturnDescription']); } } } else { $query = array(); } } private function prepArgumentResults(&$query) {             if (is_array($query)) { foreach ($query as &$data) { $data['hDocumentationMethodArgumentDescription'] = hString::decodeHTML($data['hDocumentationMethodArgumentDescription']); $data['hDocumentationMethodArgumentDefault'] = hString::decodeHTML($data['hDocumentationMethodArgumentDefault']); } } else { $query = array(); } } public function getFileTemplate($documentationFileId) {           $file = $this->getFile($documentationFileId); $this->prepFileResults($file, false); return $this->getTemplate( 'Files', array_merge( array( 'search' => false, 'file' => true, 'methods' => $this->getMethodsTemplate($documentationFileId, true) ), $file ) ); } public function getMethods($documentationFileId) {          $query = $this->hDatabase->getResults( $this->getTemplateSQL( array( 'documentationFileId' => (int) $documentationFileId ) ) ); $this->prepMethodResults($query); return $query; } public function getMethodsTemplate($documentationFileId, $staticPage = false) {          $methods = $this->getMethods((int) $documentationFileId); $html = ''; foreach ($methods as $method) { $html .= $this->getTemplate('Method', $method); } $variables = array_merge( $this->getFile((int) $documentationFileId), array( 'methodsHTML' => $html, 'methods' => $this->hDatabase->getResultsForTemplate($methods), 'staticPage' => $staticPage ) ); return $this->getTemplate( 'Methods', $variables ); } public function getMethodArguments($methodId) {         $query = $this->hDatabase->getResults( $this->getTemplateSQL( array( 'methodId' => (int) $methodId ) ) ); $this->prepArgumentResults($query); return $this->hDatabase->getResultsForTemplate($query); } public function getDocumentationFileIdByMethodId($methodId) {        return (int) $this->hDocumentationMethods->selectColumn( 'hDocumentationFileId', $methodId ); } public function getDocumentationFileByDocumentationId($documentationFileId) {         return $this->hDocumentationFiles->selectColumn( 'hDocumentationFile', $documentationFileId ); } public function getDocumentationFileByMethodId($methodId) {         return $this->getDocumentationFileByDocumentationId( $this->getDocumentationFileIdByMethodId($methodId) ); } public function getDocumentationFileType($file) {               $fileName = basename($file); $plugin = explode('.', $fileName); $pluginName = $plugin[0]; return ($plugin[1] != 'php')? $plugin[1] : 'plugin'; } public function getMethodNameByMethodId($methodId) {         return $this->hDocumentationMethods->selectColumn( 'hDocumentationMethodName', $methodId ); } public function getNavigation() {         $this->hFileCache = $this->library('hFile/hFileCache'); $html = $this->hFileCache->getCachedDocument( 'hDocumentationPluginNavigation', 0, array( $this->hPlugins->getLastModified(), $this->hPluginsPrivate->getLastModified() ) ); if ($html === false) { $this->hFileUtilities = $this->library( 'hFile/hFileUtilities', array( 'autoScanEnabled' => true, 'fileTypes' => array( 'php' ), 'excludeFolders' => array( 'HTML', 'XML', 'JS', 'CSS', 'SQL', 'XHTML', 'TXT', 'PHP', 'Templates', 'hDatabaseStructure', 'Database' ) ) ); $files = $this->hFileUtilities->getFiles(); $baseName = ''; $basePath = ''; $lastBaseName = ''; $variables = array( 'baseName' => array(), 'paths' => array() ); $baseNameCounter = 0; $pathCounter = 0; $basePaths = array(); foreach ($files as $file) { $baseName = $this->getBaseName($file); $basePath = $this->getBasePath($file); if (in_array($basePath, $basePaths, true)) { continue; } array_push($basePaths, $basePath); if (empty($basePath)) { continue; } if (!empty($lastBaseName) && $lastBaseName != $baseName) { $baseNameCounter++; $pathCounter = 0; } $variables['baseName'][$baseNameCounter] = $baseName; $variables['paths'][$baseNameCounter]['basePath'][$pathCounter] = $basePath; $variables['paths'][$baseNameCounter]['name'][$pathCounter] = $this->getBaseObjectName($basePath); $lastBaseName = $baseName; $pathCounter++; } $html = $this->getTemplate( 'Plugin Navigation', array( 'paths' => $variables ) ); $this->hFileCache->saveDocumentToCache( 'hDocumentationPluginNavigation', 0, $html ); } return $html; } } ?>