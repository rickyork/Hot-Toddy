<?php
  class hPaginationLibrary extends hPlugin { private $orderBy = 'ASC'; private $page = 0; private $chapter = 0; private $cursor; private $resultCount = 0; private $pageCount = 0; private $chapterCount = 0; private $resultsPerPage = 0; private $pagesPerChapter = 0; private $chapterUpper = 0; private $chapterLower = 0; private $parameters; private $path; private $rawCursor; public function hConstructor($arguments) { if (isset($arguments['cursor'])) { $this->rawCursor = $arguments['cursor']; } else { $this->rawCursor = $this->get('cursor', 'searchCursor', nil); } } public function &getCSS() {         $this->getPluginCSS(); return $this; } public function &setResultsPerPage($numberOfResultsPerPage) {        $this->resultsPerPage = (int) $numberOfResultsPerPage; return $this; } public function getResultsPerPage() {        return $this->resultsPerPage; } public function &setPagesPerChapter($numberOfPagesPerChapter) {        $this->pagesPerChapter = (int) $numberOfPagesPerChapter; return $this; } public function &parseCursor() {             if (!$this->resultsPerPage) { $this->setResultsPerPage($this->hPaginationResultsPerPage(10)); } if (!$this->pagesPerChapter) { $this->setPagesPerChapter($this->hPaginationPagesPerChapter(7)); } if (empty($this->cursor)) { if (!empty($this->rawCursor)) { if (substr_count($this->rawCursor, '/') != 2) { $this->orderBy = 'ASC'; $this->page = 1; $this->chapter = 1; } else { list($orderBy, $page, $chapter) = explode('/', $this->rawCursor); $this->orderBy = (bool) $orderBy? 'ASC' : 'DESC'; $this->page = (int) $page; $this->chapter = (int) $chapter; } } else { $this->orderBy = 'ASC'; $this->page = 1; $this->chapter = 1; } $this->cursor = ($this->orderBy == 'ASC'? 1 : 0).'/'.$this->page.'/'.$this->chapter; } return $this; } public function getCursor() {        return $this->cursor; } public function getPage() {        return $this->page; } public function getPageCount() {        return $this->pageCount; } public function getSortDirection() {        return $this->orderBy; } public function &setSortDirection($sortDirection) {         switch (strtoupper($sortDirection)) { case 'ASC': case 'DESC': { $this->orderBy = strtoupper($sortDirection); break; } case 0: { $this->orderBy = 'DESC'; break; } case 1: { $this->orderBy = 'ASC'; break; } default: { $this->warning( "Invalid sort direction provided.", __FILE__, __LINE__ ); } } return $this; } public function &setResultCount($resultCount) {                 $this->parseCursor(); $this->resultCount = (int) $resultCount; $this->pageCount = ceil($this->resultCount / $this->resultsPerPage); return $this; } public function getLimit() {           $this->parseCursor(); return (($this->page * $this->resultsPerPage) - $this->resultsPerPage).','.$this->resultsPerPage; } public function getLink($page, $chapter, $path = '', $parameters = array()) {            if (!empty($path)) { $this->path = $path; } if (empty($this->path)) { $this->path = $this->hFilePath; } if (count($parameters)) { $this->parameters = $parameters; } if (isset($_GET['method']) && !in_array('method', $this->parameters)) { $this->parameters['method'] = $_GET['method']; } return $this->path.'?'. $this->getQueryString( array_merge( $this->parameters, array( 'cursor' => ($this->orderBy == 'ASC'? 1 : 0)."/{$page}/{$chapter}" ) ) ); } public function getNavigationVariables($path = null, $parameters = array()) {            if (empty($path)) { $this->path = $this->hFilePath; } else { $this->path = $path; } $this->parameters = $parameters; if (empty($this->cursor)) { $this->parseCursor(); }  if ($this->pageCount > 1) {    $this->chapterUpper = $this->chapter * $this->pagesPerChapter; $this->chapterLower = $this->chapterUpper - $this->pagesPerChapter; $this->chapterCount = ceil($this->pageCount / $this->pagesPerChapter); $variables = array( 'page' => $this->page, 'chapter' => $this->chapter, 'pageCount' => $this->pageCount, 'resultCount' => $this->resultCount, 'chapterCount' => $this->chaperCount, 'chapterUpper' => $this->chapterUpper, 'chapterLower' => $this->chapterLower, 'orderBy' => $this->orderBy, 'resultsPerPage' => $this->resultsPerPage, 'pagesPerChapter' => $this->pagesPerChapter );        if ($this->page && $this->page > 1) { $variables['previousPagePath'] = $this->getLink( $this->page - 1, $this->page - 1 <= $this->chapterLower? $this->chapter - 1 : $this->chapter ); } else { $variables['previousPagePath'] = ''; } if ($this->chapterLower && $this->chapter > 1) { $variables['chapterLowerPath'] = $this->getLink( $this->chapterLower, $this->chapter - 1 ); } if ($this->page > 1 && $this->chapter > 1) { $variables['firstPagePath'] = $this->getLink(1,1); }   for ($p = $this->chapterLower + 1; $p <= $this->chapterUpper && $p <= $this->pageCount; $p++) { if ($p == $this->page) { $here = $p; $variables['pageHere'] = $here; break; } } $variables['pages'] = array(); for ($p = $this->chapterLower + 1; $p <= $this->chapterUpper && $p <= $this->pageCount; $p++) { $variables['pages']['pageFirst'][] = ($p == ($this->chapterLower + 1)); $variables['pages']['pageLast'][] = ($p == $this->chapterUpper || $p == $this->pageCount); $variables['pages']['page'][] = $p; $variables['pages']['pagePath'][] = $this->getLink( $p, $this->chapter ); }     $variables['previousPageLabel'] = $this->hPaginationPreviousPageLabel('Previous'); $variables['previousPageTooltip'] = $this->hPaginationPreviousPageTooltip('Previous Page'); if ($this->chapter + 1 <= $this->chapterCount) { $variables['chapterUpperPath'] = $this->getLink($this->chapterUpper + 1, $this->chapter + 1); $variables['chapterUpperLabel'] = $this->chapterUpper + 1; } $variables['nextPageLabel'] = $this->hPaginationNextPageLabel('Next'); $variables['nextPageTooltip'] = $this->hPaginationNextPageTooltip('Next Page'); if ($this->page + 1 <= $this->pageCount) { $variables['nextPagePath'] = $this->getLink( $this->page + 1, $this->page + 1 > $this->chapterUpper? $this->chapter + 1 : $this->chapter ); } else { $variables['nextPagePath'] = ''; } $variables['lastPagePath'] = $this->getLink( $this->pageCount, $this->chapterCount ); $variables['pagesPerChapter'] = $this->pagesPerChapter; $variables['hasPages'] = is_array($variables['pages']) && count($variables['pages']); ksort($variables); return $variables; } else { return array(); } } public function getNavigationTemplate($path = '', $parameters = array()) {            if (empty($path)) { $path = $this->hFilePath; } if (false !== ($variables = $this->getNavigationVariables($path, $parameters))) { return $this->getTemplate( 'Navigation', $variables ); } else { return ''; } } } ?>