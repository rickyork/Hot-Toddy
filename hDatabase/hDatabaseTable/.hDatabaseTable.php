<?php
  class hDatabaseTable { private $table; private $hDatabase; private $hDatabaseEditor; private $hContactDatabase; private $user; private $contact; private $userPermissions; private $hFramework; private $where = nil; private $method = nil; private $columns = array(); private $primaryKey = nil; public function __construct($table, &$hDatabase) { $this->table = $table; $this->hDatabase = $hDatabase; } private function &permissions() {        if (!is_object($this->userPermissions)) { $this->userPermissions = $GLOBALS['hFramework']->library('hUser/hUserPermissions'); } if ($this->table == 'hUserPermissions') {     $GLOBALS['hFramework']->warning( "Object 'hUserPermissions' called as a database table instead of as an object.  ". "'hUserPermissions' must be declared as a private property within the object to avoid this error message. ", __FILE__, __LINE__ ); } if (!$GLOBALS['hFramework']->isResource($this->table)) { $GLOBALS['hFramework']->warning( "Table '{$this->table}' is not a resource.  Called by {$this->method}.", __FILE__, __LINE__ ); } return $this->userPermissions; } private function &editor() {        if (!is_object($this->hDatabaseEditor)) { $this->hDatabaseEditor = $GLOBALS['hFramework']->library('hDatabase/hDatabaseEditor'); } return $this->hDatabaseEditor; } private function &subscription() {        if (!is_object($this->hSubscription)) { $this->hSubscription = $GLOBALS['hFramework']->library('hSubscription'); } return $this->hSubscription; } private function &contactDatabase() {         if (!is_object($this->hContactDatabase)) { $this->hContactDatabase = $GLOBALS['hFramework']->database('hContact'); } return $this->hContactDatabase; } public function &renameThisTable($table) {        $this->table = $table; $this->columns = array(); $this->primaryKey = nil; return $this; } public function __get($key) {  if (!empty($this->primaryKey)) { return $this->hDatabase->select( $key, $this->table, $this->columns[$this->primaryKey],  'AND', nil,  nil,  'getColumn' ); } else {  return $this->hDatabase->select($key, $this->table); } } public function __set($key, $value) { if ($this->hDatabase->columnExists($key, $this->table)) { $this->columns[$key] = $value; if ($this->hDatabase->isPrimaryKey($key, $this->table)) { $this->primaryKey = $key; } } } public function __isset($key) {  return $this->hDatabase->columnExists($key, $this->table); } public function __unset($key) {      } public function &reset() {        $this->columns = array(); $this->primaryKey = nil; return $this; } public function __call($method, $arguments) { if (!is_object($this->user) && isset($GLOBALS['hFramework']->user) && is_object($GLOBALS['hFramework']->user)) { $this->user = &$GLOBALS['hFramework']->user; } if (!is_object($this->contact) && isset($GLOBALS['hFramework']->contact) && is_object($GLOBALS['hFramework']->contact)) { $this->contact = &$GLOBALS['hFramework']->contact; } $this->method = $method; if (substr($method, 0, 6) == 'select') { $GLOBALS['hFramework']->warning( "Unimplemented method '{$method}' called from the context of database table '{$this->table}'.", __FILE__, __LINE__ ); return; } if ($this->hDatabase->columnExists($method, $this->table)) {    $data = $this->hDatabase->select( $method, $this->table, isset($arguments[0])? $arguments[0] : nil,  isset($arguments[1])? $arguments[1] : 'AND',  isset($arguments[2])? $arguments[2] : nil,  isset($arguments[3])? $arguments[3] : nil,  'getResults' ); if (is_array($data) && count($data) == 1) { return !is_array($data[0])? $data[0] : $data; } return $data; } } public function select($columns = '*', $where = nil, $logicalOperator = 'AND', $order = nil, $limit = nil) {                    return $this->hDatabase->select( $columns, $this->table, $where, $logicalOperator, $order, $limit, 'getResults' ); } public function selectResults($columns = '*', $where = nil, $logicalOperator = 'AND', $order = nil, $limit = nil) {        return $this->hDatabase->select( $columns, $this->table, $where, $logicalOperator, $order, $limit, 'getResults' ); } public function selectColumn($columns = '*', $where = nil, $logicalOperator = 'AND', $order = nil, $limit = nil) {         return $this->hDatabase->select( $columns, $this->table, $where, $logicalOperator, $order, $limit, 'getColumn' ); } public function selectExists($columns = '*', $where = nil, $logicalOperator = 'AND', $order = nil, $limit = nil) {         return $this->hDatabase->select( $columns, $this->table, $where, $logicalOperator, $order, $limit, 'resultsExist' ); } public function selectAssociative($columns = '*', $where = nil, $logicalOperator = 'AND', $order = nil, $limit = nil) {         return $this->hDatabase->select( $columns, $this->table, $where, $logicalOperator, $order, $limit, 'getAssociativeResults' ); } public function selectQuery($columns = '*', $where = nil, $logicalOperator = 'AND', $order = nil, $limit = nil) {        return $this->hDatabase->select( $columns, $this->table, $where, $logicalOperator, $order, $limit, 'query' ); } public function selectCount($columns = '*', $where = nil, $logicalOperator = 'AND', $order = nil, $limit = nil) {         return $this->hDatabase->select( $columns, $this->table, $where, $logicalOperator, $order, $limit, 'getResultCount' ); } public function selectColumnsAsKeyValue($columns = '*', $where = nil, $logicalOperator = 'AND', $order = nil, $limit = nil) {          return $this->hDatabase->select( $columns, $this->table, $where, $logicalOperator, $order, $limit, 'getAssociativeArray' ); } public function selectForTemplate($columns = '*', $where = nil, $logicalOperator = 'AND', $order = nil, $limit = nil) {        return $this->hDatabase->select( $columns, $this->table, $where, $logicalOperator, $order, $limit, 'getResultsForTemplate' ); } public function insert() {         $arguments = func_get_args();   if (!isset($arguments[0])) { if (count($this->columns)) { return $this->hDatabase->insert($this->columns, $this->table); } else { $GLOBALS['hFramework']->warning( "Unable to insert into table '{$this->table}' because no columns were defined.", __FILE__, __LINE__ ); } } else { if (isset($arguments[0]) && is_array($arguments[0])) { if (count($arguments) > 1) { foreach ($arguments as $insert) { $id = $this->hDatabase->insert($insert, $this->table); } return $id; } else { return $this->hDatabase->insert($arguments[0], $this->table); } } else { return call_user_func_array( array($this->hDatabase, 'insert'), array( $arguments, $this->table ) ); } } } public function update($columns, $where = nil, $logicalOperator = 'AND', $key = nil, $quoteColumns = true) {         return $this->hDatabase->update( $columns, $where, $this->table, $logicalOperator, $key, $quoteColumns ); } public function save() {              $arguments = func_get_args(); if (!isset($arguments[0])) { if (count($this->columns)) { return $this->hDatabase->save($this->columns, $this->table); } else { $GLOBALS['hFramework']->warning( "Unable to save {$this->table}, no columns were defined.", __FILE__, __LINE__ ); } } else if (isset($arguments[0]) && is_array($arguments[0])) { return $this->hDatabase->save( $arguments[0], $this->table ); } else { return call_user_func_array( array($this->hDatabase, 'save'), array( $arguments, $this->table ) ); } } public function delete($columns = array(), $key = nil, $logicalOperator = 'AND') {        if ((empty($columns) || !count($columns)) && count($this->columns)) { return $this->hDatabase->delete( $this->table, $this->columns ); } else { return $this->hDatabase->delete( $this->table, $columns, $key, $logicalOperator ); } } public function isResource() {                return $GLOBALS['hFramework']->isResource($this->table); } public function getResourceId() {                 return $GLOBALS['hFramework']->getResourceId($this->table); } public function getResource() {                                                  return $GLOBALS['hFramework']->getResource($this->table); } public function getResourceName($frameworkResourceKey) {                  return $GLOBALS['hFramework']->getResourceName( $this->table, $frameworkResourceKey ); } public function getLastModified($frameworkResourceKey = 0) {               return $GLOBALS['hFramework']->getResourceLastModified( $this->table, $frameworkResourceKey ); } public function getResourceLastModified($frameworkResourceKey = 0) {        return $GLOBALS['hFramework']->getResourceLastModified( $this->table, $frameworkResourceKey ); } public function &modifyResource($frameworkResourceKey = 0) {        $GLOBALS['hFramework']->modifyResource( $this->table, $frameworkResourceKey ); return $this; } public function &modify($frameworkResourceKey = 0) {               $GLOBALS['hFramework']->modifyResource( $this->table, $frameworkResourceKey ); return $this; } public function &truncate() {        $this->hDatabase->truncate($this->table); return $this; } public function &truncateAndInsert() {          $this->hDatabase->truncate($this->table); $insertPath = $GLOBALS['hFramework']->hFrameworkPath.'/Hot Toddy/hDatabase/hDatabaseStructure/'.$this->table.'/'.$this->table.'.insert.sql'; if (file_exists($insertPath)) { $this->hDatabase->query( $GLOBALS['hFramework']->getTemplate($insertPath) ); } return $this; } public function &activity($activity) {         $GLOBALS['hFramework']->activity( $this->table, $activity ); return $this; } public function &set() {                    $this->hDatabase->setTable($this->table); return $this; } public function &uses() {         $this->hDatabase->uses($this->table); return $this; } public function &createFromFile() {         $this->hDatabase->createTableFromFile($this->table); return $this; } public function hasPermission($frameworkResourceKey, $level = 'r', $userId = 0) {               return $GLOBALS['hFramework']->hasPermission( $this->table.':'.$frameworkResourceKey.':'.$level, $userId ); } public function hasReadPermission($frameworkResourceKey, $userId = 0) {               return $GLOBALS['hFramework']->hasPermission( $this->table.':'.$frameworkResourceKey.':r', $userId ); } public function hasWritePermission($frameworkResourceKey, $userId = 0) {                       return $GLOBALS['hFramework']->hasPermission( $this->table.':'.$frameworkResourceKey.'rw', $userId ); } public function &setInherit($frameworkResourceKey) {        return $this->inheritPermissionsFrom($frameworkResourceKey); } public function isAuthorized($frameworkResourceKey, $userId = 0) {                          return $this->permissions()->isAuthorized($this->table, $frameworkResourceKey, $userId); } public function isResourceOwner($frameworkResourcePrimaryKey, $frameworkResourceKey, $userId = 0) {             return $this->permissions()->isResourceOwner( $this->table, $frameworkResourcePrimaryKey, $frameworkResourceKey, $userId ); } public function getPermissions($frameworkResourceKey) {            return $this->permissions()->getPermissions($this->table, $frameworkResourceKey); } public function &inheritPermissionsFrom($frameworkResourceKey) {             $this->permissions()->setInherit($this->table, $frameworkResourceKey); return $this; } public function &addGroup($group, $level = 'r') {        return $this->setGroup($group, $level); } public function &setGroup($group, $level = 'r') {            $this->permissions()->setGroup($group, $level = 'r'); return $this; } public function &addGroups($groups) {        return $this->setGroups($groups); } public function &setGroups($groups) {                          $this->permissions()->setGroups($groups); return $this; } public function &savePermissions($frameworkResourceKey, $owner = 'rw', $world = '') {              $this->permissions()->save( $this->table, $frameworkResourceKey, $owner, $world ); return $this; } public function hasWorldRead($frameworkResourceKey) {         return $GLOBALS['hFramework']->hasWorldRead( $this->table.':'.$frameworkResourceKey ); } public function &saveWorldPermissions($frameworkResourceKey, $world = '') {           $this->permissions()->saveWorldAccess( $this->table, $frameworkResourceKey, $world ); return $this; } public function &deletePermissions($frameworkResourceKey) {            $this->permissions()->delete( $this->table, $frameworkResourceKey ); return $this; } public function &deletePermissionsCache($frameworkResourceKey, $userPermissionsType = 'hUserPermissions') {           $this->permissions()->deleteCache( $this->table, $frameworkResourceKey, $userPermissionsType ); return $this; } public function &chown($frameworkResourceKey, $userId = 0) {            $this->permissions()->chown( $this->table, $frameworkResourceKey, $userId ); return $this; } public function filterTableColumns(array $columns) {        return $this->hDatabase->filterTableColumns( $columns, $this->table ); } public function filterColumns(array $columns) {           return $this->hDatabase->filterTableColumns( $columns, $this->table ); } public function getPostDataByColumnName(array $columns = array()) {                return $this->hDatabase->getPostDataByColumnName( $this->table, $columns ); } public function getResultByKey($field, $key, $keyValue, $default = '') {                    return $this->hDatabase->getResultByKey( $field, $this->table, $key, $keyValue, $default ); } public function isAutoIncrementColumn($column) {         return $this->hDatabase->isAutoIncrementColumn( $column, $this->table ); } public function exists() {         return $this->hDatabase->tableExists($this->table); } public function tableExists() {        return $this->hDatabase->tableExists($this->table); } public function columnExists($column) {            return $this->hDatabase->columnExists( $column, $this->table ); } public function columnsInTable(array $columns) {         return $this->hDatabase->columnsInTable( $columns, $this->table ); } public function columnsIn(array $columns) {        $this->hDatabase->columnsInTable( $columns, $this->table ); } public function columnInTable($column) {          return $this->hDatabase->columnInTable( $column, $this->table ); } public function columnIn($column) {        return $this->hDatabase->columnInTable( $column, $this->table ); } public function getColumnType($column) {        return $this->hDatabase->getColumnType( $column, $this->table ); } public function columnIsNumeric($column) {         return $this->hDatabase->columnIsNumeric( $column, $this->table ); } public function hasPrimaryKey() {         return $this->hDatabase->hasPrimaryKey( $this->table ); } public function isPrimaryKey($column) {         return $this->hDatabase->isPrimaryKey( $column, $this->table ); } public function hasIncrementKey() {         return $this->hDatabase->hasIncrementKey( $this->table ); } public function getFirstColumn() {        return $this->hDatabase->getFirstColumn( $this->table ); } public function getColumns() {         return $this->hDatabase->getColumns( $this->table ); } public function getColumnNames() {          return $this->hDatabase->getColumnNames( $this->table ); } public function &rename($to) {         $this->editor()->renameTable( $this->table, $to ); return $this; } public function &renameColumns(array $columns) {          $this->editor()->renameColumns( $columns, $this->table ); return $this; } public function &renameColumn($from, $to) {         $this->editor()->renameColumn( $from, $to, $this->table ); return $this; } public function &dropColumns(array $columns) {         if (!count($columns)) { $GLOBALS['hFramework']->warning("Unable to delete columns from table '{$this->table}', because no columns were specified.", __FILE__, __LINE__); return $this; } array_push($columns, $this->table); call_user_method_array( 'dropColumns', $this->editor(), $columns ); return $this; } public function &dropColumn($column) {        $this->editor()->dropColumn( $column, $this->table ); return $this; } public function &addColumn($column, $type, $afterColumn = nil, $firstColumn = false) {            $this->editor()->addColumn( $column, $type, $afterColumn, $firstColumn, $this->table ); return $this; } public function &addColumns(array $columns) {                                                $this->editor()->addColumns( $columns, $this->table ); return $this; } public function &appendColumn($column, $type) {           $this->editor()->appendColumn( $column, $type, $this->table ); return $this; } public function &prependColumn($column, $type) {           $this->editor()->prependColumn( $column, $type, $this->table ); return $this; } public function &modifyColumn($column, $type) {         $this->editor()->modifyColumn( $column, $type, $this->table ); return $this; } public function &addFullTextIndex($columns, $name = nil) {          $this->editor()->addFullTextIndex( $columns, $name, $this->table ); return $this; } public function &dropFullTextIndex($name) {         $this->editor()->dropFullTextIndex( $name, $this->table ); return $this; } public function &addUniqueIndex($columns, $name = nil) {           $this->editor()->addUniqueIndex( $columns, $name, $this->table ); return $this; } public function &addIndex($columns, $name = nil) {           $this->editor()->addIndex( $columns, $name, $this->table ); return $this; } public function &addKey($columns, $name = nil) {           $this->editor()->addKey( $columns, $name, $this->table ); return $this; } public function &dropIndex($columns) {          $this->editor()->dropIndex( $columns, $this->table ); return $this; } public function &dropKey($columns) {          $this->editor()->dropKey( $columns, $this->table ); return $this; } public function &copyTo($to) {        $this->editor()->copyTable( $this->table, $to ); return $this; } public function &addPrimaryKey($columns) {          $this->editor()->addPrimaryKey( $columns, $this->table ); return $this; } public function &dropPrimaryKey() {        $this->editor()->dropPrimaryKey( $this->table ); return $this; } public function &drop() {        $this->editor()->dropTable( $this->table ); return $this; } public function &setAutoIncrement($counter) {         $this->editor()->setAutoIncrement( $counter, $this->table ); return $this; } public function getFields() {                                                                                                                                                                                                                                                 return $this->contactDatabase()->getFields( $this->table ); } public function isSubscribed($frameworkResourceKey, $userId = 0) {          return $this->subscription()->isSubscribed( $this->table, $frameworkResourceKey, $userId ); } public function &toggleSubscription($frameworkResourceKey, $userId = 0) {        $this->subscription()->toggleSubscription( $this->table, $frameworkResourceKey, $userId ); return $this; } public function getSubscriptions($frameworkResourceKey) {        return $this->subscription()->getSubscriptions( $this->table, $frameworkResourceKey ); } public function getSubscriptionId($frameworkResourceKey) {        return $this->subscription()->getSubscriptionId( $this->table, $frameworkResourceKey ); } public function &deleteSubscription($frameworkResourceKey) {        $this->subscription()->delete( $this->table, $frameworkResourceKey ); return $this; } public function saveSubscription($frameworkResourceKey) {        return $this->subscription()->save( $this->table, $frameworkResourceKey ); } public function &subscribe($frameworkResourceKey, $userId = 0) {        $this->subscription()->subscribe( $this->table, $frameworkResourceKey, $userId ); return $this; } public function &unsubscribe($frameworkResourceKey, $userId = 0) {        $this->subscription()->unsubscribe( $this->table, $frameworkResourceKey, $userId ); return $this; } } ?>