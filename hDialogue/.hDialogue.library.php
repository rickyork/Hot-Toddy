<?php
  class hDialogueLibrary extends hPlugin { private $dialogue; private $dialogues; private $tabs = array(); private $hForm; private $title; private $buttons; public function hConstructor() {                 if ($this->userAgent->iOS) { $this->touchScroll(); } $this->getPluginFiles(); $this->getPluginCSS('ie6'); $this->getPluginCSS('ie7'); $this->getPluginJavaScript('hDHTML/hDrag');  } private function &reset() {            $this->dialogue = nil; $this->dialogues = nil; $this->tabs = array(); if ($this->hForm && $this->checkFormObject('reset')) { $this->hForm->resetForm(); } $this->hForm = nil; $this->title = nil; $this->buttons = array(); $this->unsetVariables('hDialogue'); return $this; } public function &setForm(hFormLibrary &$form) {                $this->hForm = $form; return $this; } public function &newDialogue($id) {             $this->dialogue = $id; return $this; } public function &addTabs(array $tabs = array()) {                                    if (!count($tabs)) { if ($this->checkFormObject('addTabs')) {  $form = $this->hForm->getLegends(); if (is_array($form)) { foreach ($form as $legend) { $this->addTab($legend['id'], $legend['value']); } } } } else if (is_array($tabs)) { foreach ($tabs as $id => $label) { $this->addTab($id, $label); } } return $this; } public function &addTab($id, $label) {         $this->tabs['hDialogueTabLabel'][] = $this->translate($label); $this->tabs['hDialogueTabId'][] = $id; return $this; } public function &addButtons() {                                   $arguments = func_get_args(); foreach ($arguments as $key => $value) { $this->buttons['hDialogueButtonLabel'][] = $this->translate($value); $this->buttons['hDialogueButtonId'][] = str_replace(' ', '', $value); } return $this; } private function checkFormObject($caller) {                               if (is_object($this->hForm) && get_class($this->hForm) == 'hFormLibrary') { return true; } else { $this->warning("The form provided to the dialogue is not an 'hFormLibrary' object.  Called from '{$caller}()'", __FILE__, __LINE__); return false; } } public function &setDialogueTitle($title) {              $this->title = $title; return $this; } public function getDialogue($content = nil, $title = nil) {                                                                                                                                                                                             $html = ''; if (!empty($this->dialogue)) { if ($this->hDialogueFullScreen(false)) { $this->hTemplatePath = '/hDialogue/hDialogue.template.php'; } if (!$this->hDialogueTitlebarId) { $this->hDialogueTitlebarId = $this->dialogue.'DialogueTitleBar'; } if (!$this->hDialogueContentId) { $this->hDialogueContentId = $this->dialogue.'DialogueContent'; } if (empty($content)) { if ($this->hForm) { if ($this->checkFormObject('getDialogue')) { $this->hForm->hFormIdentifier = $this->dialogue.'DialogueForm'; $this->hForm->hFormElement = false; $content = $this->hForm->getForm(); } } else { $content = $this->hFileDocument; } } if ($this->hForm && $this->hDialogueAutoTabs(true)) { if ($this->checkFormObject('getDialogue')) { $this->addTabs(); } } if ($this->userAgent->isTridentLT9) { if (count($this->tabs)) { $tabCounter = 0; $tabCount = count($this->tabs); foreach ($this->tabs as $tab) { $this->tabs['hDialogueTabFirst'][] = (!$tabCounter); $this->tabs['hDialogueTabLast'][] = ($tabCounter == ($tabCount - 1)); $tabCounter++; } } } if (!$this->hDialogueAction) { $this->hDialogueAction = 'javascript:void(0);'; } $html = $this->getTemplate( 'Dialogue', array( 'dialogueName' => $this->dialogue, 'title' => $this->translate($title), 'tabs' => $this->tabs, 'content' => $content, 'buttons' => $this->buttons ) ); $this->reset(); return $html; } else { $this->warning('You did not set a dialogue Id with newDialogue().', __FILE__, __LINE__); } } } ?>