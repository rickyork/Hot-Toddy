<?php
  class hCategoryDatabase extends hPlugin { private $format = 'getResults'; private $fileSort = '`hFileDocuments`.`hFileTitle` ASC'; private $fileCount = 0; private $categoryCount = 0; private $hCategoryGroups; private $hUserGroups = array(); private $exclusionCategories = array(); private $selectedCategories = array(); public function hConstructor() { if ($this->hCategoryGroupsPlugin(null)) { $this->hCategoryGroups = $this->plugin($this->hCategoryGroupsPlugin); $this->hUserGroups = $this->hCategoryGroups->getGroups(); } } public function &setDatabaseReturnFormat($format) {         $this->format = $format; return $this; } public function getFileCategories($fileId, $columns = array()) {             if (!is_array($columns)) { $columns = array($columns); } if (!count($columns)) { $columns = array( 'hCategoryId', 'hCategoryName', 'hFileIconId' ); } return $this->hDatabase->{"{$this->format}"}( array( 'hCategories' => $columns ), array( 'hCategories', 'hCategoryFiles' ), array( 'hCategories.hCategoryId' => 'hCategoryFiles.hCategoryId', 'hCategoryFiles.hFileId' => (int) $fileId ), 'AND', 'hCategoryName' ); } public function getCategoryName($categoryId) {        $this->checkCategoryId($categoryId); return $this->hCategories->selectColumn('hCategoryName', (int) $categoryId); } public function getCategories() {            $arguments = func_get_args(); if (isset($arguments[0])) { $categories = $this->hCategories->selectColumnsAsKeyValue( array( 'hCategoryId', 'hCategoryName' ), array( 'hCategoryId' => array('>', 0), 'hCategoryParentId' => (int) $arguments[0], 'hCategoryName' => array('NOT LIKE', '.%') ), 'AND', 'hCategoryName' ); if (count($this->exclusionCategories)) { foreach ($categories as $categoryId => $categoryName) { $this->checkCategoryId($categoryId); if (in_array((int) $categoryId, $this->exclusionCategories)) { unset($categories[$categoryId]); } } } if ($this->format == 'getResultsForTemplate') { $rtn = array(); foreach ($categories as $categoryId => $categoryName) { $this->checkCategoryId($categoryId); $rtn['hCategoryId'][] = $categoryId; $rtn['hCategoryName'][] = $categoryName; $rtn['isSelected'][] = in_array($categoryId, $this->selectedCategories); } return $rtn; } return $categories; } else { return $this->hDatabase->{"{$this->format}"}( $this->getTemplateSQL() ); } } public function categoryExists($categoryId) {        $this->checkCategoryId($categoryId); return $this->hCategories->selectExists('hCategoryName', (int) $categoryId); } public function &setCategoryFileSort($sort) {        $this->fileSort = $sort; return $this; } public function getCategoryFiles($categoryId, $userId = 0) {        $this->user->whichUserId($userId); $this->checkCategoryId($categoryId); $this->hFileGetMetaData = true;    $results = $this->hDatabase->{"{$this->format}"}( $this->getTemplateSQL( array_merge( $this->getPermissionsVariablesForTemplate('auto'), array( 'categoryId' => (int) $categoryId, 'categoryFileSort' => $this->fileSort ) ) ) ); if (isset($results['hFileDescription'])) { foreach ($results['hFileDescription'] as $i => &$fileDescription) { $fileDescription = hString::decodeHTML($fileDescription); } } $this->fileCount = $this->hDatabase->getResultCount(); return $results; } public function getCategoryFilesByGroup($categoryId = 0, $userGroups = array(), $userId = 0) {        $this->user->whichUserId($userId); $this->checkCategoryId($categoryId); $results = $this->hDatabase->{"{$this->format}"}( $this->getTemplateSQL( array_merge( $this->getPermissionsVariablesForTemplate('auto'), array( 'categoryId' => $categoryId, 'categoryFileSort' => $this->fileSort ) ) ) ); $this->fileCount = $this->hDatabase->getResultCount(); return $results; } public function getCategoryFileCount() {         return $this->fileCount; } public function getCategoryCount() {         return $this->categoryCount; } public function &setExclusionCategories() {         $categories = func_get_args(); $this->exclusionCategories = array(); foreach ($categories as $i => $categoryId) { $this->checkCategoryId($categoryId); $this->exclusionCategories[$i] = (int) $categoryId; } return $this; } public function &setSelectedCategories(array $categories) {        $this->selectedCategories = $categories; return $this; } public function &resetSelected() {        $this->selectedCategories = array(); return $this; } public function &resetExclusions() {        $this->exclusionCategories = array(); return $this; } public function getSubCategories($categoryId, $filePath = null, $checkPermissions = true) {        $this->checkCategoryId($categoryId); if (empty($filePath)) { $filePath = $this->hFilePath; } $sql = $this->getTemplateSQL( array_merge( $this->getPermissionsVariablesForTemplate($checkPermissions), array( 'categoryId' => $categoryId ) ) ); $results = $this->hDatabase->getResults($sql); $this->categoryCount = count($results); if ($this->format != 'getAssociativeArray') { foreach ($results as $i => $result) { if (in_array((int) $results[$i]['hCategoryId'], $this->exclusionCategories)) { unset($results[$i]); continue; } if (!empty($results[$i]['hFileIconId'])) { $results[$i]['hFileIconPath'] = $this->getFilePathByFileId($result['hFileIconId']); } else { $results[$i]['hFileIconPath'] = '/images/icons/'.$this->hCategoryIconResolution('128x128').'/category_folder.png'; } $results[$i]['hFileCategoryPath'] = $filePath.'?hCategoryId='.$results[$i]['hCategoryId'];  } } if ($this->format == 'getResultsForTemplate') { return $this->hDatabase->getResultsForTemplate($results); } return $results; } public function inCategory($fileId, $categoryId) {         $this->checkCategoryId($categoryId); return $this->hCategoryFiles->selectExists( 'hCategoryId', array( 'hCategoryId' => (int) $categoryId, 'hFileId' => (int) $fileId ) ); } public function &removeFileFromAllCategories($fileId) {        $this->hCategoryFiles->delete('hFileId', (int) $fileId); return $this; } public function &removeFileFromCategory($fileId, $categoryId) {        $this->hCategoryFiles->delete( array( 'hCategoryId' => (int) $categoryId, 'hFileId' => (int) $fileId ) ); return $this; } public function &addFileToCategories($fileId, array $categories) {         $this->removeFileFromAllCategories($fileId); foreach ($categories as $categoryId) { $this->checkCategoryId($categoryId)->addFileToCategory($fileId, $categoryId); } return $this; } public function &addFileToCategory($fileId, $categoryId) {        $this->checkCategoryId($categoryId); if (!$this->inCategory($fileId, $categoryId)) { $this->hCategoryFiles->insert((int) $categoryId, (int) $fileId, 0); } return $this; } public function &checkCategoryId(&$categoryId) {          if (!is_numeric($categoryId)) { $categoryId = $this->getCategoryIdFromPath($categoryId); } return $this; } } ?>