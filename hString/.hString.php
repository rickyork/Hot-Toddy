<?php
  class hString { static $begin = "'"; static $end = "'"; public static function scrubRequestData() { array_walk( $_POST, array( __CLASS__, 'escapeStringCallback' ) ); array_walk( $_GET, array( __CLASS__, 'escapeStringCallback' ) ); array_walk( $_COOKIE, array( __CLASS__, 'escapeStringCallback' ) ); array_walk( $_SERVER, array( __CLASS__, 'escapeStringCallback' ) ); if (isset($GLOBALS['argv'])) { array_walk( $GLOBALS['argv'], array( __CLASS__, 'escapeStringCallback' ) ); } } public static function escapeStringCallback(&$value) { if (is_array($value)) { foreach ($value as $i => $string) { if (is_array($value[$i])) { array_walk( $value[$i], array( __CLASS__, 'escapeStringCallback' ) ); } else { $value[$i] = self::escapeAndEncode($value[$i]); } } } else { $value = self::escapeAndEncode($value); } } public static function escapeAndEncode($value) { $value = htmlspecialchars( $value, ENT_QUOTES ); $value = mb_convert_encoding( $value, 'HTML-ENTITIES', 'UTF-8' );  return $value; }        public static function scrubArray(&$array, $length = 0) { foreach ($array as $key => $value) { if (is_array($array[$key])) { self::scrubArray($array[$key], $length); } else { $array[$key] = self::scrubValue( $array[$key], (is_array($length)? $length[$key] : $length) ); } } } public static function scrubValue($string, $length = 0) { $string = mb_convert_encoding( $string, 'UTF-8', 'HTML-ENTITIES' ); $string = strip_tags($string); $string = htmlspecialchars( $string, ENT_QUOTES ); $string = trim($string); if (!empty($length)) { $string = substr($string, 0, $length); }  $string = mb_convert_encoding( $string, 'HTML-ENTITIES', 'UTF-8' ); return $string; } public static function clip(&$string, $length) { if (!empty($length)) { $string = substr($string, 0, $length); } }    public static function scrubString($string, $length = 0) { $matches = array(); self::clip($string, $length); preg_match_all( "/([A-Z]|[0-9]|[a-z]|\_|\-|\s|\.|\!|\?|\@)+/", $string, $matches ); return implode($matches[0]); }   public static function scrubWord($string, $length = 0) { $matches = array(); self::clip($string, $length); preg_match_all( "/([A-Z]|[0-9]|[a-z]|\_|\-)+/", $string, $matches ); return implode($matches[0]); } public static function scrubHTML($string) { $string = mb_convert_encoding( $string, 'UTF-8', 'HTML-ENTITIES' ); $count = 0;  $string = preg_replace( array( '/<script[^>]*?>.*?<\/script>/si',  '/<link[^>]*?>/si',  '/<embed[^>]*?>/si',  '/<object[^>]*?>.*?<\/object>/si',  '/<style[^>]*?>.*?<\/style>/siU',  '/<!DOCTYPE[^>]*?>/',  '/<![\s\S]*?--[ \t\n\r]*>/',  '/<iframe[^>]*?>.*?<\/iframe>/si',  '/<form[^>]*?>.*?<\/form>/si',  '/<input[^>]*?>/si',  '/<textarea[^>]*?>.*?<\/textarea>/si',  '/<select[^>]*?>.*?<\/select>/si',  '/<button[^>]*?>.*?<\/button>/si',  ), '', $string, -1, $count );  $string = preg_replace( array( '/<font[^>]*?>/si', '/<\/font>/si', '/<p[^>]*?>(\s|\&nbsp\;)*?<\/p>/siU',  '/<span[^>]*?>(\s|\&nbsp\;)*?<\/span>/siU',  '/\&nbsp\;/' ), '', $string, -1 ); $string = preg_replace_callback( array( '/<[^>]*\son[^>]*?("|\')?(.)*("|\')?>/siU',  '/<[^>]*\sdom[^>]*?("|\')?(.)*("|\')?>/siU',  '/<[^>]*\sid[^>]*?("|\')?(.)*("|\')?>/siU',  '/<[^>]*\sclass[^>]*?("|\')?(.)*("|\')?>/siU',  '/<[^>]*\sstyle[^>]*?("|\')?(.)*(expression|behavior)?(.)*("|\')?>/siU',  ), 'hString::scrubHTMLCallback', $string, -1 );  if ($count > 0) { $string = strip_tags($string); } return trim( htmlspecialchars( mb_convert_encoding( $string, 'HTML-ENTITIES', 'UTF-8' ), ENT_QUOTES ) ); } public static function scrubHTMLCallback($matches) {   $submatches = array(); preg_match( '/<.*\s/uiU', $matches[0], $submatches ); if (isset($submatches[0])) { return trim($submatches[0]).'>'; } }   public static function decodeHTML($string) {    $string = mb_convert_encoding( $string, 'UTF-8', 'HTML-ENTITIES' ); $string = mb_convert_encoding( $string, 'HTML-ENTITIES', 'UTF-8' ); return $string; }    public static function entitiesToUTF8($string, $encodeSpecialCharacters = true) { if ($encodeSpecialCharacters) { return htmlspecialchars( mb_convert_encoding( $string, 'UTF-8', 'HTML-ENTITIES' ) ); } else { return mb_convert_encoding( $string, 'UTF-8', 'HTML-ENTITIES' ); } } public static function decodeEntitiesAndUTF8($string) { return self::entitiesToUTF8( $string, false ); } public static function arrayToUTF8(&$array, $encodeSpecialCharacters = true, $stripQuotes = false) { foreach ($array as $key => $value) { if (is_array($array[$key])) { self::arrayToUTF8( $array[$key], $encodeSpecialCharacters ); } else { $array[$key] = self::entitiesToUTF8( $array[$key], $encodeSpecialCharacters ); if ($stripQuotes) { $array[$key] = str_replace('"', '', $array[$key]); } } } }  public static function XMLEncode($xml) {   $xml = htmlspecialchars( $xml, ENT_QUOTES );  $xml = mb_convert_encoding( $xml, 'HTML-ENTITIES', 'UTF-8' );  $xml = htmlspecialchars( $xml, ENT_QUOTES ); return $xml; } public static function replaceEntities($string) { return str_replace( array( '&mdash;', '&ldquo;', '&rdquo;', '&lsquo;', '&rsquo;', '&nbsp;', '&hellip;' ), array( '-', '"', '"', "'", "'", ' ', '...' ), $string ); } public static function safelyDecodeURLPath(&$string) { if (isset($string) && !empty($string)) { $string = str_ireplace( array( '&', "'", '"', '%5C', '\\' ), array( '&amp;', '&#039;', '&quot;', '', '\\' ), hString::decodeHTML($string) ); return $string; } }   public static function safelyDecodeURL(&$string) { if (isset($string) && !empty($string)) { $string = str_ireplace( array( '%5C', '\\' ), array( '', '' ), $string ); if (isset($string) && $string != '/') {  while (substr($string, -1) == '/') { $string = substr($string, 0, -1); } $string = preg_replace_callback( '/\/+/', 'hFrameworkFixSlashes', $string ); }  $string = urldecode($string); $string = mb_convert_encoding( $string, 'HTML-ENTITIES', 'UTF-8' ); $string = htmlspecialchars( $string, ENT_QUOTES ); return $string; } }  public static function XMLDecode($xml) {  $xml = htmlspecialchars_decode( $xml, ENT_QUOTES );  $xml = hString::decodeEntitiesAndUTF8($xml); return $xml; } public static function encodeEntities($string, $quote) { return htmlspecialchars( $string, $quote ); } public static function encodeHTML($html, $mbReverse = false) { return htmlspecialchars( mb_convert_encoding( $html, $mbReverse? 'UTF-8' : 'HTML-ENTITIES', $mbReverse? 'HTML-ENTITIES' : 'UTF-8' ), ENT_QUOTES ); } public static function probeForPaths(&$html, $callback) {          $html = mb_convert_encoding( $html, 'UTF-8', 'HTML-ENTITIES' ); $patterns = array( '/src[\=][\"|\'](.*)[\"|\']/iUx', '/background[\=][\"|\']?(.*)[\"|\']/iUx', '/url[\(][\"|\']?(.*)[\"|\']?[\)]/iUx', '/href[\=][\"|\'](.*)[\"|\']/iUx' ); foreach ($patterns as $pattern) { $html = preg_replace_callback( $pattern, $callback, $html ); } $html = self::encodeHTML($html); } public static function trimEach($array, $delimiter = '') { if (!is_array($array)) { $array = !empty($delimiter)? explode($delimiter, $array) : str_split($array); } foreach ($array as $key => &$value) { $value = trim($value); } return $array; } public static function implodeToList($array, $separator = ',', $begin = "'", $end = null) { if (empty($end)) { $end = $begin; } self::$begin = $begin; self::$end = $end; array_walk( $array, array( __CLASS__, 'encloseString' ) ); return( implode( $separator, $array ) ); } public static function encloseString(&$string) { $string = self::$begin.$string.self::$end; } public static function softURLEncode($path) { return str_replace( array( '#', ':', '?', '@', '&' ), array( '%23', '%3A', '%3F', '%40', '%26' ), $path ); } } ?>