<?php
  class hEditorLibrary extends hPlugin { public function hConstructor() { $this->redirectIfSecureIsEnabled(); } public function wysiwyg() { if (isset($_GET['hEditorTemplateIsEmbedded'])) { $this->hEditorTemplateIsEmbedded = true; }          if ($this->hFiles->hasPermission($this->hEditorTemplateFileId($this->hFileId), 'rw') || $this->hEditorTemplateForcePermission(false)) { $this->hFileDocumentParseEnabled = false;     $embedded = $this->hEditorTemplateIsEmbedded(false);  $this->jQuery('Draggable');  $this->getPluginJavaScript('template'); $this->getPluginJavaScript('/hCodeStyle/hCodeStyle.template', true);   $files = array( 'Editor', 'Panel', 'Modals', 'Templates', 'Modals/Link', 'Modals/Movie', 'Modals/Photo' ); foreach ($files as $file) { $this->getPluginCSS('/hEditor/CSS/WYSIWYG/'.$file, true); }  $this->getPluginJavaScript('/Library/Ace/src/ace', true); $this->getPluginJavaScript('/Library/Ace/src/mode-html', true); $this->getPluginJavaScript('/Library/Ace/src/theme-textmate', true);    $this->plugin('hApplication/hApplicationStatus'); $objects = '';         if (!$embedded) { $this->getPluginFiles('hFinder/hFinderTree'); $this->hFinderTree = $this->library('hFinder/hFinderTree');    $this->hPhoto = $this->library('hPhoto');    $this->hMovie = $this->library('hMovie'); $this->getPluginCSS('/hEditor/CSS/WYSIWYG/Objects', true); $objects = $this->getTemplate( 'WYSIWYG/Objects', array( 'hPhotoTree' => !$embedded? $this->hPhoto->getTree() : '', 'hPhotoView' => !$embedded? $this->hPhoto->getView() : '', 'hMovieTree' => !$embedded? $this->hMovie->getTree() : '', 'hMovieView' => !$embedded? $this->hMovie->getView() : '' ) ); } else { $this->getPluginCSS('/hEditor/CSS/WYSIWYG/Embedded', true); } $this->hFileDocumentAppend =         $this->getTemplate( 'WYSIWYG/WYSIWYG', array( 'hFileId' => $this->hEditorTemplateFileId($this->hFileId), 'objects' => $objects, 'wildcardPath' => $this->hFileWildcardPath ) ). $this->getTemplate('WYSIWYG/Modals/Link'). $this->getTemplate('WYSIWYG/Modals/Movie'). $this->getTemplate('WYSIWYG/Modals/Photo').   $this->getPanel( 'Editor', 'hEditorToolbarPanel', array( 'Format' => $this->getTemplate('WYSIWYG/Format Toolbar'), 'Template' => $this->getTemplate('WYSIWYG/Templates')      ) );            } else { $this->notAuthorized(); } }   public function getPanel($name, $id, array $panes) { $panelTabs = array(); $panelPanes = array(); $i = 0; foreach ($panes as $label => $pane) { $panelTabs['hEditorTemplatePanelTabId'][$i] = str_replace(' ', '', $label); $panelTabs['hEditorTemplatePanelTabLabel'][$i] = $label; $panelPanes['hEditorTemplatePanelPaneId'][$i] = str_replace(' ', '', $label); $panelPanes['hEditorTemplatePanelPane'][$i] = $pane; $i++; } return $this->getTemplate( 'WYSIWYG/Panel', array( 'hEditorTemplatePanelName' => $name, 'hEditorTemplatePanelNameAsId' => str_replace(array(' ', '/'), '', $name), 'hEditorTemplatePanelId' => $id, 'hEditorTemplatePanelTabs' => $panelTabs, 'hEditorTemplatePanelPanes' => $panelPanes ) ); } } ?>