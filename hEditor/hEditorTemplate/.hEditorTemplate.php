<?php
  class hEditorTemplate extends hPlugin { private $hFinderTree; private $hPhoto; private $hMovie; public function hConstructor() {          if ($this->hasPermission('hFiles:'.$this->hEditorTemplateFileId($this->hFileId).':rw') || $this->hEditorTemplateForcePermission(false)) { $this->hFileDocumentParseEnabled = false;     $embedded = $this->hEditorTemplateIsEmbedded(false);  $this->jQuery('Draggable'); $this->getPluginCSS(); $this->getPluginJavaScript('template');   $files = array( 'Panel', 'Modal Dialogue', 'Template' ); foreach ($files as $file) { $this->getPluginCSS('/hEditor/hEditorTemplate/CSS/'.$file, true); }  $this->getPluginJavaScript('/Library/Ace/build/src/ace', true); $this->getPluginJavaScript('/Library/Ace/build/src/mode-html', true); $this->getPluginJavaScript('/Library/Ace/build/src/theme-textmate', true);    $this->plugin('hApplication/hApplicationStatus'); $objects = '';         if (!$embedded) { $this->getPluginFiles('hFinder/hFinderTree'); $this->hFinderTree = $this->library('hFinder/hFinderTree');    $this->hPhoto = $this->library('hPhoto');    $this->hMovie = $this->library('hMovie'); $this->getPluginCSS('/hEditor/hEditorTemplate/CSS/Objects', true); $objects = $this->getTemplate( 'Objects', array( 'hPhotoTree' => !$embedded? $this->hPhoto->getTree() : '', 'hPhotoView' => !$embedded? $this->hPhoto->getView() : '', 'hMovieTree' => !$embedded? $this->hMovie->getTree() : '', 'hMovieView' => !$embedded? $this->hMovie->getView() : '' ) ); } else { $this->getPluginCSS('/hEditor/hEditorTemplate/CSS/Embedded', true); } $this->hFileDocumentAppend =         $this->getTemplate( 'Template Editor', array( 'hFileId' => $this->hEditorTemplateFileId($this->hFileId), 'objects' => $objects, 'wildcardPath' => $this->hFileWildcardPath ) ).   $this->getPanel( 'Editor', 'hEditor', array( 'Format' => $this->getTemplate('Format'), 'Template' => $this->getTemplate('Template')      ) );  $this->plugin('hEditor/hEditorTemplate/hEditorTemplateLink');     $this->plugin('hEditor/hEditorTemplate/hEditorTemplateImage');  $this->plugin('hEditor/hEditorTemplate/hEditorTemplateMovie');   } else { $this->notAuthorized(); } }   public function getPanel($name, $id, array $panes) { $panelTabs = array(); $panelPanes = array(); $i = 0; foreach ($panes as $label => $pane) { $panelTabs['hEditorTemplatePanelTabId'][$i] = str_replace(' ', '', $label); $panelTabs['hEditorTemplatePanelTabLabel'][$i] = $label; $panelPanes['hEditorTemplatePanelPaneId'][$i] = str_replace(' ', '', $label); $panelPanes['hEditorTemplatePanelPane'][$i] = $pane; $i++; } return $this->getTemplate( 'Panel', array( 'hEditorTemplatePanelName' => $name, 'hEditorTemplatePanelNameAsId' => str_replace(array(' ', '/'), '', $name), 'hEditorTemplatePanelId' => $id, 'hEditorTemplatePanelTabs' => $panelTabs, 'hEditorTemplatePanelPanes' => $panelPanes ) ); } } ?>