<?php
  class hBlogLibrary extends hPlugin { private $hCalendarDatabase; private $hCategoryDatabase; private $hListDatabase; private $hFileComments; private $hFileCommentsDatabase; private $hList; private $hPagination; private $hFacebook; private $hSearchNavigation = nil; private $postCount = nil; private $hCalendarResourceLastModified; public function hConstructor() { $this->hFileDocumentSelector = ''; $this->getPluginCSS(); $this->hFileGetMetaData = false; $this->hCalendarDatabase = $this->database('hCalendar');   $blogRollLinks = $this->hCalendarBlogRollLinks(nil); $links = array(); if (isset($blogRollLinks) && is_array($blogRollLinks) && count($blogRollLinks)) { foreach ($blogRollLinks as $link) { $links['hCalendarBlogRollLink'][] = $link->link; $links['hCalendarBlogRollLabel'][] = $link->label; if (isset($link->target)) { $links['hCalendarBlogRollLinkTarget'][] = $link->target; } } } else { $links = false; } } public function getBlog() {        if (($this->hCalendarBlogPost(false) || $this->hCalendarNewsPost(false)) && !isset($_GET['hCalendarMonth'])) { $blog = $this->getPost(); } else { $blog = $this->getPosts(); } $archive = ''; if ($this->hCalendarBlogArchiveEnabled(true)) { $archive = $this->getArchive(); } return $this->getTemplate( 'hBlogTemplate:Blog', array( 'blog' => $blog, 'archive' => $archive ) ); } public function getTagData($categoryId, $blogPath) {        $categoryTags = array(); $categoryId = 0; if (!empty($categoryId)) { $this->hCategoryDatabase = $this->database('hCategory'); $this->hCategoryDatabase->setDatabaseReturnFormat('getResultsForTemplate'); $categoryTags = $this->hCategoryDatabase->getSubCategories( $categoryId, $blogPath, true, true ); if (!empty($_GET['hCategoryId'])) { $this->hCalendarDatabase->setCategoryId($_GET['hCategoryId']); $categoryId = (int) $_GET['hCategoryId']; } } return array( 'categoryTags' => $categoryTags, 'categoryId' => (int) $categoryId ); } public function getTags($tags, $filePath) {            return $this->getTemplate( 'hBlogTagTemplate:Tags', array( 'tags' => $tags, 'filePath' => $filePath ) ); } public function getRollCall($rollCallTitle, array $rollCallLinks) {            return $this->getTemplate( 'hBlogRollCallTemplate:Roll Call', array( 'rollCallTitle' => $rollCallTitle, 'rollCallLinks' => $rollCallLinks ) ); } public function getRecentPosts($calendarId = 1, $calendarCategoryId = 3, array $options = array()) {              $categoryId = 0; if (isset($options['categoryId'])) { $categoryId = (int) $options['categoryId']; } $fileId = $this->hFileId; if (isset($options['fileId'])) { $fileId = (int) $options['fileId']; } $recentPosts = $this->hCalendarDatabase->getCached( 'hBlogRecentPosts', $calendarId, $calendarCategoryId, $fileId.','.$categoryId ); if ($recentPosts === false) { $title = 'Recent Posts'; if (isset($options['title'])) { $title = $options['title']; } $dateFormat = 'm/d/Y'; if (isset($options['dateFormat'])) { $dateFormat = $options['dateFormat']; } $beginTimeFormat = 'm/d/Y h:i a'; if (isset($options['beginTimeFormat'])) { $beginTimeFormat = $options['beginTimeFormat']; } $endTimeFormat = 'm/d/Y h:i a'; if (isset($options['endTimeFormat'])) { $endTimeFormat = $options['endTimeFormat']; } $recentPostCount = 12; if (isset($options['recentPostCount'])) { $recentPostCount = $options['recentPostCount']; } $linkArguments = nil; if (isset($options['linkArguments'])) { $linkArguments = $options['linkArguments']; } $recentPosts = $this->getTemplate( 'hBlogRecentPostsTemplate:Recent Posts', array( 'recentPostsTitle' => $title, 'recentPosts' => $this->hCalendarDatabase->getFilesForTemplate( array( 'hCalendarDate' => $dateFormat, 'hCalendarBeginTime' => $beginTimeFormat, 'hCalendarEndTime' => $endTimeFormat, ), $calendarId, $calendarCategoryId, $recentPostCount, nil, true, 'DESC' ), 'linkArguments' => $this->hBlogPostLinkArguments(nil) ) ); $this->hCalendarDatabase->saveToCache( $recentPosts, 'hBlogRecentPosts', $calendarId, $calendarCategoryId, $fileId.','.$categoryId ); } return $recentPosts; } public function getFacebookThumbnail($fileId = 0) {         if (!$fileId) { $fileId = $this->hFileId; } return ( "http://". $this->hServerHost. $this->cloakSitesPath( $this->getFilePathByFileId($fileId) ) ); } public function getRSSHTML($calendarId = 1, $calendarCategoryId = 3, $fileId = 0) {                return $this->getTemplate( 'hBlogRSSTemplate:RSS', array( 'rss' => $this->getRSSPath( $calendarId, $calendarCategoryId, $fileId ) ) ); } public function getRSSLink($calendarId = 1, $calendarCategoryId = 3, $fileId = 0) {            return $this->getTemplate( 'hBlogRSSLinkTemplate:RSS Link', array( 'rssLink' => $this->getRSSPath( $calendarId, $calendarCategoryId, $fileId ) ) ); } public function getRSSPath($calendarId = 1, $calendarCategoryId = 3, $fileId = 0) {        if (!$fileId) { $fileId = $this->hFileId; } return ( '/hCalendar/RSS?calendar='. $fileId.'/'. $calendarId.'/'. $calendarCategoryId ); } public function &enableSyntaxHighlighting() {         $this->getPluginCSS('/Library/SyntaxHighlighter/Styles/shCore', true); $this->getPluginCSS('/Library/SyntaxHighlighter/Styles/shThemeDefault', true); $this->getPluginJavaScript(); $this->getPluginJavaScript('/Library/SyntaxHighlighter/Scripts/shCore', true); $brushes = array( 'Bash', 'Css', 'JScript', 'Php', 'Sql', 'Xml', 'Plain' ); foreach ($brushes as $brush) { $this->getPluginJavascript('/Library/SyntaxHighlighter/Scripts/shBrush'.$brush, true); } return $this; } public function getPost($fileId = 0, array $options = array()) {             $fileId = empty($fileId)? $this->hFileId : $fileId; if ($fileId != $this->hFileId) { $userId = $this->getFileOwner($fileId); $document = $this->getFileDocument($fileId); $title = $this->hFileHeadingTitle( $this->getFileTitle($fileId), $fileId ); } else { $userId = $this->hUserId; $document = $this->hFileDocument; $title = $this->hFileHeadingTitle( $this->hFileTitle, $fileId ); } $dateFormat = 'F j, Y'; if (isset($options['dateFormat'])) { $dateFormat = $options['dateFormat']; } $nameSource = 'firstName'; if (isset($options['nameSource'])) { $nameSource = $options['nameSource']; }    $file = $this->hCalendarDatabase->getFile($fileId); $this->hFileComments = $this->library('hFile/hFileComments'); $post = $this->getTemplate( 'hBlogPostTemplate:Post', array( 'blogPost' => $document, 'title' => $title, 'author' => $this->getAuthor( $userId, $nameSource ), 'date' => date( $dateFormat, (int) $file['hCalendarDate'] ), 'comments' => $this->hFileComments->getComments() ) );  return $post; } public function getAuthor($userId, $nameSource = 'firstName') {                   $author = ''; switch ($nameSource) { case 'displayname': { return $this->user->getFullName($userId); } case 'firstname': { return $this->user->getFirstName($userId); } case 'username': default: { return $this->user->getUserName($userId); } } } public function getPosts($calendarId = 1, $calendarCategoryId = 3, array $options = array()) {              $posts = $this->hCalendarDatabase->getCached( 'hBlogPosts', (int) $calendarId, (int) $calendarCategoryId, $_SERVER['REQUEST_URI'] ); if ($posts === false) { $this->hPagination = $this->library('hPagination'); if (isset($options['month'])) { $time = (int) $options['month']; $range = ">= {$time},<= ". mktime( 0, 0, 0, date('n', $time), date('t', $time), date('Y', $time) ); } else { $range = nil; } if (!$range) { $this->hPagination->setResultsPerPage( isset($options['postsPerPage'])? (int) $options['postsPerPage'] : 7 ); } $dateFormat = 'F j, Y'; if (isset($options['dateFormat'])) { $dateFormat = $options['dateFormat']; } $beginTimeFormat = 'F j, Y h:i a'; if (isset($options['beginTimeFormat'])) { $beginTimeFormat = $options['beginTimeFormat']; } $endTimeFormat = 'F j, Y h:i a'; if (isset($options['endTimeFormat'])) { $endTimeFormat = $options['endTimeFormat']; } $fileId = $this->hFileId; if (isset($options['fileId'])) { $fileId = $options['fileId']; } $files = $this->hCalendarDatabase->getFilesForTemplate( array( 'hCalendarDate' => $dateFormat, 'hCalendarBeginTime' => $beginTimeFormat, 'hCalendarEndTime' => $endTimeFormat ), (int) $calendarId, (int) $calendarCategoryId, $range? 0 : $this->hPagination->getLimit(), $range, $range? false : true, 'DESC' ); $this->postCount = $this->hCalendarDatabase->getResultCount(); $pagination = nil; if (!$range) { $parameters = array(); if (isset($_GET['categoryId'])) { $parameters['categoryId'] = $_GET['categoryId']; } $this->hPagination->setResultCount($this->postCount); $pagination = $this->hPagination->getNavigationTemplate( $this->getFilePathByFileId($fileId), $parameters ); } $linkArguments = nil; if (isset($options['linkArguments'])) { $linkArguments = $options['linkArguments']; } $nameSource = 'firstName'; if (isset($options['nameSource'])) { $nameSource = $options['nameSource']; } if (isset($files['hFileId']) && is_array($files['hFileId']) && count($files['hFileId'])) { foreach ($files['hFileId'] as $i => $fileId) { $files['author'][$i] = $this->getAuthor( $files['hUserId'][$i], $nameSource ); } } $posts = $this->getTemplate( 'hBlogPostsTemplate:Posts', array( 'files' => $files, 'linkArguments' => $linkArguments, 'pagination' => $pagination ) ); $this->hCalendarDatabase->saveToCache( $posts, 'hBlogPosts', (int) $calendarId, (int) $calendarCategoryId, $_SERVER['REQUEST_URI'] ); } return $posts; } public function getArchive($calendarId = 1, $calendarCategoryId = 3, array $options = array()) {                                                                   $archive = $this->hCalendarDatabase->getCached( 'hBlogArchive', (int) $calendarId, (int) $calendarCategoryId ); if ($archive === false) { $fileId = $this->hFileId; if (isset($options['fileId'])) { $fileId = $options['fileId']; } $filePath = $this->hFilePath; if ($fileId != $this->hFileId) { $filePath = $this->getFilePathByFileId($fileId); } $oldestDate = $this->hCalendarDatabase->getOldestDate( $this->hCalendarId(1), $this->hCalendarCategoryId(3) ); $newestDate = $this->hCalendarDatabase->getNewestDate( $this->hCalendarId(1), $this->hCalendarCategoryId(3) ); if (is_numeric($oldestDate) && is_numeric($newestDate) && $oldestDate > 0 && $newestDate > 0) {  $years = range( date('Y', $oldestDate), date('Y', $newestDate) ); rsort($years);   $months = range(1, 12); $archiveYears = array(); $i = 0; foreach ($years as $year) { $archiveYears['year'][$i] = $year; $archiveYears['months'][$i] = $this->hCalendarDatabase->getArchiveMonths( $year, (int) $calendarId, (int) $calendarCategoryId ); $archiveYears['filePath'][$i] = $this->hCalendarArchivePath($filePath); $i++; } $archiveHeading = 'Archive'; if (isset($options['archiveHeading'])) { $archiveHeading = $options['archiveHeading']; } $archivePath = $filePath; if (isset($options['archivePath'])) { $archivePath = $options['archivePath']; } $currentPostsLabel = 'Current Posts'; if (isset($options['currentPostsLabel'])) { $currentPostsLabel = $options['currentPostsLabel']; } $archive = $this->getTemplate( 'hBlogArchiveTemplate:Archive', array( 'archiveHeading' => $archiveHeading, 'filePath' => $archivePath, 'present' => $currentPostsLabel, 'years' => $archiveYears ) ); $this->hCalendarDatabase->saveToCache( $archive, 'hBlogArchive', (int) $calendarId, (int) $calendarCategoryId ); } } return $archive; } } ?>