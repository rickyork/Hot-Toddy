<?php
  class hPluginLibrary { private $hPluginDatabase; private $hJSON; private $dontLoadConfigurationPaths = array(); public function &hPlugin($plugin, $arguments = array(), $fuse = false, $instantiate = true, $include = true) {         return $this->plugin( $plugin, $arguments, $fuse, $instantiate, $include ); } public function &plugin($plugin, $arguments = array(), $fuse = false, $instantiate = true, $include = true) {        if (!empty($plugin)) { $plugin = $this->queryPlugin( $plugin, nil, false ); if (!isset($GLOBALS['hPlugins'][$plugin['basePath']])) { $confFolder = $GLOBALS['hFramework']->hFrameworkConfigurationPath; $folders = explode('/', $plugin['basePath']); if ($GLOBALS['hFramework']->hPluginConfigurations(null) && is_array($GLOBALS['hFramework']->hPluginConfigurations)) { foreach ($GLOBALS['hFramework']->hPluginConfigurations as $pluginRoot) { foreach ($folders as $folder) { $path = $confFolder.'/'.$folder;   if (!in_array($path, $GLOBALS['hPluginConfiguration'], true)) { if (false !== $this->loadConfigurationFile($path)) { array_push( $GLOBALS['hPluginConfiguration'], $path ); } } } } } $path = $GLOBALS['hFramework']->getIncludePath( $this->hServerDocumentRoot.$plugin['path'] ); if (is_object($GLOBALS['hFramework']->ua)) { $path = $GLOBALS['hFramework']->insertSubExtension( $path, 'mobile', $GLOBALS['hFramework']->userAgent->interfaceIdiomIsPhone ); } if ($path === false) { $GLOBALS['hFramework']->warning( "Load plugin failed. Plugin located at {$path} does not exist. ". "Current framework path: {$this->hFilePath}", __FILE__, __LINE__ ); $return = false; return $return; } if ($include && !class_exists($plugin['name'])) {  hFrameworkInclude($path); } if ($fuse) { $this->fusePlugins($plugin['basePath']); } if (class_exists($plugin['baseName'].'Plugin')) { $plugin['name'] .= 'Plugin'; } if ($include) { if (class_exists($plugin['name'])) { if ($instantiate) {  $GLOBALS['hPlugins'][$plugin['basePath']] = new $plugin['name']( $plugin['path'], $arguments ); return $GLOBALS['hPlugins'][$plugin['basePath']]; } } else { $GLOBALS['hFramework']->warning( "Load plugin failed. Class '{$plugin['name']}' does not exist.", __FILE__, __LINE__ ); } } } else { return $GLOBALS['hPlugins'][$plugin['basePath']]; } } else { $GLOBALS['hFramework']->warning( 'Unable to get plugin because the plugin path supplied was empty.', __FILE__, __LINE__ ); } return $plugin; } public function &hLibrary($plugin, $arguments = array(), $fuse = false) {        return $this->library( $plugin, $arguments, $fuse ); } public function &library($plugin, $arguments = array(), $fuse = false) {        $plugin .= '/'.(!strstr($plugin, '/')? $plugin : basename($plugin)).'.library.php'; return $this->plugin( $plugin, $arguments, $fuse ); } public function &database($plugin, $arguments = array(), $fuse = false) {         $plugin .= '/'.(!strstr($plugin, '/')? $plugin : basename($plugin)).'.database.php'; return $this->plugin( $plugin, $arguments, $fuse ); } public function &hDaemon($plugin, $arguments = array(), $fuse = false) {        return $this->daemon( $plugin, $arguments, $fuse ); } public function daemon($plugin, $arguments = array(), $fuse = false) {         $plugin .= '/'.(!strstr($plugin, '/')? $plugin : basename($plugin)).'.daemon.php'; return $this->plugin( $plugin, $arguments, $fuse ); } public function &hShell($plugin, $arguments = array(), $fuse = false) {        return $this->shell( $plugin, $arguments, $fuse ); } public function shell($plugin, $arguments = array(), $fuse = false) {         if (!class_exists('hShell')) { $this->plugin('hShell'); } $plugin .= '/'.(!strstr($plugin, '/')? $plugin : basename($plugin)).'.shell.php'; return $this->plugin( $plugin, $arguments, $fuse ); } public function &hInclude($plugin, $arguments = array()) {         return $this->plugin( $plugin, $arguments, false, false ); } public function &includePlugin($plugin, $arguments = array()) {        return $this->plugin( $plugin, $arguments, false, false ); } public function &dontLoadConfigurationForFile($path) {        array_push( $this->dontLoadConfigurationPaths, $path ); return $this; } public function &allowConfigurationForFile($path) {        if (in_array($this->dontLoadConfigurationPaths, $path)) { if (false !== ($key = array_search($this->dontLoadConfigurationPaths, $path))) { unset($this->dontLoadConfigurationPaths[$key]); } } return $this; } public function loadConfigurationFile($path) {        if (in_array($path, $this->dontLoadConfigurationPaths)) { return false; } if (is_object($GLOBALS['hFramework']->ua)) { $path = $GLOBALS['hFramework']->insertSubExtension( $path, 'mobile', $GLOBALS['hFramework']->userAgent->interfaceIdiomIsPhone ); } if (file_exists($path.'.json')) { if (!$this->hJSON) { if (!class_exists('hJSONLibrary')) { include $this->hServerDocumentRoot.'/hJSON/hJSON.library.php'; } $this->hJSON = new hJSONLibrary('/hJSON/hJSON.library.php'); } $GLOBALS['hFramework']->addLoadedPath( 'Plugin Configuration: '.$path.'.json' ); $configurationVariables = $this->hJSON->getJSON($path.'.json'); $GLOBALS['hFramework']->setVariables($configurationVariables); return true; } else if (file_exists($path.'.conf')) { $GLOBALS['hFramework']->addLoadedPath( 'Plugin Configuration: '.$path.'.conf' ); $GLOBALS['hFramework']->setVariables( parse_ini_file($path.'.conf') ); return true; } return false; } public function queryPlugin($plugin, $arguments = false, $getId = true) {                                                                           if (!empty($plugin) && isset($GLOBALS['hPluginCache'][$plugin])) { return $GLOBALS['hPluginCache'][$plugin]; } $table = $this->getPluginDatabaseTable($plugin);  $basePlugin = $plugin; if (substr($basePlugin, -1) == ';') { $basePlugin = substr($basePlugin, 0, -1); } $baseName = strstr($basePlugin, '/')? basename($basePlugin) : $basePlugin; $path = '/'.$basePlugin; $isListener = (bool) strstr( $path, '.listener.' ); $isService = (bool) strstr( $path, '.service.' ); $isDaemon = (bool) strstr( $path, '.daemon.' ); $isShell = (bool) strstr( $path, '.shell.' ); $isLibrary = (bool) strstr( $path, '.library.' ); $isDatabase = (bool) strstr( $path, '.database.' ); if ($isListener || $isService || $isDaemon || $isShell || $isLibrary || $isDatabase) { $pluginPath = $path; $bits = explode('.', $baseName); $baseName = $bits[0]; } else { $pluginPath = $path.'/'.basename($path).'.php'; } $name = ''; switch (true) { case $isLibrary: { $name = 'Library'; break; } case $isDatabase: { $name = 'Database'; break; } case $isListener: { $name = 'Listener'; break; } case $isService: { $name = 'Service'; break; } case $isDaemon: { $name = 'Daemon'; break; } case $isShell: { $name = 'Shell'; break; } } $basePluginName = $baseName.$name; $version = 1; if ($GLOBALS['hFramework']->hPluginVersions && is_object($GLOBALS['hFramework']->hPluginVersions) && isset($GLOBALS['hFramework']->hPluginVersions->$basePluginName)) { $version = (int) $GLOBALS['hFramework']->hPluginVersions->$basePluginName; $pluginPath = str_replace( '.'.strtolower($name).'.php', '.'.($version).'.'.strtolower($name).'.php', $pluginPath ); } $GLOBALS['hPluginCache'][$plugin] = array( 'table' => $table, 'isPrivate' => $table == 'hPluginPrivate', 'isApplication' => $table == 'hPluginApplication', 'isListener' => $isListener, 'isService' => $isService, 'isLibrary' => $isLibrary, 'isDaemon' => $isDaemon, 'isDatabase' => $isDatabase, 'isShell' => $isShell, 'baseName' => $baseName, 'name' => $basePluginName, 'path' => $pluginPath, 'basePath' => $basePlugin, 'version' => $version ); return $GLOBALS['hPluginCache'][$plugin]; } public function fusePlugins($plugin) {          if (!in_array($plugin, $this->fusePlugins)) { array_push( $this->fusePlugins, $plugin ); }  } public function hasPlugin($fileId) {        return $this->hFiles->selectExists( 'hPlugin', (int) $fileId ); } public function isPrivatePlugin(&$plugin, &$isPrivate) {         if (!is_numeric($plugin)) { $isPrivate = (substr($plugin, 0, 1) !== 'h'); } else {   $this->warning( "Plugin privacy cannot be determined because the numeric id '{$plugin}' was passed. ". "Plugin privacy can only be determined from the plugin's name, ". "which will be determined private if the first letter of the plugin name ". "or path is any character other than lowercase 'h'.", __FILE__, __LINE__ ); return false; } return $isPrivate; } public function getPluginDatabaseTable($plugin) { if (file_exists($GLOBALS['hFramework']->hFrameworkPath.$GLOBALS['hFramework']->hFrameworkRoot('/Hot Toddy').'/'.$plugin)) { return 'hPlugins'; } else if (file_exists($GLOBALS['hFramework']->hFrameworkPluginPath.'/'.$plugin)) { return 'hPluginPrivate'; } else if (file_exists($GLOBALS['hFramework']->hFrameworkApplicationPath.'/'.$plugin)) { return 'hPluginApplication'; } } public function getPluginPathInFramework($path) {              $frameworkPath = $GLOBALS['hFramework']->hFrameworkPath. $GLOBALS['hFramework']->hFrameworkRoot; $pluginPath = $GLOBALS['hFramework']->hFrameworkPluginPath; $applicationPath = $GLOBALS['hFramework']->hFrameworkApplicationPath; if ($this->beginsPath($path, $frameworkPath)) { return $this->getEndOfPath( $path, $frameworkPath ); } else if ($this->beginsPath($path, $pluginPath)) { return $this->getEndOfPath( $path, $pluginPath ); } else if ($this->beginsPath($path, $applicationPath)) { return $this->getEndOfPath( $path, $applicationPath ); } return ''; } public function getBasePath($path) {                 $path = $this->getPluginPathInFramework($path); $fileName = basename($path); $extension = strtolower( $this->getExtension($fileName) ); if ($extension == 'php' && !strstr($fileName, '.template.php')) { $path = substr($path, 1); switch (true) { case strstr($path, '.library.php'): case strstr($path, '.database.php'): case strstr($path, '.service.php'): case strstr($path, '.listener.php'): case strstr($path, '.shell.php'): case strstr($path, '.daemon.php'): { return $path; } default: { $bits = explode('/', $path); array_pop($bits); return implode('/', $bits); } } } return ''; } public function getBaseObjectName($path) {        $name = basename($path); $pluginTypes = array( '.library.php' => 'Library', '.database.php' => 'Database', '.service.php' => 'Service', '.listener.php' => 'Listener', '.shell.php' => 'Shell', '.daemon.php' => 'Daemon' ); foreach ($pluginTypes as $pluginFile => $pluginType) { $name = str_replace( $pluginFile, $pluginType, $name ); } return $name;                                } public function getBaseName($path) {                    $path = $this->getPluginPathInFramework($path); $bits = explode('/', $path); foreach ($bits as $bit) { if (!empty($bit)) { if (strstr($bit, '.')) { $pieces = explode('.', $bit); return array_shift($pieces); } else { return $bit; } } } } public function isServiceMethod($plugin, $pluginServiceMethod) {            return $this->hPluginServices->selectExists( 'hPlugin', array( 'hPluginServiceMethod' => $pluginServiceMethod, 'hPlugin' => $plugin ) ); } public function registerPlugin($plugin) {            if (strstr($plugin, 'hJSON')) { return; } $pluginPath = '/hPlugin/hPlugin.database.php'; if (!class_exists('hPluginDatabase')) { require $this->hServerDocumentRoot.$pluginPath; } $this->hPluginDatabase = new hPluginDatabase($pluginPath); $this->hPluginDatabase->hDatabase = $GLOBALS['hDatabase']; $this->hPluginDatabase->register($plugin); $GLOBALS['hPluginData'] = array(); $GLOBALS['hPluginCache'] = array(); } } ?>