<?php
  class hForumDatabase extends hPlugin { private $hSubscription; public function hConstructor() { $this->hSubscription = $this->library('hSubscription'); } public function &markLastResponse($forumPostId, $userId = 0) {        $this->user->whichUserId($userId); $this->hForumPosts->update( array( 'hForumPostLastResponse' => time(), 'hForumPostLastResponseBy' => (int) $userId, 'hForumPostResponseCount' => 'hForumPostResponseCount + 1' ), array( 'hForumPostId' => (int) $forumPostId, 'hForumPostParentId' => 0 ) ); $this->markLastResponseToTopic($forumPostId, $userId); return $this; } public function &markLastResponseToTopic($forumPostId, $userId = 0) {        $this->user->whichUserId($userId); $forumTopicId = $this->hForumPosts->selectColumn('hForumTopicId', $forumPostId); $this->hForumTopics->update( array( 'hForumTopicLastResponse' => time(), 'hForumTopicLastResponseBy' => (int) $userId, 'hForumTopicResponseCount' => 'hForumTopicResponseCount + 1' ), array( 'hForumTopicId' => (int) $forumTopicId ) ); return $this; } public function getModerators($forumTopicId) {        return $this->hDatabase->select( array( 'DISTINCT', 'hUsers' => 'hUserId' ), array( 'hForumTopics', 'hUsers', 'hUserPermissions', 'hUserPermissionsGroups' ), array( 'hForumTopics.hForumTopicId' => array( array('=', (int) $forumTopicId), array('=', 'hUserPermissions.hFrameworkResourceKey') ), 'hUserPermissions.hFrameworkResourceId' => 4, 'hUserPermissions.hUserPermissionsId' => 'hUserPermissionsGroups.hUserPermissionsId', 'hUserPermissionsGroups.hUserGroupId' => 'hUsers.hUserId', 'hUserPermissionsGroups.hUserPermissionsGroup' => array('LIKE', '%w%') ) ); } public function postIsLocked($forumPostId) {        return $this->postIs($forumPostId, 'hForumPostIsLocked'); } public function &togglePostLock($forumPostId) {        $this->togglePostAttribute($forumPostId, 'hForumPostIsLocked'); return $this; } public function postIsApproved($forumPostId) {        return $this->postIs($forumPostId, 'hForumPostIsApproved'); } public function &togglePostApproval($forumPostId) {        $this->togglePostAttribute($forumPostId, 'hForumPostIsApproved'); return $this; } public function postIsSticky($forumPostId) {        return $this->postIs($forumPostId, 'hForumPostIsSticky'); } public function &togglePostStickiness($forumPostId) {        $this->togglePostAttribute($forumPostId, 'hForumPostIsSticky'); return $this; } public function togglePostAttribute($forumPostId, $attribute) {        $update[$attribute] = !((bool) $this->hForumPosts->selectColumn($attribute, $forumPostId)); $this->hForumPosts->update($update, $forumPostId); return $this->postIs($forumPostId, $attribute); } public function postIs($forumPostId, $field) {        $where['hForumPostId'] = (int) $forumPostId; $where[$field] = 1; return $this->hForumPosts->selectExists('hForumPostId', $where); } public function topicIsModerated($forumTopicId) {        return $this->topicIs($forumTopicId, 'hForumTopicIsModerated'); } public function &toggleTopicModeration($forumTopicId) {        return $this->toggleTopicAttribute($forumTopicId, 'hForumTopicIsModerated'); } public function topicIsLocked($forumTopicId) {        return $this->topicIs($forumTopicId, 'hForumTopicIsLocked'); } public function &toggleTopicLock($forumTopicId) {        return $this->toggleTopicAttribute($forumTopicId, 'hForumTopicIsLocked'); } public function &toggleTopicAttribute($forumTopicId, $attribute) {        $update[$attribute] = !((bool) $this->hForumTopics->selectColumn($attribute, $forumTopicId)); $this->hForumTopics->update($update, $forumTopicId); return $this; } public function topicIs($forumTopicId, $field) {        $where['hForumTopicId'] = (int) $forumTopicId; $where[$field] = 1; return $this->hForumTopics->selectExists( 'hForumTopicId', $where ); } public function getPostSubject($forumPostId) {        return $this->hForumPosts->selectColumn( 'hForumPostSubject', (int) $forumPostId ); } public function getForumName($forumId = 0) {        return $this->hForums->selectColumn( 'hForum', empty($forumId)? (int) $this->hForumId : (int) $forumId ); } public function getUserPostCount($userId) {        return $this->hForumPosts->selectCount( 'hForumPostId', array( 'hUserId' => (int) $userId ) ); } public function getLastThread($forumTopicId) {        return $this->hForumPosts->selectAssociative( array( 'hForumPostId', 'hUserId', 'hForumPostDate' ), array( 'hForumTopicId' => (int) $forumTopicId, 'hForumPostIsApproved' => 1 ), 'AND', array( 'hForumPostId', 'DESC' ), 1 ); } public function getForums($fileId) {        return $this->hForums->selectColumnsAsKeyValue( array( 'hForumId', 'hForum' ), array( 'hFileId' => (int) $fileId ), 'AND', 'hForumSortIndex' ); } public function getTopic($forumTopicId = 0) {        return $this->hForumTopics->selectColumn( 'hForumTopic', empty($forumTopicId)? (int) $this->hForumTopicId : (int) $forumTopicId ); } public function getTopics($forumId) {        return( $this->hDatabase->getResults( $this->getTemplateSQL( array_merge( array( 'forumId' => (int) $forumId ), $this->getPermissionsVariablesForTemplate(true, false, 'r') ) ) ) ); } public function getThreadCount($forumTopicId, $topLevel = false) {        return $this->hForumPosts->selectCount( 'hForumPostId', array_merge( array( 'hForumTopicId' => (int) $forumTopicId, 'hForumPostIsApproved' => 1 ), $topLevel? array('hForumPostParentId' => 0) : array() ) ); } public function &deleteForum($forumId) {        $forumTopics = $this->hForumTopics->select( 'hForumTopicId', array( 'hForumId' => (int) $forumId ) ); foreach ($forumTopics as $forumTopicId) { $this->deleteTopic((int) $forumTopicId); } $this->hForums->deleteSubscription((int) $forumId); $this->hForums->deletePermissions((int) $forumId); $this->hForums->delete('hForumId', (int) $forumId); return $this; } public function &deleteTopic($forumTopicId) {        $forumPosts = $this->hForumPosts->select( 'hForumPostId', array( 'hForumTopicId' => (int) $forumTopicId ) ); foreach ($forumPosts as $forumPostId) { $this->deletePost((int) $forumPostId); } $this->hSubscription->delete('hForumTopics', (int) $forumTopicId); $this->hForumTopics->deletePermissions((int) $forumTopicId); $this->hForumTopics->delete('hForumTopicId', (int) $forumTopicId); return $this; } public function deletePost($forumPostId) {        $forumPostRootId = $this->hForumPosts->selectColumn( 'hForumPostRootId', $forumPostId ); if (!empty($forumPostRootId)) { $this->hForumPosts->update( array( 'hForumPostResponseCount' => 'hForumPostResponseCount - 1' ), $forumPostRootId ); } $forumTopicId = $this->hForumPosts->selectColumn('hForumTopicId', $forumPostId); if (!empty($forumTopicId)) { $this->hForumTopics->update( array( 'hForumTopicResponseCount' => 'hForumTopicResponseCount - 1' ), $forumTopicId ); } $this->hSubscription->delete('hForumPosts', (int) $forumPostId); $this->hForumPosts->deletePermissions((int) $forumPostId); $this->hForumPosts->delete( array( 'hForumPostId' => (int) $forumPostId, 'hForumPostRootId' => (int) $forumPostId ), nil, 'OR' ); } public function save() {        $columns = func_get_args(); return $this->hForums->save($columns); } public function threadHasChildren($forumPostId) {        return $thhis->hForumPosts->selectExists( 'hForumPostId', array( 'hForumPostParentId' => (int) $forumPostId ) ); } public function getThreads($forumTopicId, $forumPostIsApproved = 0, $forumPostIsSticky = 0, $forumPostParentId = 0, $forumPostId = 0) {        $sort = ($forumPostId)? 'ASC' : 'DESC';                 return( $this->hDatabase->getResults( $this->getTemplateSQL( array_merge( array( 'hForumPostId' => (int) $forumPostId, 'hForumTopicId' => (int) $forumTopicId, 'hForumPostIsApproved' => (int) $forumPostIsApproved, 'hForumPostIsSticky' => (int) $forumPostIsSticky, 'hForumPostParentId' => (int) $forumPostParentId, 'hForumPostLimit' => $this->hForumPostLimit(nil), 'sort' => $this->hForumPostSort($sort) ), $this->getPermissionsVariablesForTemplate(true, false, 'r') ) ) ) ); } public function getRecentThreads($fileId, $time, $approved = 0, $limit = nil, $sort = 'DESC') {        if (!is_numeric($time)) { $time = strtotime($time); } $sql = $this->getTemplateSQL( array_merge( array( 'hFileId' => (int) $fileId, 'time' => $time, 'approved' => $approved, 'limit' => $limit, 'sort' => $sort, ), $this->getPermissionsVariablesForTemplate(true, false, 'r') ) ); return $this->hDatabase->getResults($sql); } public function getThreadTopic($forumPostId) {        return $this->hForumPosts->selectColumn('hForumPostSubject', $forumPostId); } public function getReplyCount($forumPostId) {        return $this->hForumPosts->selectCount( 'hForumPostId', array( 'hForumPostRootId' => (int) $forumPostId ) ); } public function getLastReply($forumPostId) {        return $this->hForumPosts->selectAssociative( array( 'hUserId', 'hForumPostDate' ), array( 'hForumPostRootId' => (int) $forumPostId ), 'AND', array( 'hForumPostDate', 'DESC' ), 1 ); } public function savePost($columns) {        return $this->hForumPosts->save($columns); } public function getPostBody($forumPostId) {        return hString::decodeHTML( $this->hForumPosts->selectColumn( 'hForumPost', (int) $forumPostId ) ); } public function getPostAuthor($forumPostId) {        return $this->hForumPosts->selectColumn('hUserId', (int) $forumPostId); } public function getPostAuthorUserName($forumPostId) {        return $this->user->getUserName( $this->hForumPosts->selectColumn( 'hUserId', (int) $forumPostId ) ); } public function &renameForum($forumId, $forumName) {        $this->hForums->update( array( 'hForum' => $forumName ), (int) $forumId ); return $this; } public function newForum($fileId, $forumName, $forumSortIndex = 0, $userId = 0) {        $this->user->whichUserId($userId); $this->hSubscription = $this->library('hSubscription'); if (empty($forumSortIndex)) { $forumSortIndex = $this->hForums->selectCount( 'hForumId', array( 'hFileId' => (int) $fileId ) ); } $forumId = $this->hForums->insert( array( 'hForumId' => 0, 'hFileId' => (int) $fileId, 'hForum' => $forumName, 'hForumSortIndex' => (int) $forumSortIndex, 'hUserId' => (int) $userId ) ); $this->hSubscription->save('hForums', $forumId); return $forumId; } public function saveTopic(array $topic = array()) {        if (!isset($topic['hUserId'])) { $topic['hUserId'] = 0; } $this->user->whichUserId($topic['hUserId']); $this->hSubscription = $this->library('hSubscription'); $columns = array( 'hForumTopicId' => $topic['hForumTopicId'], 'hForumId' => (int) $topic['hForumId'], 'hForumTopic' => $topic['hForumTopic'], 'hUserId' => (int) $topic['hUserId'] ); if (isset($topic['hForumTopicDescription'])) { $columns['hForumTopicDescription'] = $topic['hForumTopicDescription']; } if (isset($topic['hForumTopicIsLocked'])) { $columns['hForumTopicIsLocked'] = (int) $topic['hForumTopicIsLocked']; } if (isset($topic['hForumTopicIsModerated'])) { $columns['hForumTopicIsModerated'] = (int) $topic['hForumTopicIsModerated']; } if (empty($topic['hForumTopicSortIndex']) && empty($topic['hForumTopicId'])) { $columns['hForumTopicSortIndex'] = $this->hForumTopics->selectCount( 'hForumTopicId', array( 'hForumId' => (int) $topic['hForumId'] ) ); } else if (!empty($topic['hForumTopicSortIndex'])) { $columns['hForumTopicSortIndex'] = (int) $topic['hForumTopicSortIndex']; } $forumTopicId = $this->hForumTopics->save($columns); if (empty($topic['hForumTopicId'])) { $this->hSubscription->save( 'hForumTopics', $forumTopicId ); $this->setTopicGroups($this->hForumTopicDefaultGroups(nil)); if (isset($topic['groups'])) { $this->setTopicGroups($topic['groups']); } $this->setTopicGroups($this->hForumTopicDefaultModerators(nil), 'rw'); if (isset($topic['moderators'])) { $this->setTopicGroups($topic['moderators'], 'rw'); } $this->hForumTopics->savePermissions( $forumTopicId, 'rw', $this->hForumTopicDefaultWorldPermissions('') ); } return $forumTopicId; } private function &setTopicGroups($groups, $level = 'r') {        if (!empty($groups)) { if (is_array($groups)) { foreach ($groups as $group) { $this->hForumTopics->setGroup($group, $level); } } else { $this->hForumTopics->setGroup($groups, $level); } } return $this; } public function &sortForums($forums) {        foreach ($forums as $forumId => $formSortIndex) { $this->hForums->update( array( 'hForumSortIndex' => (int) $formSortIndex ), (int) $forumId ); } return $this; } public function &sortTopics($forums) {        foreach ($forums as $forumId => $forumTopics) { foreach ($forumTopics as $forumTopicId => $forumTopicSortIndex) { $this->hForumTopics->update( array( 'hForumId' => (int) $forumId, 'hForumTopicSortIndex' => (int) $forumTopicSortIndex ), (int) $forumTopicId ); } } return $this; } } ?>