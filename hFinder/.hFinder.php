<?php
  interface hFinderDialogueTemplate { public function hConstructor(); public function getControls(); } class hFinder extends hPlugin { private $dialogue = false; private $dialogueType = 'custom'; private $hFile; private $hFinder; private $hFinderTree; private $hDialogue; private $hUserPermissions; private $hFinderDialogue; private $hFinderSideColumn; public function hConstructor() { $this->redirectIfSecureIsEnabled(); if ($this->inGroup('root') && isset($_GET['hFileSystemAllowDuplicates'])) { $this->hFileSystemAllowDuplicates = (int) $_GET['hFileSystemAllowDuplicates']; } if ($this->inGroup('root')) { $this->hFinderCategoriesEnabled = true; } if (!empty($_GET['hFinderConf'])) { $this->loadConfigurationFile( $this->hFrameworkConfigurationPath.'/hFinder '.hString::scrubString($_GET['hFinderConf']) ); } if (isset($_GET['path'])) { hString::safelyDecodeURL($_GET['path']); } if (isset($_GET['hFinderDiskName'])) { hString::safelyDecodeURL($_GET['hFinderDiskName']); $this->hFinderDiskName = hString::scrubString($_GET['hFinderDiskName']); }  $this->hEditorTemplateEnabled = false; if ($this->isLoggedIn()) { $this->getFinder(); } else { $this->notLoggedIn(); } } private function getFinder() { $this->hFileCSS = ''; $this->hFileJavaScript = ''; if ($this->hDesktopApplication(false)) { $this->getPluginFiles('hFinder/hFinderDesktop'); } $this->hFileDocument = ''; $this->hFinder = $this->library('hFinder'); $this->hFile = $this->library('hFile'); $this->hFileFavicon = '/hFinder/Pictures/Finder.ico'; $this->hFileTitle = $this->hServerHost.' Finder'; $this->hFileTitlePrepend = ''; $this->hFileTitleAppend = '';  if (isset($_GET['dialogue'])) { $this->dialogue = true; $this->dialogueType = $_GET['dialogue']; } $this->hFileDisableCache = true; $this->hFileEnableCache = false; $this->hTemplatePath = '/hFinder/hFinder.template.php'; if ($this->dialogue) { switch ($this->dialogueType) { case 'SaveAs':               case 'Image': case 'Link':     case 'Directory':                                case 'Choose': { $this->hFinderDialogue = $this->plugin('hFinder/hFinderDialogue/hFinderDialogue'.$this->dialogueType); break; } default: { $this->warning('Invalid type of dialogue.', __FILE__, __LINE__); } } $this->hFinderHasTree = true; $this->hFinderBodyId = 'hFinderDialogue'.$this->dialogueType; } hString::scrubArray($_GET); if (isset($_GET['path'])) { if (isset($_GET['setDefaultPath'])) { $this->hFinderDefaultPath = $_GET['path']; } else { $path = $_GET['path']; } } if ($this->hFinderDefaultPath) { if ($this->inGroup('root') && $this->hFinderRootOverrideDefaultPath(true)) { } else { $path = $this->hFinderDefaultPath; } } if (empty($path)) { $path = $this->user->getVariable('hFinderPath', '/'); } if ($this->hFinderHasFiles(true) && $this->hFinderEnableContextMenu(true)) { $this->plugin('hFinder/hFinderContextMenu'); } $view = ucwords($this->user->getVariable('hFinderView', 'Icons')); $this->user->hFinderPath($path, $this->user->getUserId(), true); if ($this->beginsPath($path, '/Categories')) { $view = 'List'; } $this->hFinderPath = $path; $this->hFinderView = $view; $this->getPluginCSS('ie6'); $this->getPluginCSS('ie7'); $html = ''; if ($this->hFinderHasFiles(true)) { $html .= $this->getTemplate( 'Configuration', array( 'hFinderLocation' => urlencode($path), 'hFinderView' => $view ) ); if (isset($_GET['hFinderUploadPlugin'])) { $this->hFinderUploadPlugin = $_GET['hFinderUploadPlugin']; } $this->plugin('hFinder/hFinderPasswords'); $this->plugin('hFinder/hFinderToolbar'); if (!isset($_GET['hFinderUploadOverride'])) { $this->plugin($this->hFinderUploadPlugin('hFinder/hFinderUpload')); } else if ($this->inGroup('root')) { $this->plugin('hFinder/hFinderUpload'); } $this->plugin($this->hFinderEditFilePlugin('hFinder/hFinderEditFile')); $this->plugin('hFinder/hFinderCategories'); } if ($this->hFinderHasSideColumn(true)) { $this->hFinderSideColumn = $this->plugin('hFinder/hFinderSideColumn'); $html .= $this->hFinderSideColumn->get(); } else if ($this->hFinderHasTree(false)) { $this->hFinderTree = $this->plugin('hFinder/hFinderTree'); $html .= $this->hFinderTree->getTree(); } if ($this->hFinderHasFiles(true)) { if ($this->hDesktopApplication(false)) { $html .= $this->getTemplate( 'Finder Files', array( 'hFinderView' => 'Icons', 'hFinderColumnsView' => ($view == 'Columns'), 'hFinderListView' => ($view == 'List'), 'hFinderFiles' => '', 'hFinderPath' => $this->hFinder->getEncodedPath($this->hFinderPath) ) ); } else { $html .= $this->getTemplate( 'Finder Files', array( 'hFinderView' => $view, 'hFinderColumnsView' => ($view == 'Columns'), 'hFinderListView' => ($view == 'List'), 'hFinderFiles' => $this->hFinder->getDirectory($path, $view), 'hFinderPath' => $this->hFinder->getEncodedPath($this->hFinderPath) ) ); } } if ($this->hFinderDialogue) { $html .= $this->hFinderDialogue->getControls(); } $this->hFileDocument = $this->getTemplate( 'Finder', array( 'hFinder' => $this->hFileDocument.$html, 'hFinderContextMenu' => $this->hFinderContextMenu(nil) ) ); if ($this->hFinderDialogue && method_exists($this->hFinderDialogue, 'getDialogues')) { $this->hFileDocument .= $this->hFinderDialogue->getDialogues(); } if (isset($_GET['hFinderButtons']) || $this->hFinderButtons(false)) { $this->plugin('hFinder/hFinderButtons'); } } public static function defaultDialogueControls($input, $buttons) { return $this->getTemplate( 'Dialogue Controls', array( 'input' => $input, 'buttons' => $buttons ) ); } } ?>