<?php
  class hFinderPasswordsService extends hService { private $methods = array( 'get' => array( 'authenticate' => 'rw' ), 'save' => array( 'authenticate' => 'rw', 'isset' => array( '_POST' => array( 'hFilePassword', 'hFilePasswordCreated', 'hFilePasswordLifetime', 'hFilePasswordExpirationAction', 'hFilePasswordRequired' ) ) ), 'delete' => array( 'authenticate' => 'rw', 'isset' => array( '_GET' => array( 'hFilePasswordCreated' ) ) ) ); private $hFile; private $hFinder; public function hConstructor() { hString::safelyDecodeURL($_GET['path']); hString::safelyDecodeURL($_POST['path']); $this->hFile = $this->library('hFile'); $this->hFinder = $this->library('hFinder'); $json = $this->hFile->listenerValidation($this->methods, $this->hListenerMethod); if ($json <= 0) { $this->JSON($json); return; } } public function get() {  if (!$this->hFile->isServer && !$this->hFile->isDirectory) { $this->JSON( $this->hFilePasswords->select( array( 'hFilePassword', 'hFilePasswordLifetime', 'hFilePasswordExpirationAction', 'hFilePasswordRequired', 'hFilePasswordCreated', 'hFilePasswordExpires' ), (int) $this->hFile->fileId ) ); return; } $this->JSON(0); } public function save() { hString::scrubArray($_POST); $passwordExists = $this->hFilePasswords->selectExists( 'hFilePasswordCreated', array( 'hFileId' => (int) $this->hFile->fileId, 'hFilePassword' => $_POST['hFilePassword'] ) ); if (!$passwordExists && empty($_POST['hFilePasswordCreated'])) {  $created = time(); $lifetime = (int) $_POST['hFilePasswordLifetime']; $expires = $lifetime? $this->getExpiration($lifetime, $created) : 0; $this->hFilePasswords->insert( array( 'hFileId' => (int) $this->hFile->fileId, 'hFilePassword' => $_POST['hFilePassword'], 'hFilePasswordLifetime' => $lifetime, 'hFilePasswordExpirationAction' => (int) $_POST['hFilePasswordExpirationAction'], 'hFilePasswordRequired' => (int) $_POST['hFilePasswordRequired'], 'hFilePasswordCreated' => $created, 'hFilePasswordExpires' => $expires ) ); } else { $query = $this->hFilePasswords->selectQuery( 'hFilePasswordCreated', array( 'hFileId' => (int) $this->hFile->fileId, 'hFilePassword' => $_POST['hFilePassword'] ) ); $passwordCount = $this->hDatabase->getResultCount($query); if ($passwordCount > 1) { $created = $this->hDatabase->getColumn($query); $this->hFilePasswords->delete( array( 'hFileId' => (int) $this->hFile->fileId, 'hFilePassword' => $hFilePassword ) ); } else { $created = (int) $_POST['hFilePasswordCreated']; } $lifetime = (int) $_POST['hFilePasswordLifetime']; $expires = $lifetime? $this->getExpiration($lifetime, $created) : 0; $this->hFilePasswords->update( array( 'hFilePassword' => $_POST['hFilePassword'], 'hFilePasswordLifetime' => $lifetime, 'hFilePasswordExpirationAction' => (int) $_POST['hFilePasswordExpirationAction'], 'hFilePasswordRequired' => (int) $_POST['hFilePasswordRequired'], 'hFilePasswordExpires' => $expires ), array( 'hFileId' => (int) $this->hFile->fileId, 'hFilePasswordCreated' => $created ) ); } $this->JSON(1); } public function delete() { $this->hFilePasswords->delete( array( 'hFileId' => (int) $this->hFile->fileId, 'hFilePasswordCreated' => (int) $_GET['hFilePasswordCreated'] ) ); $this->JSON(1); } private function getExpiration($lifetime, $created) { return ($lifetime > 0)? (int) $created + (($lifetime * 60) * 60) : 0; } } ?>