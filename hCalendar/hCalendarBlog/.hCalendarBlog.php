<?php
  class hCalendarBlog extends hPlugin { private $hCalendarDatabase; private $hCategoryDatabase; private $hListDatabase; private $hFileComments; private $hFileCommentsDatabase; private $hList; private $hSearch; private $hFacebook; private $hSearchNavigation = nil; private $postCount = nil; private $hCalendarResourceLastModified; public function hConstructor() { $this->hFileDocumentSelector = ''; $this->getPluginCSS(); $this->hFileGetMetaData = false; $this->hCalendarDatabase = $this->database('hCalendar'); $fileId = $this->hCalendarFileThumbnailId(0, $this->hFileId); if ($fileId) { $this->hFacebookThumbnail = "http://".$this->hServerHost.$this->cloakSitesPath($this->getFilePathByFileId($fileId)); } $categoryTags = array(); $categoryId = 0; if ($this->hCalendarTagCategoryId(0)) { $this->hCategoryDatabase = $this->database('hCategory'); $this->hCategoryDatabase->setDatabaseReturnFormat('getResultsForTemplate'); $categoryTags = $this->hCategoryDatabase->getSubCategories( $this->hCalendarTagCategoryId, $this->hCalendarBlogPath, true, true ); if (!empty($_GET['hCategoryId'])) { $this->hCalendarDatabase->setCategoryId($_GET['hCategoryId']); $categoryId = (int) $_GET['hCategoryId']; } } $rss = '/hCalendar/RSS?calendar='.$this->hFileId.'/'.$this->hCalendarId(1).'/'.$this->hCalendarCategoryId(3); $this->hFileRSS = $this->getTemplate( 'hCalendarBlogRSSTemplate:RSS', array( 'rss' => $rss ) );   $blogRollLinks = $this->hCalendarBlogRollLinks(nil); $links = array(); if (isset($blogRollLinks) && is_array($blogRollLinks) && count($blogRollLinks)) { foreach ($blogRollLinks as $link) { $links['hCalendarBlogRollLink'][] = $link->link; $links['hCalendarBlogRollLabel'][] = $link->label; if (isset($link->target)) { $links['hCalendarBlogRollLinkTarget'][] = $link->target; } } } else { $links = false; } $recentPosts = $this->hCalendarDatabase->getCached( 'hCalendarBlogRecentPosts', $this->hCalendarId(1), $this->hCalendarCategoryId(3), $this->hFileId.','.$categoryId ); if ($recentPosts === false) { $recentPosts = $this->getTemplate( 'hCalendarBlogRecentPostsTemplate:Recent Posts', array( 'hCalendarRecentPostsTitle' => $this->hCalendarRecentPostsTitle('Recent Posts'), 'hCalendarRecentPosts' => $this->getRecentPosts(), 'hCalendarBlogRollTitle' => $this->hCalendarBlogRollTitle('Blog Roll'), 'hCalendarBlogRollLinks' => $links ) ); $this->hCalendarDatabase->saveToCache( $recentPosts, 'hCalendarBlogRecentPosts', $this->hCalendarId(1), $this->hCalendarCategoryId(3), $this->hFileId.','.$categoryId ); } $recentPosts = array($recentPosts); if ($this->hCalendarRecentPosts(nil)) { $calendars = is_array($this->hCalendarRecentPosts)? $this->hCalendarRecentPosts : explode(',', $this->hCalendarRecentPosts); $calendarTitles = is_array($this->hCalendarRecentPostsTitles)? $this->hCalendarRecentPostsTitles : explode('|', $this->hCalendarRecentPostsTitles); foreach ($calendars as $i => $calendar) { list($calendarId, $calendarCategoryId, $calendarBlogLinkCount) = explode(':', $calendar); array_push( $recentPosts, $this->getTemplate( 'hCalendarBlogRecentPostsTemplate:Recent Posts', array( 'hCalendarRecentPostsTitle' => $calendarTitles[$i], 'hCalendarRecentPosts' => $this->getRecentPosts($calendarId, $calendarCategoryId, $calendarBlogLinkCount), 'hCalendarBlogRollLinks' => false ) ) ); } } if ($this->hCalendarRecentPosts(true)) { $recentPosts = implode( $this->getTemplate('Recent Posts Separator'), $recentPosts ); } if ($this->hCalendarRecentPostsVariable(nil)) { $variable = $this->hCalendarRecentPostsVariable(nil); $this->$variable = $recentPosts; $recentPosts = ''; } if ($this->hCalendarRSSLink(nil)) { $this->hCalendarRSSLink = $rss; } else { $rss = $this->hCalendarRSSLink; } if (!$this->hCalendarRSSIcon(nil)) { $this->hCalendarRSSIcon = '/images/icons/24x24/rss.png'; } if (!$this->hCalendarIncludeRSSLink(true)) { $rss = ''; } $this->hFileDocument = $this->getTemplate( 'hCalendarBlogTemplate:Blog', array( 'hCalendarBlog' => ($this->hCalendarBlogPost(false) || $this->hCalendarNewsPost(false)) && !isset($_GET['hCalendarMonth'])? $this->getPost() : $this->getPosts(), 'rssLink' => $rss, 'rssIcon' => $this->hCalendarRSSIcon('/images/icons/24x24/rss.png'), 'hCalendarRecentPosts' => $recentPosts, 'hCalendarBlogPath' => $this->hCalendarBlogPath($this->hFilePath), 'hCalendarOtherPosts' => '', 'hCalendarTagCategoryId' => $this->hCalendarTagCategoryId(0), 'hCategoryTags' => $categoryTags, 'hCalendarBlogArchive' => $this->hCalendarBlogArchiveEnabled(true)? $this->getArchive() : '', 'postCount' => $this->postCount ) ); } private function getPost() {         if ($this->hCalendarBlogSyntaxHighlighting(false)) { $this->getPluginCSS('/Library/SyntaxHighlighter/Styles/shCore', true); $this->getPluginCSS('/Library/SyntaxHighlighter/Styles/shThemeDefault', true); $this->getPluginJavaScript(); $this->getPluginJavaScript('/Library/SyntaxHighlighter/Scripts/shCore', true); $brushes = array('Bash', 'Css', 'JScript', 'Php', 'Sql', 'Xml', 'Plain'); foreach ($brushes as $brush) { $this->getPluginJavascript('/Library/SyntaxHighlighter/Scripts/shBrush'.$brush, true); } }    $file = $this->hCalendarDatabase->getFile($this->hFileId); $this->hFileComments = $this->library('hFile/hFileComments'); if ($this->hCalendarBlogTemplateMarkup(false)) { $this->hFileDocument = $this->parseTemplateMarkup($this->hFileDocument); } $post = $this->getTemplate( 'hCalendarBlogSinglePostTemplate:Single Post', array( 'hCalendarBlogPostSummary' => $this->hFileDocument, 'hCalendarBlogPost' => $this->hCalendarBlogPost(false), 'hCalendarLink' => $this->hCalendarLink(nil, $this->hFileId), 'hCalendarBlogPostTitle' => $this->hFileHeadingTitle($this->hFileTitle), 'hCalendarBlogPostAuthor' => $this->getAuthor($this->hUserId), 'hCalendarBlogPostDate' => date($this->hCalendarBlogPostDateFormat('F j, Y'), $file['hCalendarDate']), 'hCalendarBlogPostComments' => $this->hFileComments->getComments() ) );  return $post; } private function getAuthor($userId) {                   $author = ''; if ($this->hCalendarBlogPostAuthor(true)) { switch (strtolower($this->hCalendarBlogPostAuthorNameSource('firstName'))) { case 'displayname': { $author = $this->user->getFullName($userId); break; } case 'firstname': { $author = $this->user->getFirstName($userId); break; } case 'username': { $author = $this->user->getUserName($userId); break; } } } return $author; } private function getPosts() {        $posts = $this->hCalendarDatabase->getCached( 'hCalendarBlogPosts', $this->hCalendarId(1), $this->hCalendarCategoryId(3), $_SERVER['REQUEST_URI'] ); if ($posts === false) { $this->hSearch = $this->library('hSearch'); if (isset($_GET['hCalendarMonth'])) { $time = (int) $_GET['hCalendarMonth']; $range = ">= {$time},<= ".mktime(0, 0, 0, date('n', $time), date('t', $time), date('Y', $time)); } else { $range = nil; } if (!$range) { $this->hSearchResultsPerPage = $this->hCalendarBlogCount(7); } $files = $this->hCalendarDatabase->getFilesForTemplate( array( 'hCalendarDate' => $this->hCalendarBlogPostDateFormat('F j, Y'), 'hCalendarBeginTime' => $this->hCalendarBlogPostBeginTimeFormat('F j, Y h:i a'), 'hCalendarEndTime' => $this->hCalendarBlogPostEndTimeFormat('F j, Y h:i a') ), $this->hCalendarId(1), $this->hCalendarCategoryId(3), $range? 0 : $this->hSearch->getLimit(), $range, $range? false : true, 'DESC' ); $this->postCount = $this->hCalendarDatabase->getResultCount(); $searchNavigation = nil; if (!$range) { $parameters = array(); if (isset($_GET['hCategoryId'])) { $parameters['hCategoryId'] = $_GET['hCategoryId']; } $this->hSearch->setParameters($this->postCount); $searchNavigation = $this->hSearch->getNavigationHTML( $this->hFilePath, $parameters ); } if (isset($files['hFileId']) && is_array($files['hFileId']) && count($files['hFileId'])) { foreach ($files['hFileId'] as $i => $fileId) { $files['hCalendarLink'][$i] = $this->hCalendarLink(nil, $fileId); } } $posts = $this->getTemplate( 'hCalendarBlogPostTemplate:Post', array( 'hFiles' => $files, 'hCalendarBlogPostLinkArguments' => $this->hCalendarBlogPostLinkArguments(nil), 'hCalendarBlogPostAuthor' => $this->hCalendarBlogPostAuthor(true), 'hCalendarBlogFullName' => $this->hCalendarBlogFullName(false), 'hCalendarBlogFirstName' => $this->hCalendarBlogFirstName(true), 'hCalendarBlogUserName' => $this->hCalendarBlogUserName(false), 'hSearchNavigation' => $searchNavigation ) ); $this->hCalendarDatabase->saveToCache( $posts, 'hCalendarBlogPosts', $this->hCalendarId(1), $this->hCalendarCategoryId(3), $_SERVER['REQUEST_URI'] ); } return $posts; } private function getRecentPosts($calendarId = 0, $calendarCategoryId = 0, $calendarBlogLinkCount = 0) {                                                                                           return $this->getTemplate( 'hCalendarBlogRecentPostTemplate:Recent Post', array( 'hFiles' => $this->hCalendarDatabase->getFilesForTemplate( array( 'hCalendarDate' => $this->hCalendarBlogRecentPostDateFormat('m/d/y'), 'hCalendarBeginTime' => $this->hCalendarBlogRecentPostBeginTimeFormat('m/d/y h:i a'), 'hCalendarEndTime' => $this->hCalendarBlogRecentPostEndTimeFormat('m/d/y h:i a'), ), $calendarId > 0? $calendarId : $this->hCalendarId(1), $calendarCategoryId > 0? $calendarCategoryId : $this->hCalendarCategoryId(3), $calendarBlogLinkCount > 0? $calendarBlogLinkCount : $this->hCalendarBlogRecentLinkCount(12), nil, true, 'DESC' ), 'hCalendarBlogPostLinkArguments' => $this->hCalendarBlogPostLinkArguments(nil), ) ); } private function getArchive() {                                                               $archive = $this->hCalendarDatabase->getCached( 'hCalendarBlogArchive', $this->hCalendarId(1), $this->hCalendarCategoryId(3) ); if ($archive === false) { $oldestDate = $this->hCalendarDatabase->getOldestDate( $this->hCalendarId(1), $this->hCalendarCategoryId(3) ); $newestDate = $this->hCalendarDatabase->getNewestDate( $this->hCalendarId(1), $this->hCalendarCategoryId(3) ); if (is_numeric($oldestDate) && is_numeric($newestDate) && $oldestDate > 0 && $newestDate > 0) {  $years = range( date('Y', $oldestDate), date('Y', $newestDate) ); rsort($years);   $months = range(1, 12); $calendarBlogArchiveYears = ''; foreach ($years as $year) { $calendarBlogArchiveYears .= $this->getTemplate( 'hCalendarBlogArchiveYearsTemplate:Archive Year', array( 'hCalendarBlogArchiveYear' => $year, 'hCalendarBlogArchiveMonths' => $this->hCalendarDatabase->getArchiveMonths( $year, $this->hCalendarId(1), $this->hCalendarCategoryId(3) ), 'hFilePath' => $this->hCalendarArchivePath($this->hFilePath) ) ); } $archive = $this->getTemplate( 'hCalendarBlogArchiveTemplate:Archive', array( 'hCalendarBlogArchiveHeading' => $this->hCalendarBlogArchiveHeading('Archive'), 'hFilePath' => $this->hCalendarArchivePath($this->hFilePath), 'hCalendarBlogArchivePresent' => $this->hCalendarBlogArchivePresent('Current Posts'), 'hCalendarBlogArchiveYears' => $calendarBlogArchiveYears ) ); $this->hCalendarDatabase->saveToCache( $archive, 'hCalendarBlogArchive', $this->hCalendarId(1), $this->hCalendarCategoryId(3) ); } } return $archive; } } ?>