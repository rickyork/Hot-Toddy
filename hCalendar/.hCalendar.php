<?php
  class hCalendar extends hPlugin { private $hCalendar; private $hCalendarView; private $hCalendarDatabase; private $hCalendarEventForm; private $hCategoryDatabase; private $hDialogue; private $hForm; private $defaultCalendar; private $calendars = array(); public function hConstructor() { $this->redirectIfSecureIsEnabled(); if ($this->isLoggedIn()) { $this->hFileCSS = ''; $this->hFileJavaScript = ''; $this->jQuery('Datepicker'); $this->plugin('hApplication/hApplicationStatus'); $this->getPluginCSS('hSearch'); $this->getPluginFiles(); $this->getPluginCSS('ie7'); $this->hFileTitle = $this->hServerHost.' Calendar'; $this->hFileTitlePrepend = ''; $this->hFileTitleAppend = ''; $this->hTemplatePath = '/hCalendar/hCalendar.template.php'; $this->hCalendarDatabase = $this->database('hCalendar'); $this->hCalendar = $this->library('hCalendar'); $this->hCalendarEventForm = $this->library('hCalendar/hCalendarEventForm'); $this->hCalendarView = $this->library('hCalendar/hCalendarView'); $this->hFileFavicon = '/hCalendar/Pictures/Calendar.ico'; $shared = $this->hCalendarDatabase->getShared(); $this->hCalendarWeekday = 'initial'; $hCalendarMini = $this->hCalendarView->get(null, 'hCalendarMini'); $this->hCalendarWeekday = 'l'; $this->hCalendarView->dateFormats(); $hCalendar = $this->hCalendarView->get(); $events = $this->hCalendar->getEvents(); $this->hFileDocument = $this->getTemplate( 'Calendar', array( 'hCalendarMini' => $hCalendarMini, 'hCalendar' => $hCalendar, 'hCalendarDefault' => (int) $this->defaultCalendar, 'hCalendarMiniState' => $this->hCalendarMiniState(1), 'hCalendarMiniOn' => $this->hCalendarMiniState(1) == 1? '_on' : '', 'hCalendarOwner' => $this->getCheckboxes($this->hCalendarDatabase->getCalendars()), 'hCalendarEvents' => $events['events'], 'hCalendarEventNavigation' => $events['navigation'], 'hCalendarEventForm' => $this->hCalendarEventForm->get(), 'hCalendarSelectCategoryDialogue' => $this->getCategoryDialogue() ) ); } else { $this->notLoggedIn(); } } private function getCategoryDialogue() { if ($this->hCalendarCategoryEnabled(true)) { $this->hDialogue = $this->library('hDialogue'); $categories = $this->hCalendarDatabase->getCategories(); $templateCategories = array(); foreach ($categories as $categoryId => $categoryName) { $templateCategories['hCalendarCategoryId'][] = $categoryId; $templateCategories['hCalendarCategoryName'][] = $categoryName; } $this->hDialogue->newDialogue('hCalendarSelectCategory'); $this->hDialogue->addButtons('Continue', 'Cancel'); return $this->hDialogue->getDialogue( $this->getTemplate( 'Select Category', array( 'categories' => $templateCategories ) ), 'New Calendar Document' ); } return null; } private function getCheckboxes($calendars) { $html = ''; foreach ($calendars as $calendarId => $calendarName) { if (!in_array($calendarName, $this->calendars)) { $hasPermission = $this->hCalendars->hasPermission($calendarId, 'rw'); $isChecked = $hasPermission? (int) $this->user->getVariable('hCalendarToggleState-'.$calendarId, 1) : false; $html .= $this->getTemplate( 'Checkbox', array( 'hCalendarId' => $calendarId, 'hCalendarName' => $calendarName, 'hCalendarOptionClass' => '', 'hCalendarTemplateClass' => '', 'hCalendarChecked' => $isChecked? " checked='checked'" : '', 'hasPermission' => $hasPermission ) ); $this->calendars[$calendarId] = $calendarName; } } $html .= $this->getTemplate( 'Checkbox', array( 'hCalendarId' => 0, 'hCalendarName' => '', 'hCalendarOptionClass' => '', 'hCalendarTemplateClass' => ' hCalendarOptionTemplate', 'hCalendarChecked' => '' ) ); return $html; } } ?>