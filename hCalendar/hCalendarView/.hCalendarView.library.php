<?php
  class hCalendarViewLibrary extends hPlugin { private $dateFormats = array();  public function dateFormats(array $options = array()) {                                                                                                $this->dateFormats = $options; if (!isset($this->dateFormats['hCalendarWeekday'])) { $this->dateFormats['hCalendarWeekday'] = $this->hCalendarWeekday('l'); } if (!isset($this->dateFormats['hCalendarDay'])) { $this->dateFormats['hCalendarDay'] = $this->hCalendarDay('j'); } if (!isset($this->dateFormats['hCalendarMonth'])) { $this->dateFormats['hCalendarMonth'] = $this->hCalendarMonth('F'); } if (!isset($this->dateFormats['hCalendarYear'])) { $this->dateFormats['hCalendarYear'] = $this->hCalendarYear('Y'); } } public function get($calendarDate = null, $calendarUniqueId = 'hCalendar', $calendarOffset = 0, $calendarEvents = array()) {                                        if (is_null($calendarDate)) { $calendarDate = mktime(0, 0, 0, date('n') + (int) $calendarOffset, 1, date('Y')); } if (!count($this->dateFormats)) { $this->dateFormats(); } $thisMonth = date('m', $calendarDate); $thisYear = date('Y', $calendarDate); $numberOfDaysInMonth = date('t', $calendarDate);    $weekdayOfTheFirstDay = date('w', mktime(0, 0, 0, $thisMonth, 1, $thisYear)); $weekdayOfTheLastDay = date('w', mktime(0, 0, 0, $thisMonth, $numberOfDaysInMonth, $thisYear));     $totalDayCount = $numberOfDaysInMonth + $weekdayOfTheFirstDay + (6 - $weekdayOfTheLastDay); $totalWeekCount = $totalDayCount / 7; $week = 1; $day = 1; $nextMonthDay = 1; $calendarWeekdays = array(); $calendarWeeks = ''; $calendarWeekdayHeadings = array(); for ($dayCount = 1; $dayCount <= $totalDayCount; $dayCount++) { $calendarDayClass = ''; $calendarDayId = ''; $hasEvents = false; if ($weekdayOfTheFirstDay > 0) {   $calendarDayTimestamp = mktime(0, 0, 0, $thisMonth, 1 - $weekdayOfTheFirstDay, $thisYear); $calendarDayClass .= ' hCalendarLastMonth'; $calendarDayId = 'hCalendarLastMonth'; $weekdayOfTheFirstDay--; } else if ($day <= $numberOfDaysInMonth) {  $calendarDayTimestamp = mktime(0, 0, 0, $thisMonth, $day, $thisYear); $calendarDayId = 'hCalendarThisMonth'; $calendarDayClass .= ' hCalendarThisMonth'; if (mktime(0, 0, 0, date('n'), date('j'), date('Y')) == $calendarDayTimestamp) { $calendarDayClass .= ' hCalendarToday'; } if ($day == 1) { $calendarDayClass .= ' hCalendarFirst'; } else if ($day == $numberOfDaysInMonth) { $calendarDayClass .= ' hCalendarLast'; } if (is_array($calendarEvents) && count($calendarEvents)) { foreach ($calendarEvents as $calendarEvent) { if ($calendarEvent >= $calendarDayTimestamp && $calendarEvent < ($calendarDayTimestamp + 86400)) { $calendarDayClass .= ' hCalendarEvent'; $hasEvents = true; break; } } } $day++; } else { $calendarDayTimestamp = mktime(0, 0, 0, $thisMonth + 1, $nextMonthDay, $thisYear); $calendarDayClass .= ' hCalendarNextMonth'; $calendarDayId = 'hCalendarNextMonth'; $nextMonthDay++; } if ($week == 1) { $weekday = date($this->dateFormats['hCalendarWeekday'] == 'initial'? 'l' : $this->dateFormats['hCalendarWeekday'], $calendarDayTimestamp); if ($this->dateFormats['hCalendarWeekday'] == 'initial') { $weekday = substr($weekday, 0, 1); } $calendarWeekdayHeadings['weekday'][] = $weekday; } $calendarWeekdays['dayHasEvents'][] = $hasEvents; $calendarWeekdays['dayClass'][] = $calendarDayClass;  $calendarWeekdays['dayId'][] = $calendarDayId; $calendarWeekdays['dayTimestamp'][] = $calendarDayTimestamp; $calendarWeekdays['calendarDay'][] = date($this->dateFormats['hCalendarDay'], $calendarDayTimestamp); $calendarWeekdays['day'][] = date('d', $calendarDayTimestamp);  if (!($dayCount % 7)) { $calendarWeeks .= $this->getTemplate( 'Week', array( 'weekdays' => $calendarWeekdays, 'uniqueId' => $calendarUniqueId ) ); $calendarWeekdays = array(); $week++; } } return $this->getTemplate( 'Calendar', array( 'class' => $calendarUniqueId, 'uniqueId' => $calendarUniqueId, 'date' => mktime(0, 0, 0, $thisMonth, 1, $thisYear), 'formattedMonth' => date($this->dateFormats['hCalendarMonth'], $calendarDate), 'formattedYear' => date($this->dateFormats['hCalendarYear'], $calendarDate), 'weekdays' => $calendarWeekdayHeadings, 'weeks' => $calendarWeeks, 'offset' => ($calendarOffset > 0? '+' : '').$calendarOffset, 'month' => date('m', $calendarDate), 'year' => date('Y', $calendarDate), 'fiveWeeks' => $week == 6 ) ); } }  ?>