<?php
  class hCalendarDatabase extends hPlugin { private $hFile; private $hFileIcon; private $hFileCache; private $permissionsMethod = 'all'; private $categoryId = 0; private $hCategoryDatabase; private $hList; private $datesInQuery = array(); private $resultCount = 0; private $fileCalendars = array(); public function saveCalendar() {                 $columns = func_get_args(); $this->hCalendars->activity( (empty($columns[0])? 'Created' : 'Modified').' Calendar: '.$columns[2] ); $calendarId = $this->hCalendars->save($columns); $this->syncCalendarResources(); $this->modifiedResource($calendarId); return $calendarId; } private function compareExpirationData($query, $expires) {        $columns = array(); if ($expires) { foreach ($query as $data) { if ($data['hCalendarResourceCacheExpires'] > $expires || !$data['hCalendarResourceCacheExpires']) { $columns['hCalendarResourceCacheExpires'] = $expires; } } } return $columns; } public function modifiedResource($calendarId = 0, $calendarCategoryId = 0, $begin = 0, $end = 0) {        $expires = 0; if ($begin > $end && $end != 0) { $expires = $end; } else if ($begin) { $expires = $begin; } else { $expires = $end; } $where = array(); $columns = array(); if (!empty($calendarId)) { $where['hCalendarId'] = (int) $calendarId; $this->hCalendars->modifyResource($calendarId); } if (!empty($calendarCategoryId)) { $where['hCalendarCategoryId'] = (int) $calendarCategoryId; } if ($expires) { $columns = $this->compareExpirationData( $this->hCalendarResources->select('hCalendarResourceCacheExpires', $where), $expires ); } $this->hCalendarResources->update( array_merge( array( 'hCalendarResourceLastModified' => time() ), $columns ), $where ); } public function resourceExists($calendarId, $calendarCategoryId) {          return $this->hCalendarResources->selectExists( 'hCalendarResourceId', array( 'hCalendarId' => (int) $calendarId, 'hCalendarCategoryId' => (int) $calendarCategoryId ) ); } public function getResourceId($calendarId, $calendarCategoryId) {         return $this->hCalendarResources->selectColumn( 'hCalendarResourceId', array( 'hCalendarId' => (int) $calendarId, 'hCalendarCategoryId' => (int) $calendarCategoryId ) ); } public function getResource($calendarId, $calendarCategoryId = 0) {                                                                                                                                                           $where = array(); if (empty($calendarCategoryId)) { $where = array( 'hCalendarResourceId' => (int) $calendarId ); } else { $where = array( 'hCalendarId' => (int) $calendarId, 'hCalendarCategoryId' => (int) $calendarCategoryId ); } $resource = $this->hCalendarResources->selectAssociative( array( 'hCalendarResourceId', 'hCalendarResourceName', 'hUserId', 'hPlugin', 'hDirectoryId', 'hUserPermissionsOwner', 'hUserPermissionsWorld', 'hUserPermissionsInherit', 'hCalendarResourceLastModified', 'hCalendarResourceLastModifiedBy', 'hCalendarResourceCacheExpires' ), $where ); if (!is_array($resource) || !count($resource)) { return false; } $resource['hCalendarPermissionsGroups'] = $this->hCalendarResourcePermissionsGroups->selectColumnsAsKeyValue( array( 'hUserGroupId', 'hUserPermissionsGroup' ), array( 'hCalendarResourceId' => (int) $resource['hCalendarResourceId'] ) ); return $resource; } public function saveResource(array $columns, $userId = 0, $begin = 0, $end = 0) {        $this->user->whichUserId($userId); if (isset($columns['hPluginPath'])) { $columns['hPlugin'] = $columns['hPluginPath']; unset($columns['hPluginPath']); } if (!isset($columns['hPlugin'])) { $columns['hPlugin'] = ''; } if (isset($columns['hDirectoryPath'])) { $this->hFile = $this->library('hFile'); if (!$this->hFile->exists($columns['hDirectoryPath'])) { $columns['hDirectoryId'] = $this->hFile->makePath( $columns['hDirectoryPath'], array( 'hUserId' => (int) $userId, 'hUserPermissionsOwner' => 'rw', 'hUserPermissionsWorld' => 'r', 'hUserPermissionsGroups' => array( 'Website Administrators' => 'rw' ) ) ); } else { $columns['hDirectoryId'] = $this->getDirectoryId($columns['hDirectoryPath']); } } if (!$this->resourceExists($columns['hCalendarId'], $columns['hCalendarCategoryId'])) { $calendarResourceId = $this->hCalendarResources->insert( array( 'hCalendarResourceId' => 0, 'hCalendarId' => (int) $columns['hCalendarId'], 'hCalendarCategoryId' => (int) $columns['hCalendarCategoryId'], 'hCalendarResourceName' => isset($columns['hCalendarResourceName']) ? $columns['hCalendarResourceName'] : '', 'hUserId' => $userId, 'hPlugin' => $columns['hPlugin'], 'hDirectoryId' => (int) $columns['hDirectoryId'], 'hUserPermissionsOwner' => isset($columns['hUserPermissionsOwner']) ? $columns['hUserPermissionsOwner'] : 'rw', 'hUserPermissionsWorld' => isset($columns['hUserPermissionsWorld']) ? $columns['hUserPermissionsWorld'] : 'r', 'hUserPermissionsInherit' => (int) !empty($columns['hUserPermissionsInherit']), 'hCalendarResourceCreated' => time(), 'hCalendarResourceLastModified' => 0, 'hCalendarResourceLastModifiedBy' => isset($_SESSION['hUserId']) ? $_SESSION['hUserId'] : 0, 'hCalendarResourceCacheExpires' => isset($columns['hCalendarResourceCacheExpires']) ? (int) $columns['hCalendarResourceCacheExpires'] : 0 ) ); } else { $calendarResourceId = $this->getResourceId( $columns['hCalendarId'], $columns['hCalendarCategoryId'] ); $this->hCalendarResources->update( array( 'hCalendarResourceId' => $calendarResourceId, 'hCalendarResourceName' => isset($columns['hCalendarResourceName']) ? $columns['hCalendarResourceName'] : '', 'hUserId' => $userId, 'hPlugin' => $columns['hPlugin'], 'hDirectoryId' => (int) $columns['hDirectoryId'], 'hUserPermissionsOwner' => isset($columns['hUserPermissionsOwner']) ? $columns['hUserPermissionsOwner'] : 'rw', 'hUserPermissionsWorld' => isset($columns['hUserPermissionsWorld']) ? $columns['hUserPermissionsWorld'] : 'r', 'hUserPermissionsInherit' => (int) !empty($columns['hUserPermissionsInherit']), 'hCalendarResourceLastModified' => time(), 'hCalendarResourceLastModifiedBy' => isset($_SESSION['hUserId']) ? $_SESSION['hUserId'] : 0, 'hCalendarResourceCacheExpires' => isset($columns['hCalendarResourceCacheExpires']) ? (int) $columns['hCalendarResourceCacheExpires'] : 0 ), array( 'hCalendarId' => (int) $columns['hCalendarId'], 'hCalendarCategoryId' => (int) $columns['hCalendarCategoryId'] ) ); } if (isset($columns['hUserPermissionsGroups'])) { $this->saveResourceGroups($calendarResourceId, $columns['hUserPermissionsGroups']); } $this->modifiedResource( $columns['hCalendarId'], $columns['hCalendarCategoryId'], $begin, $end ); return $calendarResourceId; } public function &saveResourceGroups($calendarResourceId, $userPermissionsGroups) {        $this->hCalendarResourcePermissionsGroups->delete( 'hCalendarResourceId', (int) $calendarResourceId ); foreach ($userPermissionsGroups as $group => $level) { $this->hCalendarResourcePermissionsGroups->insert( array( 'hCalendarResourceId' => (int) $calendarResourceId, 'hUserGroupId' => is_numeric($group) ? $group : $this->user->getUserId($group), 'hUserPermissionsGroup' => $level ) ); } return this; } public function hasAccessToCalendar($calendarId = 0, $fileId = 0, $level = 'r') {                if ($this->isLoggedIn() && $this->inGroup('Calendar Administrators')) { return true; } if (!empty($calendarId)) { if (is_array($calendarId)) { foreach ($calendarId as $calendar) { if ($this->hCalendars->hasPermission($calendar, $level)) { return true; } } } else if ($this->hCalendars->hasPermission($calendarId, $level)) { return true; } } if (!empty($fileId)) { return $this->hFiles->hasPermission($fileId, $level); } return false; } public function getCategories() {          return $this->hCalendarCategories->selectColumnsAsKeyValue( array( 'hCalendarCategoryId', 'hCalendarCategoryName' ) ); } public function getCalendars($level = 'r', $checkPermissions = true, $checkWorldPermissions = false) {               return $this->hDatabase->getAssociativeArray( $this->getTemplateSQL( $this->getPermissionsVariablesForTemplate( $checkPermissions, $checkWorldPermissions, $level ) ) ); } public function getCalendarIds() {        return $this->hCalendars->select('hCalendarId'); } public function getFileCalendars($fileId) {         return $this->hCalendarFiles->select( 'hCalendarId', array( 'hFileId' => (int) $fileId ) ); } public function getCalendarFileIds($calendarId = 0, $calendarCategoryId = 0, $fileId = 0) {          $columns = array(); if (!empty($calendarId)) { $columns['hCalendarId'] = (int) $calendarId; } if (!empty($calendarCategoryId)) { $columns['hCalendarCategoryId'] = (int) $calendarId; } if (!empty($fileId)) { $columns['hFileId'] = (int) $fileId; } return $this->hCalendarFiles->select( 'hCalendarFileId', $columns ); } public function getFileCategories($fileId) {         return $this->hCalendarFiles->select( 'hCalendarCategoryId', array( 'hFileId' => (int) $fileId ) ); } public function newCalendar($calendarName) {               $calendarId = $this->hCalendars->selectColumn( 'hCalendarId', array( 'hCalendarName' => $calendarName ) ); if (!empty($calendarId)) { return (int) $calendarId; } else { $calendarId = $this->hCalendars->insert( array( 'hCalendarId' => 0, 'hUserId' => (int) $_SESSION['hUserId'], 'hCalendarName' => $calendarName ) ); $this->syncCalendarResources(); $this->hCalendars->activity( 'Created Calendar: '.$calendarName ); return $calendarId; } } public function newCategory($calendarCategoryName) {               $calendarCategoryId = $this->hCalendarCategories->selectColumn( 'hCalendarCategoryId', array( 'hCalendarCategoryName' => $calendarCategoryName ) ); if (!empty($calendarCategoryId)) { return (int) $calendarCategoryId; } else { $calendarCategoryId = $this->hCalendarCategories->insert( array( 'hCalendarCategoryId' => 0, 'hCalendarCategoryName' => $calendarCategoryName ) ); $this->syncCalendarResources(); $this->hCalendars->activity( 'Created Calendar Category: '.$calendarCategoryName ); return $calendarCategoryId; } } public function &deleteCalendar($calendarId) {            $this->hCalendars->activity( 'Deleted Calendar: '.$this->getCalendarName($calendarId) ); $this->hFile = $this->library('hFile'); $files = $this->hCalendarFiles->select( 'hFileId', array( 'hCalendarId' => (int) $calendarId ) ); if (count($files)) { foreach ($files as $data) { $this->hFile->delete($this->getFilePathByFileId($data['hFileId'])); } } $files = $this->hCalendarFiles->select( 'hCalendarFileId', array( 'hCalendarId' => (int) $calendarId ) ); foreach ($files as $data) { $this->delete($data['hCalendarFileId']); } $this->hCalendars->delete( 'hCalendarId', (int) $calendarId ); $this->hCalendarResources->delete( 'hCalendarId', (int) $calendarId ); return $this; } public function &deleteCategory($calendarCategoryId) {           $this->hCalendars->activity( 'Deleted Calendar Category: '.$this->getCategoryName($calendarCategoryId) ); $this->hFile = $this->library('hFile'); $files = $this->hCalendarFiles->select( 'hFileId', array( 'hCalendarCategoryId' => (int) $calendarCategoryId ) ); if (count($files)) { foreach ($files as $data) { $this->hFile->delete( $this->getFilePathByFileId($data['hFileId']) ); } } $this->hCalendarFiles->delete( 'hCalendarCategoryId', (int) $calendarCategoryId ); $this->hCalendarCategories->delete( 'hCalendarCategoryId', (int) $calendarCategoryId ); $this->hCalendarResources->delete( 'hCalendarCategoryId', (int) $calendarCategoryId ); return $this; } public function &syncCalendarResources() {         $calendars = $this->hCalendars->select('hCalendarId'); foreach ($calendars as $calendarId) { $calendarCategories = $this->hCalendarCategories->select('hCalendarCategoryId'); foreach ($calendarCategories as $calendarCategoryId) { $exists = $this->hCalendarResources->selectExists( 'hCalendarResourceId', array( 'hCalendarId' => (int) $calendarId, 'hCalendarCategoryId' => (int) $calendarCategoryId ) ); if (!$exists) { $this->hCalendarResources->insert( array( 'hCalendarResourceId' => nil, 'hCalendarId' => (int) $calendarId, 'hCalendarCategoryId' => (int) $calendarCategoryId, 'hUserId' => 1, 'hCalendarResourceCreated' => time(), 'hCalendarResourceLastModified' => 0 ) ); } } }  $query = $this->hCalendarResources->select( array( 'DISTINCT', 'hCalendarId' ) ); foreach ($query as $calendarId) { if (!in_array($calendarId, $calendars)) { $this->hCalendarResources->delete( 'hCalendarId', (int) $calendarId ); } } $query = $this->hCalendarResources->select( array( 'DISTINCT', 'hCalendarCategoryId' ) ); foreach ($query as $calendarCategoryId) { if (!in_array($calendarCategoryId, $calendarCategories)) { $this->hCalendarResources->delete( 'hCalendarCategoryId', (int) $calendarCategoryId ); } } return $this; } public function getOldestDate($calendarId = 1, $calendarCategoryId = 1) {        return $this->hDatabase->getResult( $this->getTemplateSQL( 'getDate', array( 'hCalendarId' => (int) $calendarId, 'hCalendarCategoryId' => (int) $calendarCategoryId, 'sort' => 'ASC' ) ) ); } public function getNewestDate($calendarId = 1, $calendarCategoryId = 1) {        return $this->hDatabase->getResult( $this->getTemplateSQL( 'getDate', array( 'hCalendarId' => (int) $calendarId, 'hCalendarCategoryId' => (int) $calendarCategoryId, 'sort' => 'DESC' ) ) ); } public function getArchiveMonths($year, $calendarId = 1, $calendarCategoryId = 1) {            $months = range(1, 12); $results = array( 'hCalendarMonth' => array(), 'hCalendarMonthLabel' => array(), 'hCalendarMonthCount' => array() ); foreach ($months as $month) { $monthStart = mktime(0, 0, 0, $month, 1, $year); $monthEnd = mktime(0, 0, 0, $month, date('t', $monthStart), $year); $count = $this->hDatabase->selectCount( array( 'hCalendarFiles' => 'hFileId' ), array( 'hCalendarFiles', 'hCalendarFileDates' ), array( 'hCalendarFiles.hCalendarFileId' => 'hCalendarFileDates.hCalendarFileId', 'hCalendarFiles.hCalendarId' => (int) $calendarId, 'hCalendarFiles.hCalendarCategoryId' => (int) $calendarCategoryId, 'hCalendarFileDates.hCalendarDate' => array( array('>=', (int) $monthStart), array('<=', (int) $monthEnd) )  ) ); if ($count > 0) { $results['hCalendarMonth'][] = $monthStart; $results['hCalendarMonthLabel'][] = date('F', $monthStart); $results['hCalendarMonthCount'][] = $count; } } return $results; } public function getOwned($userId = 0) { $this->user->whichUserId($userId);          return $this->hCalendars->selectAssociative( array( 'hCalendarId', 'hCalendarName' ), array( 'hUserId' => (int) $userId ) ); } public function getShared($userId = 0) { $this->user->whichUserId($userId);          return $this->hDatabase->getAssociativeArray( $this->getTemplateSQL( array( 'hUserId' => (int) $userId, 'hFrameworkResourceId' => (int) $this->hCalendars->getResourceId() ) ) ); } public function getDefault($userId = 0) { $this->user->whichUserId($userId);          return $this->hCalendars->selectColumn( 'hCalendarId', array( 'hUserId' => (int) $userId ), 'AND', 'hCalendarId', 1 ); } public function getCalendarName($calendarId) {        return $this->hCalendars->selectColumn( 'hCalendarName', (int) $calendarId ); } public function getCategoryName($calendarCategoryId) {        return $this->hCalendarCategories->selectColumn( 'hCalendarCategoryName', (int) $calendarCategoryId ); } public function getCalendarFileId($calendarId, $fileId) {         return $this->hCalendarFiles->selectColumn( 'hCalendarFileId', array( 'hCalendarId' => (int) $calendarId, 'hFileId' => (int) $fileId ) ); } public function save($columns) {                                                                                       $begin = 0; $end = 0; if (!isset($columns['hCalendarFileId'])) { $columns['hCalendarFileId'] = $this->getCalendarFileId( $columns['hCalendarId'], $columns['hFileId'] ); } if (isset($columns['hCalendarBegin']) && !is_numeric($columns['hCalendarBegin']) && !empty($columns['hCalendarBegin'])) { $columns['hCalendarBegin'] = strtotime($columns['hCalendarBegin']); $begin = $columns['hCalendarBegin']; } if (isset($columns['hCalendarEnd']) && !is_numeric($columns['hCalendarEnd']) && !empty($columns['hCalendarEnd'])) { $columns['hCalendarEnd'] = strtotime($columns['hCalendarEnd']); $end = $columns['hCalendarEnd']; }   $calendarFiles = $this->hCalendarFiles->select( 'hCalendarFileId', array( 'hCalendarId' => (int) $columns['hCalendarId'], 'hCalendarCategoryId' => (int) $columns['hCalendarCategoryId'], 'hFileId' => (int) $columns['hFileId'] ) ); if (count($calendarFiles) > 1) { $i = 0; foreach ($calendarFiles as $calendarFileId) { if (!$i) { $columns['hCalendarFileId'] = (int) $calendarFileId; $i++; continue; } $this->deleteDates((int) $calendarFileId); $this->hCalendarFiles->delete( 'hCalendarFileId', (int) $calendarFileId ); $i++; } } $this->hCalendars->activity( 'Saved Event: '.$this->getFileTitle($columns['hFileId']) ); $this->modifiedResource( $columns['hCalendarId'], $columns['hCalendarCategoryId'], $begin, $end ); $calendarFileId = $this->hCalendarFiles->save( array( 'hCalendarFileId' => (int) $columns['hCalendarFileId'], 'hCalendarId' => (int) $columns['hCalendarId'], 'hCalendarCategoryId' => (int) $columns['hCalendarCategoryId'], 'hFileId' => (int) $columns['hFileId'], 'hCalendarBegin' => $this->getTimeStamp($columns['hCalendarBegin']), 'hCalendarEnd' => $this->getTimeStamp($columns['hCalendarEnd']), 'hCalendarRange' => empty($columns['hCalendarRange'])? 0 : 1 ) ); if (isset($columns['hCalendarDate'])) { $this->deleteDates((int) $columns['hCalendarFileId']); if (is_array($columns['hCalendarDate'])) { foreach ($columns['hCalendarDate'] as $i => $calendarDate) { $this->insertDate( array( 'hCalendarFileId' => $calendarFileId, 'hCalendarDate' => $this->getTimeStamp($calendarDate), 'hCalendarBeginTime' => $this->getTimeStamp($columns['hCalendarBeginTime'][$i]), 'hCalendarEndTime' => $this->getTimeStamp($columns['hCalendarEndTime'][$i]), 'hCalendarAllDay' => $this->getTimeStamp($columns['hCalendarAllDay'][$i]) ) ); } } else { $this->insertDate( array( 'hCalendarFileId' => $calendarFileId, 'hCalendarDate' => $this->getTimeStamp($columns['hCalendarDate']), 'hCalendarBeginTime' => $this->getTimeStamp($columns['hCalendarBeginTime']), 'hCalendarEndTime' => $this->getTimeStamp($columns['hCalendarEndTime']), 'hCalendarAllDay' => $this->getTimeStamp($columns['hCalendarAllDay']) ) ); } } return $calendarFileId; } private function getTimeStamp(&$calendarDate) {        if (isset($calendarDate)) { if (!is_numeric($calendarDate) && !empty($calendarDate)) { return strtotime($calendarDate); } else { return (int) $calendarDate; } } else { return 0; } } public function &insertDate(array $columns) {                                      $this->hCalendarFileDates->insert( array( 'hCalendarFileId' => (int) $columns['hCalendarFileId'], 'hCalendarDate' => (int) $columns['hCalendarDate'], 'hCalendarBeginTime' => isset($columns['hCalendarBeginTime'])? (int) $columns['hCalendarBeginTime'] : 0, 'hCalendarEndTime' => isset($columns['hCalendarEndTime'])? (int) $columns['hCalendarEndTime'] : 0, 'hCalendarAllDay' => isset($columns['hCalendarAllDay'])? (int) $columns['hCalendarAllDay'] : 0 ) ); return $this; } public function &delete($calendarId = 0, $calendarCategoryId = 0, $fileId = 0) {                   $calendarFiles = $this->getCalendarFileIds($calendarId, $calendarCategoryId, $fileId); if (count($calendarFiles)) { foreach ($calendarFiles as $calendarFileId) { $this->hCalendarFileDates->delete( 'hCalendarFileId', (int) $calendarFileId ); } } $columns = array(); if (!empty($calendarId)) { $columns['hCalendarId'] = (int) $calendarId; } if (!empty($calendarCategoryId)) { $columns['hCalendarCategoryId'] = (int) $calendarCategoryId; } $this->modifiedResource($calendarId, $calendarCategoryId); if (!empty($fileId)) { $columns['hFileId'] = (int) $fileId; } $this->hCalendarFiles->delete($columns); return $this; } public function &deleteDates($calendarFileId) {        $this->hCalendarFileDates->delete( 'hCalendarFileId', (int) $calendarFileId ); return $this; } public function getFilesWithMetaData($calendarId = 0, $calendarCategoryId = 0, $count = 10, $timeRange = nil, $withinTimeBoundaries = true, $sort = 'ASC') {         return $this->getFiles( $calendarId, $calendarCategoryId, $count, $timeRange, $withinTimeBoundaries, $sort ); } public function getCached($fileCacheResource, $calendarId = 0, $calendarCategoryId = 0, $fileCacheResourceId = 0) {          if (empty($fileCacheResourceId)) { $fileCacheResourceId = $this->hFileId; } if (empty($calendarId)) { $calendarId = $this->hCalendarId(1); } if (empty($calendarCategoryId)) { $calendarCategoryId = $this->hCalendarCategoryId(3); } $this->hFileCache = $this->library('hFile/hFileCache'); if (!isset($_GET['updateCache'])) { $cal = $this->hCalendarResources->selectAssociative( array( 'hCalendarResourceLastModified', 'hCalendarResourceCacheExpires' ), array( 'hCalendarId' => $calendarId, 'hCalendarCategoryId' => $calendarCategoryId ) ); if (!isset($cal['hCalendarResourceLastModified'])) { $cal = array( 'hCalendarResourceLastModified' => time(), 'hCalendarResourceCacheExpires' => 0 ); } } else { $cal = array( 'hCalendarResourceLastModified' => time(), 'hCalendarResourceCacheExpires' => 0 ); } return $this->hFileCache->getCachedDocument( $fileCacheResource, $fileCacheResourceId, $cal['hCalendarResourceLastModified'] ); } public function getExpirationDate($calendarId, $calendarCategoryId) {             $nextBeginTime = $this->hDatabase->getColumn( $this->getTemplateSQL( 'getNextBeginTime', array( 'hCalendarId' => (int) $calendarId, 'hCalendarCategoryId' => (int) $calendarCategoryId ) ), 0 ); $nextEndTime = $this->hDatabase->getColumn( $this->getTemplateSQL( 'getNextEndTime', array( 'hCalendarId' => (int) $calendarId, 'hCalendarCategoryId' => (int) $calendarCategoryId ) ), 0 ); if ($nextBeginTime < $nextEndTime && $nextBeginTime > 0) { return (int) $nextBeginTime; } else if ($nextEndTime > 0) { return (int) $nextEndTime; } else { return 0; } } public function &saveToCache($fileCacheDocument, $fileCacheResource, $calendarId = 0, $calendarCategoryId = 0, $fileCacheResourceId = 0) {                 if (empty($fileCacheResourceId)) { $fileCacheResourceId = $this->hFileId; } if (empty($calendarId)) { $calendarId = $this->hCalendarId(1); } if (empty($calendarCategoryId)) { $calendarCategoryId = $this->hCalendarCategoryId(3); } if (empty($this->hFileCache)) { $this->hFileCache = $this->library('hFile/hFileCache'); }  $this->hFileCache->saveDocumentToCache( $fileCacheResource, $fileCacheResourceId, $fileCacheDocument, $this->getExpirationDate( $calendarId, $calendarCategoryId ) ); return $this; } private function &setData(&$data, &$file, $item) {       if (!isset($data[$file['hFileId']])) { $data[$file['hFileId']] = array(); } if (!isset($data[$file['hFileId']][$item])) { $data[$file['hFileId']][$item] = array(); } array_push( $data[$file['hFileId']][$item], $file[$item] ); return $this; } public function getEvent($fileId, $getCalendar = true) {        $data = $this->hDatabase->selectAssociative( array( 'DISTINCT', 'hFiles' => array( 'hFileId', 'hDirectoryId', 'hUserId', 'hFileName', 'hPlugin' ), 'hFileDocuments' => array( 'hFileDescription', 'hFileTitle', 'hFileDocument' ) ), array( 'hFiles', 'hFileDocuments' ), array( 'hFiles.hFileId' => array( array('=', 'hFileDocuments.hFileId'), array('=', (int) $fileId) ) ) ); $data['hFileTitle'] = hString::decodeEntitiesAndUTF8($data['hFileTitle']); $data['hFileHeadingTitle'] = hString::decodeEntitiesAndUTF8( $this->hFileHeadingTitle(nil, $data['hFileId']) ); $data['hFileDocument'] = $this->expandDocumentIds( hString::decodeHTML($data['hFileDocument']) ); $data['hFileDescription'] = hString::decodeHTML( $data['hFileDescription'] ); $data['hFileCommentsEnabled'] = $this->hFileCommentsEnabled(false, $data['hFileId']); $data['hUserName'] = $this->user->getUserName((int) $data['hUserId']); $data['hDirectoryPath'] = $this->getDirectoryPath((int) $data['hDirectoryId']); $data['hFileName'] = str_replace('.html', '', $data['hFileName']); $data['hUserPermissionsWorld'] = (int) $this->hFiles->hasWorldRead($fileId); $data['hCalendarLink'] = $this->hCalendarLink('', $fileId); if ($this->hCalendarFileCategoryId(nil) !== nil || $this->hCalendarTagCategoryId(nil)) { $this->hCategoryDatabase = $this->database('hCategory'); $this->hCategoryDatabase->setDatabaseReturnFormat('select'); $data['hCategories'] = $this->hCategoryDatabase->getFileCategories($fileId, 'hCategoryId'); } if ($this->hCalendarAttachMovie(nil)) { $this->hList = $this->plugin('hList'); $movies = $this->hList->getListFiles('Movies', $fileId); if (count($movies)) { $data['hFileMovieId'] = $movies[0]; } } $thumbnailFileId = (int) $this->hCalendarFileThumbnailId(0, $data['hFileId']); $data['hCalendarThumbnailId'] = $thumbnailFileId; $data['hCalendarThumbnailPath'] = $thumbnailFileId? $this->getFilePathByFileId($thumbnailFileId) : ''; if ($this->hCalendarJobCompanyEnabled(true)) { $data['hCalendarJobCompany'] = $this->hCalendarJobCompany(nil, $data['hFileId']); } if ($this->hCalendarJobLocationEnabled(true)) { $data['hCalendarJobLocation'] = $this->hCalendarJobLocation(nil, $data['hFileId']); } if ($getCalendar) { $calendarFiles = $this->hDatabase->select( array(  'hCalendarFiles' => array( 'hCalendarFileId', 'hCalendarId', 'hCalendarCategoryId', 'hCalendarBegin', 'hCalendarEnd', 'hCalendarRange' ), 'hCalendarFileDates' => array( 'hCalendarDate', 'hCalendarBeginTime', 'hCalendarEndTime', 'hCalendarAllDay' ) ), array(  'hCalendarFiles', 'hCalendarFileDates' ), array(  'hCalendarFiles.hCalendarFileId' => 'hCalendarFileDates.hCalendarFileId', 'hCalendarFiles.hFileId' => (int) $fileId ) );  if (count($calendarFiles)) { $calendars = array(); foreach ($calendarFiles as $calendar) { array_push($calendars, $calendar['hCalendarId']); if (!isset($data['hCalendarCategoryId'])) { $data['hCalendarCategoryId'] = $calendar['hCalendarCategoryId']; $data['hCalendarDate'] = $calendar['hCalendarDate']; $data['hCalendarDateFormatted'] = date('m/d/Y', $calendar['hCalendarDate']); $data['hCalendarBegin'] = $calendar['hCalendarBegin']; $data['hCalendarBeginFormatted'] = $calendar['hCalendarBegin'] > 0 ? date('m/d/Y', $calendar['hCalendarBegin']) : ''; $data['hCalendarEnd'] = $calendar['hCalendarEnd']; $data['hCalendarEndFormatted'] = $calendar['hCalendarEnd'] > 0 ? date('m/d/Y', $calendar['hCalendarEnd']) : ''; $data['hCalendarBeginTime'] = $calendar['hCalendarBeginTime']; $data['hCalendarBeginTimeFormatted'] = $calendar['hCalendarBeginTime'] > 0 ? date('m/d/Y', $calendar['hCalendarBeginTime']) : ''; $data['hCalendarBeginTimeHour'] = $calendar['hCalendarBeginTime'] > 0 ? date('g', $calendar['hCalendarBeginTime']) : '1'; $data['hCalendarBeginTimeMinute'] = $calendar['hCalendarBeginTime'] > 0 ? date('i', $calendar['hCalendarBeginTime']) : '00'; $data['hCalendarBeginTimeMeridiem'] = $calendar['hCalendarBeginTime'] > 0 ? date('A', $calendar['hCalendarBeginTime']) : 'AM'; $data['hCalendarEndTime'] = $calendar['hCalendarEndTime']; $data['hCalendarEndTimeFormatted'] = $calendar['hCalendarEndTime'] > 0 ? date('m/d/Y', $calendar['hCalendarEndTime']) : ''; $data['hCalendarEndTimeHour'] = $calendar['hCalendarEndTime'] > 0 ? date('g', $calendar['hCalendarEndTime']) : '1'; $data['hCalendarEndTimeMinute'] = $calendar['hCalendarEndTime'] > 0 ? date('i', $calendar['hCalendarEndTime']) : '00'; $data['hCalendarEndTimeMeridiem'] = $calendar['hCalendarEndTime'] > 0 ? date('A', $calendar['hCalendarEndTime']) : 'AM'; $data['hCalendarAllDay'] = $calendar['hCalendarAllDay']; $data['hCalendarRange'] = $calendar['hCalendarRange']; $data['hCalendarFileId'] = $calendar['hCalendarFileId']; } } $data['hCalendarId'] = $calendars; } } return $data; } public function &deleteEvent($fileId) {        $this->hCalendars->activity( 'Deleted Event: '.$this->getFileTitle($fileId) ); $query = $this->hCalendarFiles->select( array( 'hCalendarId', 'hCalendarCategoryId' ), array( 'hFileId' => $fileId ) ); foreach ($query as $data) { $this->modifiedResource( $data['hCalendarId'], $data['hCalendarCategoryId'] ); } $this->hFile = $this->library('hFile'); $files = $this->hCalendarFiles->select( 'hCalendarFileId', array( 'hFileId' => (int) $fileId ) ); foreach ($files as $data) { if (isset($data['hCalendarFileId'])) { $this->hCalendarFileDates->delete( 'hCalendarFileId', (int) $data['hCalendarFileId'] ); } else if (!is_array($data) && is_numeric($data)) { $this->hCalendarFileDates->delete('hCalendarFileId', (int) $data); } } $this->hCalendarFiles->delete('hFileId', (int) $fileId); $this->hFile->delete($this->getFilePathByFileId($fileId)); return $this; } public function getFileDates($files) {        $dates = array(); foreach ($files as $file) { $dates[$file['hFileId']] = $file['hCalendarDate']; } return $dates; } public function &setCategoryId($categoryId) {          $this->categoryId = (int) $categoryId; return $this; } public function getFile($fileId, $calendarId = 0, $calendarCategoryId = 0) {           $files = $this->getFiles( $calendarId, $calendarCategoryId, 0, nil, false, 'ASC', $fileId ); return array_pop($files); } public function &setResultCount() {         $this->resultCount = $this->hDatabase->getResultCount(); return $this; } public function getResultCount() {        return $this->resultCount; } public function &setFileCalendars(array $calendars = array()) {        $this->fileCalendars = $calendars; return $this; } public function getFiles($calendarId = 0, $calendarCategoryId = 0, $limit = 10, $timeRange = nil, $withinTimeBoundaries = true, $sort = 'ASC', $fileId = 0, $calendarDate = nil) {        $events = false; $recentEvents = false; $monthOrRecent = false; if (!empty($timeRange)) { switch (strtolower($timeRange)) { case 'events': { $events = true; $timeOperator = '>='; $time = mktime(0, 0, 0, date('n'), date('j'), date('Y')); break; } case 'recentevents': { $sort = "`hCalendarFileDates`.`hCalendarBeginTime` DESC"; $recentEvents = true; break; } case 'news': { $sort = "`hCalendarFileDates`.`hCalendarDate` DESC"; break; } case 'monthorrecent': { $monthOrRecent = true; } case 'month': { $timeOperator = '>='; $time = mktime( 0, 0, 0, !is_null($calendarDate)? date('m', $calendarDate) : date('m'), 1, !is_null($calendarDate)? date('Y', $calendarDate) : date('Y') ); $timeOperator2 = '<='; $time2 = mktime( 0, 0, 0, !is_null($calendarDate)? date('m', $calendarDate) : date('m'), !is_null($calendarDate)? date('t', $calendarDate) : date('t'), !is_null($calendarDate)? date('Y', $calendarDate) : date('Y') ); break; } default: { if (!strstr($timeRange, ',')) {  list($timeOperator, $time) = explode(' ', trim($timeRange)); } else {  $ranges = explode(',', $timeRange); list($timeOperator, $time) = explode(' ', trim($ranges[0])); list($timeOperator2, $time2) = explode(' ', trim($ranges[1])); } } } } $customSort = ''; if ($sort != 'ASC' && $sort != 'DESC') { $customSort = $sort; $sort = ''; } $checkPermissions = !$this->inGroup('root') && $this->permissionsMethod == 'all'; $checkWorldPermissions = !$this->inGroup('root') && $this->permissionsMethod == 'world'; $multipleCalendars = false; if (is_array($calendarId)) { $calendars = array(); foreach ($calendarId as $calendar) { array_push( $calendars, "`hCalendarFiles`.`hCalendarId` = {$calendar}" ); } $multipleCalendars = implode(' OR ', $calendars); } $fileCalendarSQL = ''; if (is_array($this->fileCalendars) && count($this->fileCalendars)) { $fileCalendarSQL = array(); foreach ($this->fileCalendars as $fileCalendarId) { array_push( $fileCalendarSQL, '`hCalendarFiles`.`hCalendarId` = '.$fileCalendarId ); } $fileCalendarSQL = implode(' OR ', $fileCalendarSQL); } $sql = $this->getTemplateSQL( array_merge( array( 'calendarId' => $calendarId, 'multipleCalendars' => $multipleCalendars, 'calendarCategoryId' => $calendarCategoryId, 'fileId' => $fileId, 'categoryId' => (int) $this->categoryId, 'timeRange' => isset($time) ? $time : nil, 'timeRangeOperator' => isset($timeOperator) ? $timeOperator : nil, 'timeRange2' => isset($time2) ? $time2 : nil, 'timeRangeOperator2' => isset($timeOperator2) ? $timeOperator2 : nil, 'withinTimeBoundaries' => $withinTimeBoundaries, 'time' => time(), 'sort' => $sort, 'customSort' => $customSort, 'limit' => $limit, 'fileCalendarSQL' => $fileCalendarSQL ), $this->getPermissionsVariablesForTemplate( $checkPermissions, $checkWorldPermissions ) ) ); $query = $this->hDatabase->getResults($sql); $files = array(); $fields = array( 'hCalendarDate', 'hCalendarBeginTime', 'hCalendarEndTime', 'hCalendarAllDay', 'hCalendarId', 'hCalendarCategoryId' ); if (count($query)) { $icons = false; if ($this->hCalendarFileIcons(false)) { $icons = true; $this->hFileIcon = $this->library('hFile/hFileIcon'); } $this->setResultCount(); $i = 0; foreach ($query as $data) { foreach ($data as $key => $value) { switch ($key) { case 'hFileDescription': case 'hFileDocument': { $data[$key] = hString::decodeHTML($data[$key]); break; } } } $data['hFileDocument'] = $this->expandDocumentIds($data['hFileDocument']); $data['hFileHeadingTitle'] = $this->hFileHeadingTitle( $data['hFileTitle'], (int) $data['hFileId'] ); $data['hCalendarLink'] = $this->hCalendarLink( nil, (int) $data['hFileId'] ); if ($icons) { $data['hFileIconPath'] = $this->hFileIcon->getFileIconPath( (int) $data['hFileId'], nil, nil, $this->hCalendarFileIconResolution('32x32') ); } if ($this->hCalendarEnableThumbnail(false)) { $fileId = $this->hCalendarFileThumbnailId(0, $data['hFileId']); $data['hCalendarFileThumbnailId'] = $fileId; $data['hCalendarFileThumbnailPath'] = $this->getFilePathByFileId($fileId); } $identifier = $data['hFileId']; if (!isset($files[$identifier])) { $files[$identifier] = $data; } else { $calendarDate = $files[$identifier]['hCalendarDate']; $calendarBeginTime = $files[$identifier]['hCalendarBeginTime']; $calendarEndTime = $files[$identifier]['hCalendarEndTime']; $calendarAllDay  = $files[$identifier]['hCalendarAllDay'];    $isUnique = $data['hCalendarDate'] != $calendarDate || $data['hCalendarBeginTime'] != $calendarBeginTime || $data['hCalendarEndTime'] != $calendarEndTime || $data['hCalendarAllDay'] != $calendarAllDay; foreach ($fields as $field) { if (!is_array($files[$identifier][$field])) { $item = $files[$identifier][$field]; if ($field == 'hCalendarId' || $field == 'hCalendarCategoryId' || $isUnique) { $files[$identifier][$field] = ($item != $data[$field])? array($item, $data[$field]) : $item; } } else { if ($field == 'hCalendarId' || $field == 'hCalendarCategoryId' || $isUnique) { if (!in_array($data[$field], $files[$identifier][$field])) { array_push($files[$identifier][$field], $data[$field]); } } } } } $i++; } } else { if ($events || $monthOrRecent) { $this->hCalendarRecentEvents = true; return $this->getFiles( $calendarId, $calendarCategoryId, $this->hCalendarRecentEventCount($limit), 'RecentEvents', $withinTimeBoundaries, $sort, $fileId ); } } if ($recentEvents) { $files = array_reverse($files, true); } return $files; } public function getFilesForTemplate($dateFormats, $calendarId = 0, $calendarCategoryId = 0, $limit = 10, $timeRange = nil, $withinTimeBoundaries = true, $sort = 'ASC', $fileId = 0, $calendarDate = nil) {         if (!is_array($dateFormats)) { $dateFormats = array( 'hCalendarDate' => $dateFormats ); } $files = $this->getFiles( $calendarId, $calendarCategoryId, $limit, $timeRange, $withinTimeBoundaries, $sort, $fileId, $calendarDate ); $this->datesInQuery = array(); foreach ($files as &$file) { array_push($this->datesInQuery, $file['hCalendarDate']); if (!is_array($file['hCalendarDate'])) { $file['hCalendarDateFormatted'] = date( $dateFormats['hCalendarDate'], $file['hCalendarDate'] ); if (isset($dateFormats['hCalendarBeginTime'])) { $file['hCalendarBeginTimeFormatted'] = date( $dateFormats['hCalendarBeginTime'], $file['hCalendarBeginTime'] ); } if (isset($dateFormats['hCalendarEndTime'])) { $file['hCalendarEndTimeFormatted'] = date( $dateFormats['hCalendarEndTime'], $file['hCalendarEndTime'] ); } } else { $dates = array(); $beginTimes = array(); $endTimes = array(); foreach ($file['hCalendarDate'] as $i => $calendarDate) { $dates[] = date( $dateFormats['hCalendarDate'], $file['hCalendarDate'][$i] ); if (isset($dateFormats['hCalendarBeginTime'])) { $beginTimes[] = date( $dateFormats['hCalendarBeginTime'], $file['hCalendarBeginTime'][$i] ); } if (isset($dateFormats['hCalendarEndTime'])) { $endTimes[] = date( $dateFormats['hCalendarEndTime'], $file['hCalendarEndTime'][$i] ); } } $file['hCalendarDateFormatted'] = implode(', ', $dates); $file['hCalendarBeginTimeFormatted'] = implode(', ', $beginTimes); $file['hCalendarEndTimeFormatted'] = implode(', ', $endTimes); } if ($this->hCalendarEventPost) { $file['hCalendarEventPost'] = true; } if ($this->hCalendarBlogPost) { $file['hCalendarBlogPost'] = true; } } return $this->hDatabase->getResultsForTemplate($files); } public function getDatesInLastFileQuery() {         return $this->datesInQuery; } public function getFileDate($fileId) {        $dates = $this->hDatabase->select( array( 'hCalendarFileDates' => 'hCalendarDate' ), array( 'hCalendarFiles', 'hCalendarFileDates' ), array( 'hCalendarFiles.hCalendarFileId' => 'hCalendarFileDates.hCalendarFileId', 'hCalendarFiles.hFileId' => (int) $fileId ) ); $date = count($dates) > 1 ? array_pop($dates) : isset($dates[0])? $dates[0] : nil; return (int) $date; } public function &updateFileDate($fileId, $calendarDate) {         $query = $this->hDatabase->select( array( 'hCalendarFileDates' => array( 'hCalendarFileId', 'hCalendarDate', 'hCalendarBeginTime', 'hCalendarEndTime' ), 'hCalendarFiles' => array( 'hCalendarId', 'hCalendarCategoryId' ) ), array( 'hCalendarFileDates', 'hCalendarFiles' ), array( 'hCalendarFiles.hCalendarFileId' => 'hCalendarFileDates.hCalendarFileId', 'hCalendarFiles.hFileId' => (int) $fileId ) ); foreach ($query as $data) { $this->modifiedResource( $data['hCalendarId'], $data['hCalendarCategoryId'] ); $calendarBeginTime = 0; if ($data['hCalendarEndTime'] > 0) { $calendarBeginTime = mktime( date('H', $data['hCalendarBeginTime']), date('i', $data['hCalendarBeginTime']), date('s', $data['hCalendarBeginTime']), date('n', $calendarDate), date('j', $calendarDate), date('Y', $calendarDate) ); } $calendarEndTime = 0; if ($data['hCalendarEndTime'] > 0) { $calendarEndTime = mktime( date('H', $data['hCalendarEndTime']), date('i', $data['hCalendarEndTime']), date('s', $data['hCalendarEndTime']), date('n', $calendarDate), date('j', $calendarDate), date('Y', $calendarDate) ); } $this->hCalendarFileDates->update( array( 'hCalendarDate' => $calendarDate, 'hCalendarBeginTime' => $calendarBeginTime, 'hCalendarEndTime' => $calendarEndTime ), array( 'hCalendarFileId' => $data['hCalendarFileId'] ) ); } return $this; } public function getFileTime($fileId) {        $calendarBeginTime = $this->hDatabase->selectColumn( array( 'hCalendarFileDates' => 'hCalendarBeginTime' ), array( 'hCalendarFiles', 'hCalendarFileDates' ), array( 'hCalendarFiles.hCalendarFileId' => 'hCalendarFileDates.hCalendarFileId', 'hCalendarFiles.hFileId' => (int) $fileId ) ); $calendarEndTime = $this->hDatabase->selectColumn( array( 'hCalendarFileDates' => 'hCalendarEndTime' ), array( 'hCalendarFiles', 'hCalendarFileDates' ), array( 'hCalendarFiles.hCalendarFileId' => 'hCalendarFileDates.hCalendarFileId', 'hCalendarFiles.hFileId' => (int) $fileId ) ); return ( date('g:i A', $calendarBeginTime). ' - '. date('g:i A', $calendarEndTime) ); } public function &setPermissionsMethodToWorld() {          $this->permissionsMethod = 'world'; return $this; } public function &setPermissionsMethodToEverything() {         $this->permissionsMethod = 'all'; return $this; } } ?>