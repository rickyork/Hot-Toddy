<?php
  class hSpotlightSearchLibrary extends hPlugin { private $tablesInQuery = array(); private $tables = array(); private $table = ''; private $joinColumns = array(); private $ammendTables = array(); private $isIrrelevantTable = false; private $defaultSearch = true; private $whereBoolean = 'OR'; private $whereConditions = array(); private $whereAddendums = array(); private $whereAddendumBoolean = array(); public function &addWhereAddendum($boolean, $sql) {        array_push($this->whereAddendums, $sql); array_push($this->whereAddendumBoolean, $boolean); return $this; } public function &addTable($table, $label) {        $this->tables[$table] = array( 'label' => $label ); $this->table = $table; return $this; } public function &setColumns(&$columns, &$validation, &$time, &$location, &$sort, &$sortOrientation) {        if (!empty($_POST['hSpotlightSearchColumns']) && is_array($_POST['hSpotlightSearchColumns'])) { $columns = $_POST['hSpotlightSearchColumns']; } $validation = $this->validateColumns($columns); $time = array(); if (!empty($_POST['hSpotlightSearchToggleTime'])) {  if ($this->validateTimeColumn($_POST['hSpotlightSearchTimeColumn'])) { $time = array( 'range' => $_POST['hSpotlightSearchTimeRange'], 'start' => $_POST['hSpotlightSearchDateStart'], 'end' => $_POST['hSpotlightSearchDateEnd'], 'column' => $_POST['hSpotlightSearchTimeColumn'] ); } } $this->setSort($sort, $sortOrientation); $location = array(); if (!empty($_POST['hSpotlightSearchToggleLocation'])) { if (!empty($_POST['hSpotlightSearchCountryId'])) { $location['countryId'] = (int) $_POST['hSpotlightSearchCountryId']; } if (!empty($_POST['hSpotlightSearchStateId'])) { $location['stateId'] = (int) $_POST['hSpotlightSearchStateId']; } if (!empty($_POST['hSpotlightSearchCity'])) { $location['city'] = $_POST['hSpotlightSearchCity']; } if (!empty($_POST['hSpotlightSearchPostalCode'])) { $location['postalCode'] = $_POST['hSpotlightSearchPostalCode']; } if (!empty($_POST['hSpotlightSearchCounty'])) { $location['county'] = $_POST['hSpotlightSearchCounty']; } } return $this; } public function &setSort(&$sort, &$sortOrientation) {        if (!empty($_GET['hSpotlightSortColumn'])) { if ($this->validateSortColumn($_GET['hSpotlightSortColumn'])) { $sort = $_GET['hSpotlightSortColumn']; if (!empty($_GET['hSpotlightSortOrientation'])) { switch ($_GET['hSpotlightSortOrientation']) { case 'ASC': case 'DESC': { $sortOrientation = $_GET['hSpotlightSortOrientation']; break; } default: { $sortOrientation = 'ASC'; } } } else { $sortOrientation = 'ASC'; } } } return $this; } public function &setWhereBoolean($boolean) {        switch ($boolean) { case 'AND': case 'OR': { $this->whereBoolean = $boolean; break; } } return $this; } public function &addColumn($column, $label, $attributes) {        if (!isset($this->tables[$this->table]['columns'])) { $this->tables[$this->table]['columns'] = array(); } $this->tables[$this->table]['columns'][$column] = array( 'label' => $label, 'attributes' => $attributes, 'joinColumns' => $this->joinColumns ); $this->joinColumns = array(); return $this; } public function &defineJoinColumns() {        $this->joinColumns = func_get_args(); return $this; } public function &addAdvancedColumn($column, $label) {        $this->addColumn( $column, $label, array( 'isDefault' => false,  'isSortable' => false,  'isSelected' => false,  'isTime' => false,   'isAdvanced' => true  ) ); return $this; } public function &addAdvancedColumns(array $columns) {        foreach ($columns as $column => $label) { $this->addAdvancedColumn($column, $label); } return $this; } public function &addSortableColumn($column, $label) {        $this->addColumn( $column, $label, array( 'isDefault' => false, 'isSortable' => true, 'isSelected' => false, 'isTime' => false, 'isAdvanced' => true ) ); return $this; } public function &addDefaultColumn($column, $label) {        $this->addColumn( $column, $label, array( 'isDefault' => true, 'isSortable' => true, 'isSelected' => true, 'isTime' => false, 'isAdvanced' => false ) ); return $this; } public function &addDefaultColumns(array $columns) {        foreach ($columns as $column => $label) { $this->addDefaultColumn($column, $label); } return $this; } public function &addTimeColumn($column, $label) {        $this->addColumn( $column, $label, array( 'isDefault' => false, 'isSortable' => true, 'isSelected' => false, 'isTime' => true, 'isAdvanced' => false ) ); return $this; } public function &addTimeColumns(array $columns) {       foreach ($columns as $column => $label) { $this->addTimeColumn($column, $label); } return $this; } public function getSortColumns($table = nil) {        return $this->getColumnsByAttribute($table, 'isSortable'); } public function getSelectColumns($table = nil) {        return $this->getColumnsByAttribute($table, 'isSelected'); } public function getTimeColumns($table = nil) {        return $this->getColumnsByAttribute($table, 'isTime'); } public function validateTimeColumn($time) {        return in_array($time, $this->getTimeColumns()); } public function validateSortColumn($sort) {        return in_array($sort, $this->getSortColumns()); } public function getDefaultColumns($table = nil) {        return $this->getColumnsByAttribute($table, 'isDefault'); } public function &setColumnSelected($table, $column) {        $this->setColumnAttribute( $table, $column, 'isSelected', true ); return $this; } public function &setColumnAttribute($table, $column, $attribute, $value) {        if (isset($this->tables[$table]['columns'][$column]['attributes'][$attribute])) { $this->tables[$table]['columns'][$column]['attributes'][$attribute] = $value; } return $this; } public function getColumnLabel($column) {        $column = str_replace('`', '', $column); list($table, $column) = explode('.', $column); if (isset($this->tables[$table]['columns'][$column]['label'])) { return $this->tables[$table]['columns'][$column]['label']; } else { $this->warning( 'There is no label defined for column, '.$column.', in table, '.$table.'.', __FILE__, __LINE__ ); } } public function getColumnsByAttribute($getTable, $attribute = false) {        if (!empty($getTable)) { if (isset($this->tables[$getTable])) { $this->getTableColumnsByAttribute( $returnColumns, $getTable, $attribute ); } else { $this->warning( 'Table, '.$getTable.' not defined. '. 'Unable to select columns by attribute, '.$attribute.'.', __FILE__, __LINE__ ); } } else { foreach ($this->tables as $table => $array) { $this->getTableColumnsByAttribute( $returnColumns, $table, $attribute ); } } return $returnColumns; } private function &getTableColumnsByAttribute(&$returnColumns, $getTable, $attribute) {        if (is_array($this->tables[$getTable]['columns']) && count($this->tables[$getTable]['columns'])) { foreach ($this->tables[$getTable]['columns'] as $column => $data) { if (isset($data['attributes'][$attribute]) && !empty($data['attributes'][$attribute]) || empty($attribute)) { $this->addTableToQuery("`{$getTable}`"); $returnColumns[] = "`{$getTable}`.`{$column}`"; } } } else { $this->warning( 'Table, '.$getTable.', does not have any columns defined. '. 'Unable to get columns by attribute, '.$attribute.'.', __FILE__, __LINE__ ); } return $this; }             public function validateColumns(&$submittedColumns) {        if (empty($submittedColumns)) { return true; }  $allowedColumns = $this->getDefaultColumns(); $validation = true; foreach ($submittedColumns as $i => $column) { if (!in_array($column, $allowedColumns)) { unset($submittedColumns[$i]); $validation = false; } } return $validation; } public function &addTableToQuery($table) {        if (!in_array($table, $this->tablesInQuery)) { array_push($this->tablesInQuery, $table); } return $this; } public function &reset() {        $this->tablesInQuery = array(); return $this; } public function getTablesInQuery() {        return $this->tablesInQuery; } public function getWhereClause($where, $search, $wildcard = nil) {        if ($search == '*') { return nil; } $sql = array(); $rolodex = false; if (strlen($search) == 1) { $rolodex = true; } if (is_numeric($search) || $rolodex) { if ($rolodex && in_array('`hContacts`.`hContactLastName`', $where)) { $where = array( '`hContacts`.`hContactLastName`' ); }  foreach ($where as $column) { $columnIsNumeric = $this->columnIsNumeric($column); $columnIsBoth = false; if ($column == '`hProducts`.`hProductPartNumber`') { $columnIsBoth = true; } if ($columnIsNumeric && is_numeric($search) || !$columnIsNumeric && !is_numeric($search) || $columnIsBoth) {  if (strstr($search, ' ')) { switch ($column) { case '`hContacts`.`hContactFirstName`': { $bits = explode(' ', $search); $q = array_shift($bits); break; } case '`hContacts`.`hContactLastName`': { $bits = explode(' ', $search); $q = array_pop($bits); break; } default: { $q = $search; } } } else { $q = $search; } $sql[] = $column.$this->getWildcard($q, $wildcard); } } return count($sql)? implode(' '.$this->whereBoolean.' ', $sql) : false; } else {    foreach ($where as $column) { if (!$this->columnIsNumeric($column)) { $sql[] = $column; } } return count($sql)? ' MATCH ('.implode(',', $sql).") AGAINST ('{$search}' IN BOOLEAN MODE)" : false; } } public function columnIsNumeric($column) {           list($table, $column) = explode('.', str_replace('`', '', $column)); return $this->hDatabase->columnIsNumeric( $column, $table ); } public function getWildcard($query, $wildcard) {         $wildcard = htmlspecialchars_decode($wildcard); $wildcard = htmlspecialchars_decode($wildcard); switch ($wildcard) { case '%.%':  { return " LIKE '%{$query}%'"; } case '.%':  { return " LIKE '{$query}%'"; } case '%.':  { return " LIKE '%{$query}'"; } case '=':  { return " = '{$query}'"; } case '!=':  { return " NOT LIKE '{$query}'"; } case '>':  { return ' > '.(is_numeric($query)? $query : 0); } case '<':  { return ' < '.(is_numeric($query)? $query : 0); } case '>=':  { return ' >= '.(is_numeric($query)? $query : 0); } case '<=':  { return ' <= '.(is_numeric($query)? $query : 0); } default: {    if (is_numeric($query)) {  return " = ".$query; } else { return " LIKE '{$query}%'"; } } } } public function isRelevant($columns, $table) {        foreach ($columns as $column) { if (array_shift(explode('.', $column)) == "`{$table}`") { return true; } } return false; } public function keysInResult($selectColumns, $data) {        foreach ($selectColumns as $column) { $column = str_replace('`', '', $column); list($table, $tableColumn) = explode('.', $column); if (!key_exists($column, $data)) { return false; } } return true; } public function &ammendResults(&$results, $table) {        $selectColumns = $this->getSelectColumns($table); $select = implode(',', $selectColumns); $from = implode(',', $this->getTablesInQuery()); foreach ($results as $key => $data) { if (is_array($data) && !$this->keysInResult($selectColumns, $data) && isset($data[$results['key']]) && is_array($results[$data[$results['key']]])) { $whereCondition = $this->getWhereCondition(); $sql = "SELECT {$select}
                       FROM {$from}
                      WHERE ".(!empty($whereCondition)? $whereCondition.' AND' : '')." (`{$table}`.`{$results['key']}` = ". $data[$results['key']].")"; $query = $this->hDatabase->query($sql); if ($this->hDatabase->resultsExist($query)) { $results[$data[$results['key']]] = array_merge($results[$data[$results['key']]], $this->hDatabase->getAssociativeResults($query)); } } } return $this; } public function &ammendTables(&$results) {        foreach ($this->ammendTables as $table) { $this->ammendResults($results, $table); } return $this; } public function getTime($time) {        $bits = explode('.', $time['column']); $timeTable = array_shift($bits); $this->addTableToQuery($timeTable); if (!empty($time['range'])) { switch ($time['range']) { case -30: { $date = strtotime('-1 Month'); break; } case -60: { $date = strtotime('-2 Months'); break; } case -90: { $date = strtotime('-3 Months'); break; } case -365: { $date = strtotime('-1 Year'); break; } } return " AND {$time['column']} >= ".$date; } else {  return " AND {$time['column']} >= ".strtotime($time['start']). " AND {$time['column']} <= ".strtotime($time['end']); } } public function &addWhereCondition($condition) {        if (!in_array($condition, $this->whereConditions)) { array_push($this->whereConditions, $condition); } return $this; } public function getWhereCondition() {        return implode(' AND ', $this->whereConditions); } public function &query($table, $search, $where, $time, $sort, $sortOrientation, $join, &$results, $wildcard = nil) {        if (!is_array($results)) { $results = array(); } if (!empty($sort)) { $bits = explode('.', $sort); $this->addTableToQuery(array_shift($bits)); }   if (empty($where)) { $this->defaultSearch = true; $where = $this->getDefaultColumns($table); } else { $this->defaultSearch = false; }     $select = $this->getSelectColumns($table); $constrainTime = (count($time)? $this->getTime($time) : ''); $from = $this->getTablesInQuery(); $sql = ''; $rolodex = false; if (strlen($search) == 1) { $rolodex = true; $wildcard = '.%'; } if (false !== ($where = $this->getWhereClause($where, $search, $wildcard))) { $sql = "SELECT DISTINCT ". implode(',', $select). " FROM "; if (!empty($join)) { $fromTable = array_shift($from); $bits = explode('.', $join); $joinTable = array_shift($bits); $bits = explode('.', $join); $joinColumn = array_pop($bits); $joints = array(); $sql .= " ".$fromTable." "; foreach ($from as $table) { $joinToTable = ($table == $joinTable)? $fromTable : $table; $sql .= " LEFT JOIN {$table} ON {$join} = {$joinToTable}.{$joinColumn}"; } } else { $sql .= implode(',', $from); } $whereSQL = ''; $fulltext = substr($where, 0, 6) == ' MATCH'; if ($where) { if (!$fulltext) { $where = '('.$where.')'; } $whereSQL .= "{$where}"; } if (!empty($this->whereAddendums)) { foreach ($this->whereAddendums as $i => $whereAddendum) { $whereSQL .= ' '.$this->whereAddendumBoolean[$i].' ('.$whereAddendum.')'; } } if (!empty($whereSQL)) { $sql .= " WHERE ({$whereSQL})"; } if (!empty($whereSQL)) { $sql .= ' AND '.$this->getWhereCondition(); } $sql .= $constrainTime; if (!empty($sort)) { $sql .= " ORDER BY {$sort} {$sortOrientation}"; } $query = $this->hDatabase->query($sql); if ($this->hDatabase->resultsExist($query)) { while ($data = $this->hDatabase->getAssociativeResults($query)) {  $results[] = $data; } } } $this->reset(); return $this; } public function advancedQuery() { } } ?>