<?php
  class hUserDatabase extends hPlugin { private $hUserLogin; private $hUserValidation; private $hUserHomeFolder; private $activityCount = 0; private $hSearch; private $hPagination; private $hSearchDatabase; public function &deleteGroupMembers($userGroupId) {           if (!is_numeric($userGroupId)) { $userGroupId = $this->user->getUserId($userGroupId); } if ($userGroupId > 0) { $this->hUserGroups->delete('hUserGroupId', (int) $userGroupId); } return $this; } public function saveGroupMembers($userGroupId, array $users) {                       $this->user->setNumericUserId($userGroupId); if ($userGroupId > 0) { $this->deleteGroupMembers($userGroupId); $invalidGroups = array(); if (is_array($users)) { foreach ($users as $userId) { if (!is_numeric($userId)) { $userName = $userId; $userId = $this->user->getUserId($userId); } if (!empty($userId)) { $this->hUserGroups->insert( array( 'hUserGroupId' => (int) $userGroupId, 'hUserId' => (int) $userId ) ); $this->modifyUser($userGroupId); $this->modifyUser($userId); } else { array_push($invalidGroups, $userName); } } if (count($invalidGroups)) { return $invalidGroups; } else { return true; } } else { $this->warning('Argument $users must be an array of user ids.', __FILE__, __LINE__); return false; } } else { $this->warning('Unable to obtain a group user id from the user name, '.$userGroupId.'.', __FILE__, __LINE__); return false; } } public function getUserGroups($userId = 0, $selectMethod = 'selectColumnsAsKeyValue') {                 $this->user ->setNumericUserId($userId) ->whichUserId($userId); if ($userId > 0) { return $this->hDatabase->$selectMethod( array( 'hUserGroups' => 'hUserGroupId', 'hUsers' => 'hUserName' ), array( 'hUserGroups', 'hUsers' ), array( 'hUserGroups.hUserId' => (int) $userId, 'hUserGroups.hUserGroupId' => 'hUsers.hUserId' ) ); } return array(); } public function &removeUserFromGroups($userId = 0, $preserveRoot = true) {                  $this->user ->setNumericUserId($userId) ->whichUserId($userId); if ($userId > 0) { $this->deleteGroupCache($userId); if ($preserveRoot && $this->inGroup('root')) { $root = $this->getGroupId('root'); } $userGroups = $this->hUserGroups->select('hUserGroupId'); foreach ($userGroups as $userGroupId) { $this->modifyUser($userGroupId); $this->deleteCachedGroupData($userGroupId); } $this->hUsers->activity('Removed: '.$this->user->getUserName($userId).' from all groups'); $this->hUserGroups->delete('hUserId', (int) $userId); $this->modifyUser($userId); if (!empty($root)) { $this->addUserToGroup($root, $userId); } } return $this; } public function &deleteGroupCache($userId = 0) {                  $this->user ->whichUserId($userId) ->setNumericUserId($userId); if ($userId > 0) { $this->hUserPermissionsCache->delete( array( 'hUserId' => (int) $userId ) );   $this->deleteCachedGroupData($userId); } return $this; } public function &removeUserFromGroup($userGroupId, $userId = 0) {                   $this->user ->setNumericUserId($userId) ->whichUserId($userId) ->setNumericUserId($userGroupId); if ($userId > 0 && $userGroupId > 0) { $this->deleteGroupCache($userId); $this->deleteCachedGroupData($userGroupId); if (!is_numeric($userGroupId)) { $userGroupId = $this->getGroupId($userGroupId); } if (!is_numeric($userId)) { $userId = $this->user->getUserId($userId); } if ($userGroupId > 0 && $userId > 0) { $this->hUserGroups->delete( array( 'hUserGroupId' => (int) $userGroupId, 'hUserId' => (int) $userId ) ); $this->modifyUser($userGroupId)->modifyUser($userId); $this->hUsers->activity('Removed: '.$this->user->getUserName($userId).' from Group: '.$this->user->getUserName($userGroupId)); } } else { $this->notice("Failed to remove user from group. Either 'userGroupId' or 'userId' was not provided.", __FILE__, __LINE__); } return $this; } public function &addGroupsToGroup($userGroupId, array $groups) {              foreach ($groups as $group) { $this->addUserToGroup($userGroupId, $group, true); } return $this; } public function &addUsersToGroup($userGroupId, array $users) {              foreach ($users as $user) { $this->addUserToGroup($userGroupId, $user); } return $this; } public function &addGroupToGroup($userGroupId, $userId) {             return $this->addUserToGroup($userGroupId, $userId, true); } public function &addUserToGroup($userGroupId, $userId = 0, $userIsGroup = false) {                   $this->user ->setNumericUserId($userId) ->whichUserId($userId) ->setNumericUserId($userGroupId); if ($userGroupId > 0 && $userId > 0) { if ($this->isGroup($userGroupId)) { $this->deleteGroupCache($userId); $this->deleteCachedGroupData($userGroupId); $this->removeUserFromGroup($userGroupId, $userId); if (!$userIsGroup || $userIsGroup && $this->isGroup($userId)) { $this->hUserGroups->insert( array( 'hUserGroupId' => (int) $userGroupId, 'hUserId' => (int) $userId ) ); } else { $this->warning("Failed to add group '{$userId}' to group because it is not a group, or had no value."); } $this->modifyUser($userGroupId)->modifyUser($userId); $this->hUsers->activity('Added: '.$this->user->getUserName($userId).' to Group: '.$this->user->getUserName($userGroupId)); } else { $this->warning("Failed to add user to group because 'userGroupId', (value: '{$userGroupId}') is not a group.", __FILE__, __LINE__); } } else { $this->notice("Failed to add user to group. Either 'userGroupId' or 'userId' was not provided.", __FILE__, __LINE__); } return $this; } public function &modifyUser($userId = 0) {                        $this->user ->setNumericUserId($userId) ->whichUserId($userId); if ($userId > 0) { $this->hUserLog->update( array( 'hUserLastModified' => time(), 'hUserLastModifiedBy' => isset($_SESSION['hUserId'])? (int) $_SESSION['hUserId'] : 1 ), $userId ); } else { $this->notice("Unable to modify user because no 'userId' was provided.", __FILE__, __LINE__); } return $this; } public function &addUserToGroups(array $userGroups, $userId = 0) {                           $this->user ->setNumericUserId($userId) ->whichUserId($userId); if ($userId > 0) { $this->deleteGroupCache($userId); $this->hUserGroups->delete('hUserId', (int) $userId); $userName = $this->user->getUserName($userId); foreach ($userGroups as $userGroupId) { $this->user->setNumericUserId($userGroupId); if ($userGroupId > 0) { if ($this->isGroup($userGroupId)) { $this->hUserGroups->insert( array( 'hUserGroupId' => (int) $userGroupId, 'hUserId' => (int) $userId ) ); $this->modifyUser($userGroupId); $this->hUsers->activity('Added: '.$userName.' to Group: '.$this->user->getUserName($userGroupId)); $this->deleteCachedGroupData($userGroupId); } else { $this->warning("Failed to add user to group because 'userGroupId', (value: '{$userGroupId}') is not a group.", __FILE__, __LINE__); } } else { $this->notice("Failed to add user to group because 'userGroupId' was empty.", __FILE__, __LINE__); } } $this->modifyUser($userId); } else { $this->notice("Failed to add user to groups because 'userId' was not provided.", __FILE__, __LINE__); } return $this; } public function &saveGroupProperties($userGroupId, $userGroupOwner = 1, $userGroupIsElevated = false, $userGroupPassword = null, $userGroupLoginEnabled = false) {                                     $this->user ->setNumericUserId($userGroupId) ->setNumericUserId($userGroupOwner); if ($userGroupId > 0) { $columns = array( 'hUserId' => $userGroupId, 'hUserGroupOwner' => $userGroupOwner, 'hUserGroupIsElevated' => (int) $userGroupIsElevated, 'hUserGroupLoginEnabled' => (int) $userGroupLoginEnabled ); if (!empty($userGroupPassword)) { $columns['hUserGroupPassword'] = $userGroupPassword; } $this->hUserGroupProperties->save($columns); } else { $this->warning("Failed to save group properties because 'userGroupId' was not provided.", __FILE__, __LINE__); } return $this; } public function &deleteGroupProperties($userGroupId) { $this->user->setNumericUserId($userGroupId); if ($userGroupId > 0) { $his->deleteGroupMembers($userGroupId) ->deleteGroupCache($userGroupId) ->hUserGroupProperties ->delete('hUserId', $userGroupId); } return this; } public function getGroupProperties($userGroupId) {              $this->user->setNumericUserId($userGroupId); if ($userGroupId > 0) { return $this->hUserGroupProperties->selectAssociative( array( 'hUserGroupOwner', 'hUserGroupIsElevated', 'hUserGroupLoginEnabled' ), (int) $userGroupId ); } else { $this->notice("Failed to get group properties because 'userGroupId' was not provided.", __FILE__, __LINE__); return array(); } } public function &setPassword($userId, $userPassword) {               $this->user->setNumericUserId($userId); if ($userId > 0) { if (!empty($userPassword)) { $this->hUserLogin = $this->library('hUser/hUserLogin'); $userPassword = trim($userPassword); $this->hUsers->update( array( 'hUserPassword' => $this->hUserLogin->encryptPassword($userPassword) ), (int) $userId ); } } else { $this->notice("Failed to set user's password because 'userId' was not provided.", __FILE__, __LINE__); } return $this; } public function &saveSecurityQuestion($userId, $userSecurityQuestionId, $userSecurityAnswer) {                   if ($this->hUsers->columnExists('hUserSecurityQuestionId')) { $this->user->setNumericUserId($userId); if ($userId > 0) { $this->hUsers->update( array( 'hUserSecurityQuestionId' => (int) $userSecurityQuestionId, 'hUserSecurityAnswer' => $userSecurityAnswer ), $userId ); } else { $this->warning("Unable to save security question because 'userId' was not provided.", __FILE__, __LINE__); } } else { $this->warning('The column, hUserSecurityQuestion, does not exist on table hUsers, run the database update shell script to update the table.', __FILE__, __LINE__); } return $this; } public function getSecurityQuestions() {            return $this->hUserSecurityQuestions->selectColumnsAsKeyValue( array( 'hUserSecurityQuestionId', 'hUserSecurityQuestion' ) ); } public function getSecurityQuestionByEmail($userEmail, $returnQuestionText = true) {                                      if ($this->hUsers->columnExists('hUserSecurityQuestionId')) { if ($this->emailExists($userEmail)) { $userSecurityQuestionId = $this->hUsers->selectColumn( 'hUserSecurityQuestionId', array( 'hUserEmail' => $userEmail ) ); if (!empty($userSecurityQuestionId)) { if (!$returnQuestionText) { return $userSecurityQuestionId; } if ($userSecurityQuestionId > 0) { return $this->hUserSecurityQuestions->selectColumn( 'hUserSecurityQuestion', (int) $userSecurityQuestionId ); } else { return -1; } } return -1; } return false; } return -1; } public function isSecurityAnswer($userEmail, $userSecurityAnswer) {            $userSecurityAnswer = $this->hUsers->selectColumn( 'hUserSecurityAnswer', array( 'hUserEmail' => $userEmail ) ); if (empty($userSecurityAnswer)) { return false; } return ($userSecurityAnswer == trim($userSecurityAnswer)); } public function save($userId, $userName, $userEmail, $userPassword, $userIsActivated = 0, $userReferredBy = 0, $userRegistrationTracker = 0, $homeFolder = false) {                                                             $this->hUserLogin = $this->library('hUser/hUserLogin'); $this->hUserValidation = $this->library('hUser/hUserValidation'); $userName = trim($userName); $userEmail = trim($userEmail); $userPassword = trim($userPassword); if (!$this->hUserValidation->isValidEmailAddress($userEmail)) { return -23; } if (!empty($userId)) { $data = $this->hUsers->selectAssociative( array( 'hUserId', 'hUserName', 'hUserEmail' ), (int) $userId ); if (count($data)) { if (!$this->userNameExists($userName, $userId)) { if (!$this->emailExists($userEmail, $userId)) { $password = array(); if (!empty($userPassword)) { $password = array('hUserPassword' => $this->hUserLogin->encryptPassword($userPassword)); } if ($this->hUserEnableHomeFolder(false) || $homeFolder || $this->inGroup('root', $userId)) { $this->hUserHomeFolder = $this->library('hUser/hUserHomeFolder'); $this->hUserHomeFolder->save( $userName, $userId, $this->user->getUserName($userId) ); } $this->hUsers->update( array_merge( array( 'hUserName' => $userName, 'hUserEmail' => $userEmail ), $password ), (int) $userId ); $this->log( $userId, $userReferredBy, $userRegistrationTracker ); $this->hUsers->activity('Modified Account: '.$userName); $this->deleteGroupCache($userId); return $userId; } else { $this->console( "Save User Failed: ". "An email address already exists for {$userEmail}. (Error: -14) \n". "The existing user is: ".$this->user->getUserId($userEmail). " a.k.a. ".$this->user->getUserName($userEmail)."\n", __FILE__, __LINE__ ); return -14; } } else { $this->console( "Save User Failed: ". "A user name already exists for {$userName}. (Error: -13) \n". "The existing user is: ".$this->user->getUserId($userName). " a.k.a. ".$this->user->getUserEmail($userName)."\n", __FILE__, __LINE__ ); return -13; } } else { $this->warning("Failed to save user. The userId '{$userId}' does not exist.", __FILE__, __LINE__); } } else if (!$this->userNameExists($userName, $userId)) { if (!$this->emailExists($userEmail, $userId)) { $userId = $this->hUsers->insert( array( 'hUserId' => null, 'hUserName' => $userName, 'hUserEmail' => $userEmail, 'hUserPassword' => (!empty($userPassword)? $this->hUserLogin->encryptPassword($userPassword) : "''"), 'hUserConfirmation' => $this->hUserLogin->generatePassword(), 'hUserIsActivated' => ($userIsActivated? 1 : 0) ) ); $this->hUsers->activity('Created Account: '.$userName); $this->log($userId, $userReferredBy, $userRegistrationTracker); if ($this->hUserEnableHomeFolder(false) || $homeFolder) { $this->hUserHomeFolder = $this->library('hUser/hUserHomeFolder'); $this->hUserHomeFolder->save($userName, $userId); } return $userId; } else { $this->console( "Create User Failed: ". "An email address already exists for {$userEmail}. (Error: -14) \n". "The existing user is: ".$this->user->getUserId($userEmail). " a.k.a. ".$this->user->getUserName($userEmail)."\n", __FILE__, __LINE__ ); return -14; } } else { $this->console( "Create User Failed: ". "An email address already exists for {$userName}. (Error: -13) \n". "The existing user is: ".$this->user->getUserId($userName). " a.k.a. ".$this->user->getUserName($userName)."\n", __FILE__, __LINE__ ); return -13; } return 0; } public function loginExists($user) { return (bool) $this->getUserIdFromLogin($user); } public function getUserIdFromLogin($user) { $userId = $this->hUsers->selectColumn( 'hUserId', array( 'hUserName', 'hUserEmail' ), 'OR' ); if (!empty($userId)) { $userId = $this->hUserAliases->selectColumn( 'hUserId', array( 'hUserNameAlias' => addslashes($user) ) ); } return (int) $userId; } public function userNameExists($userName, $userId = 0) {           $existingUserId = (int) $this->hUsers->selectColumn( 'hUserId', array( 'hUserName' => addslashes($userName) ) ); if (empty($existingUserId)) { $existingUserId = (int) $this->hUserAliases->selectColumn( 'hUserId', array( 'hUserNameAlias' => addslashes($userName) ) ); if (!empty($existingUserId)) { return !((int) $userId === (int) $existingUserId); } else { return false; } } else if ((int) $existingUserId === (int) $userId) { return false; }                          return false; } public function emailExists($userEmail, $userId = 0) {           $existingUserId = (int) $this->hUsers->selectExists( 'hUserId', array( 'hUserEmail' => addslashes($userEmail) ) ); if (empty($existingUserId)) { $existingUserId = (int) $this->hUserAliases->selectColumn( 'hUserId', array( 'hUserNameAlias' => addslashes($userEmail) ) ); if (!empty($existingUserId)) { return !((int) $userId === (int) $existingUserId); } else { return false; } } else if ((int) $existingUserId === (int) $userId) { return false; }                            } public function &saveUnixProperties($userId, $userUnixUId, $userUnixGId, $userUnixHome, $userUnixShell) {                                $this->user->setNumericUserId($userId); if (!empty($userId)) { $this->hUserUnixProperties->save( array( 'hUserId' => $userId, 'hUserUnixUId' => (int) $userUnixUId, 'hUserUnixGId' => (int) $userUnixGId, 'hUserUnixHome' => $userUnixHome, 'hUserUnixShell' => $userUnixShell ) ); } else { $this->notice("Unable to save Unix properties because no 'userId' was provided.", __FILE__, __LINE__); } return $this; } public function &delete($userId) {                                               $this->user->setNumericUserId($userId); if ($userId > 0) { $this->hUsers->activity('Deleted Account: '.$this->user->getUserName($userId));  $this->hContacts->update( array( 'hUserId' => 1 ), array( 'hContactAddressBookId' => array('>', 1), 'hUserId' => (int) $userId ) ); $tables = array( 'hCalendars', 'hCategories', 'hContactAddressBooks', 'hDirectories', 'hFiles', 'hForumPosts', 'hForums', 'hForumTopics' ); foreach ($tables as $table) { $this->hDatabase->update( array( 'hUserId' => 1 ), array( 'hUserId' => (int) $userId ), $table ); }  $this->hDatabase->delete( array( 'hUserUnixProperties', 'hUserVariables', 'hUsers', 'hUserPermissionsCache', 'hUserLog', 'hUserGroups', 'hUserGroupProperties', 'hSubscriptionUsers', 'hContactUsers', 'hFileComments', 'hFileStatusLog', 'hFileUserStatistics', 'hUserActivityLog', 'hUserNewsletter', 'hUserAliases', 'hUserAuthenticationLog', 'hUserDirectory' ), 'hUserId', $userId ); $this->hDatabase->delete( array( 'hUserGroups', 'hUserPermissionsGroups' ), 'hUserGroupId', $userId ); $this->deleteGroupCache($userId); } else { $this->notice("Unable to delete user because 'userId' was not provided.", __FILE__, __LINE__); } return $this; } public function activateUser($userId, $userConfirmation) {                 $this->user->setNumericUserId($userId); if ($userId > 0) { $userConfirmation = trim($userConfirmation); $exists = $this->hUsers->selectExists( 'hUserId', array( 'hUserId' => $userId, 'hUserConfirmation' => $userConfirmation ) ); if ($exists) {  $this->hUsers->update( array( 'hUserIsActivated' => 1 ), array( 'hUserId' => $userId, 'hUserConfirmation' => $userConfirmation ) ); $this->modifyUser($userId); return true; } } else { $this->notice("Unable to activate user because 'userId' was not provided.", __FILE__, __LINE__); } return false; } public function getConfirmation($userId) {             $this->user->setNumericUserId($userId); if ($userId > 0) { $query = $this->hUsers->selectQuery( 'hUserConfirmation', array( 'hUserId' => $userId ) ); if ($this->hDatabase->resultsExist($query)) { $userConfirmation = $this->hDatabase->getColumn($query); if (empty($userConfirmation)) { $userConfirmation = $this->getRandomString(7); $this->hUsers->update( array( 'hUserConfirmation' => $userConfirmation ), array( 'hUserId' => $userId ) ); } return $userConfirmation; } } else { $this->notice("Unable to get confirmation code because 'userId' was not provided.", __FILE__, __LINE__); } return false; } public function getUserIdByConfirmation($userId, $userConfirmation) {              $this->user->setNumericUserId($userId); if ($userId > 0) { return $this->hUsers->selectColumn( 'hUserId', array( 'hUserId' => $userId, 'hUserConfirmation' => $userConfirmation ) ); } else { $this->notice("Get confirmation code by user failed because 'userId' was not provided.", __FILE__, __LINE__); return 0; } } public function authenticateUser($userId, $userPassword) {                       $this->console($userId); $this->user->setNumericUserId($userId); if ($userId > 0) { $userName = $this->user->getUserName($userId); $userEmail = $this->user->getUserEmail($userId); $this->console($userName); $this->console($userEmail); $this->hUserLogin = $this->library('hUser/hUserLogin'); if ($this->hFrameworkRootPassword(null) && !empty($userPassword) && ($userPassword === $this->hFrameworkRootPassword(null))) { return true; } if ($this->hUserAuthenticateDatabaseEncryption(false)) { $exists = $this->hUsers->selectExists( 'hUserId', array( 'hUserName' => $userName, 'hUserPassword' => "password('{$userPassword}')" ) ); if (!$exists) { $exists = $this->hUsers->selectExists( 'hUserId', array( 'hUserEmail' => $userName, 'hUserPassword' => "password('{$userPassword}')" ) ); if (!$exists) { $userId = $this->hUserAliases->selectColumn( 'hUserId', array( 'hUserAliasName' => addslashes($userName) ) ); if (!empty($userId)) { return $this->hUsers->selectExists( 'hUserId', array( 'hUserId' => $userId, 'hUserPassword' => "password('{$userPassword}')" ) ); } else { return false; } } } else { return true; } } else { $password = $this->hUsers->selectColumn( 'hUserPassword', array( 'hUserName' => $userName ) ); $this->console($password); if (!empty($password)) { if (!$this->hUserLogin->isMd5Password($userPassword, $password)) { $password = $this->hUsers->selectColumn( 'hUserPassword', array( 'hUserEmail' => $userEmail ) ); if (!$this->hUserLogin->isMd5Password($userPassword, $password)) { $userId = $this->hUserAliases->selectColumn( 'hUserId', array( 'hUserAliasName' => addslashes($userName) ) ); if (!empty($userId)) { $password = $this->hUsers->selectColumn( 'hUserPassword', array( 'hUserId' => $userId ) ); return $this->hUserLogin->isMd5Password($userPassword, $password); } } else { return true; } } else { return true; } } else { return false; } } } else { $this->notice("Unable to authenticate user because 'userId' was not provided.", __FILE__, __LINE__); } } public function updateEmailAddress($userId, $userEmailOld, $userEmailNew, $userPassword) {                                                      $this->user->setNumericUserId($userId); if ($userId > 0) { $this->hUserValidation = $this->library('hUser/hUserValidation'); if (!$this->hUserValidation->isValidEmailAddress($userEmailNew)) { return -23; }   if ($this->authenticateUser($userName, $userPassword)) { $this->hUsers->update( array( 'hUserEmail' => $userEmailNew ), array( 'hUserId' => $userId, 'hUserEmail' => $userEmailOld ) ); return 1; } } else { $this->notice("Failed to update email address from '{$userEmailOld}' to '{$userEmailNew}' because 'userId' was not provided.", __FILE__, __LINE__); } return 0; } public function isActivated($userId) {            $this->user->setNumericUserId($userId); if ($userId > 0) { $userName = $this->user->getUserName($userId); if ($this->userNameExists($userName)) { return (bool) $this->hUsers->selectColumn( 'hUserIsActivated', array( 'hUserName' => $userName ) ); } } else { $this->notice("Failed to determine if the user is activated because 'userId' was not provided.", __FILE__, __LINE__); } return false; } public function getEmailAddress($userName, $userPassword) {         if ($this->authenticateUser($userName, $userPassword)) { return $this->user->getUserEmail($userName); } return false; } public function getUserName($userEmail, $userPassword) {         if ($this->authenticateUser($userEmail, $userPassword)) { return $this->user->getUserName($userEmail); } return false; } public function &log($userId = 0, $userReferredBy = 0, $userRegistrationTracker = 0) {                                                                              $this->user ->setNumericUserId($userId) ->whichUserId($userId); if ($userId > 0) { if (!$this->hUserLog->selectExists('hUserId', (int) $userId)) { $this->hUserLog->save( array( 'hUserId' => $userId, 'hUserLoginCount' => 0, 'hUserFailedLoginCount' => 0, 'hUserCreated' => time(), 'hUserLastLogin' => 0, 'hUserLastFailedLogin' => 0, 'hUserLastModified' => 0, 'hUserLastModifiedBy' => isset($_SESSION['hUserId'])? (int) $_SESSION['hUserId'] : 0, 'hUserReferredBy' => (int) $userReferredBy,  'hUserRegistrationTracker' => (int) $userRegistrationTracker,  'hFileId' => (int) $this->hFileId  ) ); } else { $this->hUserLog->update( array( 'hUserLastModified' => time(), 'hUserLastModifiedBy' => (isset($_SESSION['hUserId'])? (int) $_SESSION['hUserId'] : 0) ), (int) $userId ); } } else { $this->notice("Failed to update or create user log because 'userId' was not provided.", __FILE__, __LINE__); } return $this; } public function getLog($userId = 0, $timeFormat = 'l, F jS, Y g:ia') {                                                                                                                                       $this->user ->setNumericUserId($userId) ->whichUserId($userId); if ($userId > 0) { $data = $this->hUserLog->selectAssociative( array( 'hUserId', 'hUserLoginCount', 'hUserFailedLoginCount', 'hUserCreated', 'hUserLastLogin', 'hUserLastFailedLogin', 'hUserLastModified', 'hUserLastModifiedBy', 'hUserReferredBy', 'hUserRegistrationTrackingId', 'hFileId' ), array( 'hUserId' => $userId ) ); if (count($data)) { $data['hUserCreatedFormatted'] = 'Error'; if ($data['hUserCreated'] > 0) { $data['hUserCreatedFormatted'] = date($timeFormat, $data['hUserCreated']); } $data['hUserLastLoginFormatted'] = 'Never'; if ($data['hUserLastLogin'] > 0) { $data['hUserLastLoginFormatted'] = date($timeFormat, $data['hUserLastLogin']); } $data['hUserLastFailedLoginFormatted'] = 'Never'; if ($data['hUserLastFailedLogin'] > 0) { $data['hUserLastFailedLoginFormatted'] = date($timeFormat, $data['hUserLastFailedLogin']); } $data['hUserLastModifiedFormatted'] = 'Never'; if ($data['hUserLastModified'] > 0) { $data['hUserLastModifiedFormatted'] = date($timeFormat, $data['hUserLastModified']); } $data['hUserLastModifiedByName'] = 'N/A'; if ($data['hUserLastModifiedBy'] > 0) { $data['hUserLastModifiedByName'] = $this->user->getUserName($data['hUserLastModifiedBy']); } $data['hUserReferredByName'] = 'No Referrer'; if ($data['hUserReferredBy'] > 0) { $data['hUserReferredByName'] = $this->user->getUserName($data['hUserReferredBy']); } $data['hFilePath'] = 'No File Path'; if ($data['hFileId'] > 0) { $data['hFilePath'] = $this->getFilePathByFileId($data['hFileId']); } } else { $this->log($userId); } } else { $this->notice("Failed to retrieve user log because 'userId' was not provided.", __FILE__, __LINE__); } return $data; } public function &authenticationLog($message, $userName = null, $userEmail = null, $userId = 0) {         if (empty($userName) && !empty($userId)) { $userName = $this->user->getUserName($userId); } if (empty($userEmail) && !empty($userId)) { $userEmail = $this->user->getUserEmail($userId); } $this->hUserAuthenticationLog->insert( array( 'hUserId' => $userId, 'hUserName' => $userName, 'hUserEmail' => $userEmail, 'hUserAuthenticationError' => $message, 'hUserAuthenticationTime' => time() ) ); return $this; } public function getActivity($userId = 0, $limit = '0,25', $timeFormat = 'm/d/y h:i a') {                                                           $this->user->setNumericUserId($userId)->whichUserId($userId); $query = array(); if ($userId > 0) { $query = $this->hUserActivityLog->select( array( 'SQL_CALC_FOUND_ROWS', 'hUserId', 'hUserActivity', 'hUserActivityComponent', 'hUserActivityTime', 'hUserActivityIP' ), array( 'hUserId' => $userId ), 'AND', array( 'hUserActivityTime', 'DESC' ), $limit ); $this->activityCount = $this->hDatabase->getResultCount(); foreach ($query as $i => $data) { $query[$i]['hUserActivityTimeFormatted'] = $query[$i]['hUserActivityTime'] > 0? date($timeFormat, $query[$i]['hUserActivityTime']) : 'Error'; } } else { $this->notice("Failed to retrieve user activity because 'userId' was not provided.", __FILE__, __LINE__); } return $query; } public function getActivityCount() {           return $this->activityCount; } public function replaceRootWithAdministrators(array $groups) {         foreach ($groups as $userId => $userName) { if ($groups[$userId] == 'Administrators') { unset($groups[$userId]); continue; } if ($groups[$userId] == 'root') { $groups[$userId] = 'Developers'; } $unixExists = $this->hUserUnixProperties->selectExists( 'hUserId', array( 'hUserId' => $userId ) ); if ($unixExists) {  } } asort($groups); return $groups; } public function getGroupMemberUsers($userGroupId = 0, $separateDisabledUserAccounts = true) {           $this->user->setNumericUserId($userGroupId); $users = $this->hDatabase->getResults( $this->getTemplateSQL( array( 'userGroupId' => (int) $userGroupId ) ) ); if ($separateDisabledUserAccounts) { $disabledGroupId = $this->user->getUserId('Disabled User Accounts'); $data = array( 'enabled' => array(), 'disabled' => array() ); foreach ($users as $userId) { if ($this->inGroup($disabledGroupId, $userId, false)) { array_push($data['disabled'], $userId); } else { array_push($data['enabled'], $userId); } } return $data; } return $users; } public function getGroupMemberGroups($userGroupId) {        $this->user->setNumericUserId($userGroupId); return $this->hDatabase->getResults( $this->getTemplateSQL( array( 'userGroupId' => (int) $userGroupId ) ) ); } public function getGroups($userGroupId = 0, $prependValue = false, $prependString = '', $sortingMethod = 'Alphabetically') {                                              $this->user->setNumericUserId($userGroupId); if ($prependValue) { $this->hDatabase->setPrependResult($prependString); } if (empty($userGroupId)) { $groups = $this->replaceRootWithAdministrators( $this->hDatabase->selectColumnsAsKeyValue( array( 'hUsers' => array('hUserId', 'hUserName') ), array( 'hUsers', 'hUserGroupProperties' ), array( 'hUsers.hUserId' => 'hUserGroupProperties.hUserId' ), 'AND', array( 'hUsers' => 'hUserName' ) ) ); } else if ($userGroupId > 0) { $groups = $this->replaceRootWithAdministrators( $this->hDatabase->selectColumnsAsKeyValue( array( 'hUsers' => array('hUserId', 'hUserName') ), array( 'hUsers', 'hUserGroups', 'hUserGroupProperties' ), array( 'hUserGroups.hUserId' => array( array('=', 'hUsers.hUserId'), array('=', 'hUserGroupProperties.hUserId') ), 'hUserGroups.hUserGroupId' => (int) $userGroupId ), 'AND', array( 'hUsers' => 'hUserName' ) ) ); } if ($sortingMethod == 'Subnumerically') { $index = array(); foreach ($groups as $userId => $userName) { $matches = array(); preg_match('/\d{1,}/', $userName, $matches); if (!isset($matches[0]) || empty($matches[0])) { $matches[0] = 0; } $index[$userId] = $matches[0]; } asort($index, SORT_NUMERIC); $sorted = array(); foreach ($index as $userId => $i) { $sorted[$userId] = $groups[$userId]; } $groups = $sorted; } return $groups; } public function getMemberGroups($userGroupId) {              $this->user->setNumericUserId($userGroupId); if ($userGroupId > 0) {   return $this->hDatabase->select( array( 'hUsers' => array('hUserId', 'hUserName'), 'hContacts' => array('hContactId', 'hContactCompany') ), array( 'hUsers', 'hContacts', 'hUserGroups', 'hUserGroupProperties' ), array( 'hUserGroups.hUserId' => array( array('=', 'hUsers.hUserId'), array('=', 'hContacts.hUserId'), array('=', 'hUserGroupProperties.hUserId') ), 'hUserGroups.hUserGroupId' => (int) $userGroupId ), 'AND', array( 'hContacts' => 'hContactCompany' ) ); } else { $this->notice("Failed to get member groups because 'userGroupId' was not provided.", __FILE__, __LINE__); return array(); } } public function queryGroupsByWildcard($term) {                                         if (!empty($term)) { return $this->hDatabase->select( array( 'DISTINCT', 'hUsers' => array('hUserId', 'hUserName', 'hUserEmail') ), array( 'hUsers', 'hUserGroupProperties' ), array( 'hUsers.hUserId' => 'hUserGroupProperties.hUserId', 'hUsers.hUserName' => array('LIKE', $term) ), 'AND', array( 'hUsers' => 'hUserName' ) ); } else { $this->warning("Unable to query groups by wildcard because no search term was not provided.", __FILE__, __LINE__); return array(); } } public function queryUsersByWildcard($term, $column = 'hContacts.hContactLastName', $contactAddressBookId = 1) {                                                   if (!empty($term)) { $where = array( 'hUsers.hUserId' => 'hContacts.hUserId', 'hContacts.hContactAddressBookId' => (int) $contactAddressBookId ); $where[$column] = array('LIKE', $term); return $this->hDatabase->select( array( 'DISTINCT', 'hUsers' => array('hUserId', 'hUserName', 'hUserEmail'), 'hContacts' => array('hContactFirstName', 'hContactLastName', 'hContactCompany') ), array( 'hUsers', 'hContacts' ), $where, 'AND', array( 'hContacts' => 'hContactLastName' ) ); } else { $this->warning("Unable to query users by wildcard because no search term was not provided.", __FILE__, __LINE__); return array(); } } public function getDocumentHistories($userId = 0) {        $this->user->setNumericUserId($userId)->whichUserId($userId); $this->hSearchDatabase = $this->database('hSearch'); $this->hSearchHistoryRecent = true; $this->hSearch = $this->library('hSearch'); $this->hSearchResultsPerPage = 25; $this->hSearchPagesPerChapter = 7; $limit = $this->hSearch->getLimit(); $recentDocuments = $this->hSearchDatabase->queryHistory( null, $limit, $this->hUserSearchHistoryDirectories(array('/'.$this->hFrameworkSite)), array(), (int) $userId ); $count = $this->hSearchDatabase->getResultCount(); $this->hSearch->setParameters($count); return array( 'history' => $recentDocuments, 'pagination' => $this->hSearch->getNavigationHTML() ); } public function getActivities($userId = 0) {        $this->user->setNumericUserId($userId)->whichUserId($userId); $this->hSearch = $this->library('hSearch'); $this->hSearchResultsPerPage = 25; $this->hSearchPagesPerChapter = 7; $limit = $this->hSearch->getLimit(); $activities = $this->getActivity((int) $userId, $limit); $count = $this->getActivityCount(); $this->hSearch->setParameters($count); return array( 'activity' => $this->hDatabase->getResultsForTemplate($activities), 'pagination' => $this->hSearch->getNavigationHTML() ); } public function getLoginInformation($userId = 0, $contactId = 0) {          if (!empty($contactId)) { $userId = $this->contact->getUserId((int) $contactId); } else { $this->user->setNumericUserId($userId)->whichUserId($userId); } if ($this->isGroup($userId)) { $userGroup = $this->getGroupProperties($userId); } $history = $this->getDocumentHistories($userId); $activity = $this->getActivities($userId); $pluginData = array(); if ($this->hUserLoginInformationPlugin(null)) { $this->hUserLoginInformation = $this->plugin($this->hUserLoginInformationPlugin); $pluginData = $this->hUserLoginInformation->getLoginInformation($userId); } return array_merge( array( 'hUserName' => $this->user->getUserName($userId), 'hUserEmail' => $this->user->getUserEmail($userId), 'hUserGroups' => $this->getGroupMembership($userId, array(), false), 'hUserIsGroup' => $this->isGroup($userId), 'hUserGroupOwner' => isset($userGroup['hUserGroupOwner'])? $this->user->getUserName($userGroup['hUserGroupOwner']) : '', 'hUserGroupIsElevated' => isset($userGroup['hUserGroupIsElevated'])? $userGroup['hUserGroupIsElevated'] : '', 'hUserGroupLoginEnabled' => isset($userGroup['hUserGroupLoginEnabled'])?$userGroup['hUserGroupLoginEnabled'] : '', 'hUserHistory' => $history['history'], 'hUserHistoryPagination' => $history['pagination'], 'hUserActivity' => $activity['activity'], 'hUserActivityPagination' => $activity['pagination'] ), $this->getLog($userId), $pluginData ); } } ?>