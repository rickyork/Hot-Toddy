<?php
  class hTerminalService extends hService { public function hConstructor() { if (!$this->isLoggedIn()) { $this->JSON(-6); return; } if (!$this->inGroup('root')) { $this->JSON(-1); return; } } public function execute() { if (isset($_GET['command'])) { $command = hString::entitiesToUTF8($_GET['command'], false); } else if (isset($_POST['command'])) { $command = hString::entitiesToUTF8($_POST['command'], false); } $descriptor = array( 0 => array('pipe', 'r'),  1 => array('pipe', 'w'),  2 => array('pipe', 'w')  ); $pipes = array(); $process = proc_open( $command, $descriptor, $pipes ); if (is_resource($process)) {       fclose($pipes[0]); $output = stream_get_contents($pipes[1]); fclose($pipes[1]); $stderr = stream_get_contents($pipes[2]); fclose($pipes[2]);   $return = proc_close($process); } $this->JSON( array( 'output' => $this->getTemplate( 'Output', array( 'command' => $command, 'output' => !empty($output)? $output : $stderr ) ) ) ); } public function saveWindowDimensions() { if (empty($_GET['width']) || empty($_GET['height'])) { $this->JSON(-5); return; } if (!$this->isLoggedIn()) { $this->JSON(-6); return; } $this->user->saveVariable( 'hTerminalWindowWidth', (int) $_GET['width'] ); $this->user->saveVariable( 'hTerminalWindowHeight', (int) $_GET['height'] ); $this->JSON(1); } } ?>